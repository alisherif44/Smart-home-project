
PROJECT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000050d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000228  00800060  000050d6  0000516a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800288  00800288  00005392  2**0
                  ALLOC
  3 .stab         0000501c  00000000  00000000  00005394  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001c3b  00000000  00000000  0000a3b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000bfeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000210  00000000  00000000  0000c1ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268a  00000000  00000000  0000c3bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014e0  00000000  00000000  0000ea45  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012a9  00000000  00000000  0000ff25  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  000111d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fe  00000000  00000000  000113b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009aa  00000000  00000000  000116ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00012058  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 49 13 	jmp	0x2692	; 0x2692 <__vector_1>
       8:	0c 94 7c 13 	jmp	0x26f8	; 0x26f8 <__vector_2>
       c:	0c 94 af 13 	jmp	0x275e	; 0x275e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 42 1e 	jmp	0x3c84	; 0x3c84 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 f5 1d 	jmp	0x3bea	; 0x3bea <__vector_9>
      28:	0c 94 5a 1c 	jmp	0x38b4	; 0x38b4 <__vector_10>
      2c:	0c 94 0e 1c 	jmp	0x381c	; 0x381c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ed       	ldi	r30, 0xD6	; 214
      68:	f0 e5       	ldi	r31, 0x50	; 80
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3a       	cpi	r26, 0xA2	; 162
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 20 21 	call	0x4240	; 0x4240 <main>
      8a:	0c 94 69 28 	jmp	0x50d2	; 0x50d2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 32 28 	jmp	0x5064	; 0x5064 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e7       	ldi	r26, 0x70	; 112
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4e 28 	jmp	0x509c	; 0x509c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3e 28 	jmp	0x507c	; 0x507c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5a 28 	jmp	0x50b4	; 0x50b4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3e 28 	jmp	0x507c	; 0x507c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5a 28 	jmp	0x50b4	; 0x50b4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 32 28 	jmp	0x5064	; 0x5064 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e7       	ldi	r24, 0x70	; 112
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4e 28 	jmp	0x509c	; 0x509c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3a 28 	jmp	0x5074	; 0x5074 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e7       	ldi	r22, 0x70	; 112
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 56 28 	jmp	0x50ac	; 0x50ac <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 3e 28 	jmp	0x507c	; 0x507c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 5a 28 	jmp	0x50b4	; 0x50b4 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 3e 28 	jmp	0x507c	; 0x507c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 5a 28 	jmp	0x50b4	; 0x50b4 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 3e 28 	jmp	0x507c	; 0x507c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 5a 28 	jmp	0x50b4	; 0x50b4 <__epilogue_restores__+0x18>

000008aa <__lesf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 3e 28 	jmp	0x507c	; 0x507c <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__lesf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__lesf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__lesf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 5a 28 	jmp	0x50b4	; 0x50b4 <__epilogue_restores__+0x18>

0000090a <__fixsfsi>:
     90a:	ac e0       	ldi	r26, 0x0C	; 12
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 42 28 	jmp	0x5084	; 0x5084 <__prologue_saves__+0x20>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	be 01       	movw	r22, r28
     924:	6b 5f       	subi	r22, 0xFB	; 251
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	61 f1       	breq	.+88     	; 0x98a <__fixsfsi+0x80>
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	50 f1       	brcs	.+84     	; 0x98a <__fixsfsi+0x80>
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	21 f4       	brne	.+8      	; 0x942 <__fixsfsi+0x38>
     93a:	8e 81       	ldd	r24, Y+6	; 0x06
     93c:	88 23       	and	r24, r24
     93e:	51 f1       	breq	.+84     	; 0x994 <__fixsfsi+0x8a>
     940:	2e c0       	rjmp	.+92     	; 0x99e <__fixsfsi+0x94>
     942:	2f 81       	ldd	r18, Y+7	; 0x07
     944:	38 85       	ldd	r19, Y+8	; 0x08
     946:	37 fd       	sbrc	r19, 7
     948:	20 c0       	rjmp	.+64     	; 0x98a <__fixsfsi+0x80>
     94a:	6e 81       	ldd	r22, Y+6	; 0x06
     94c:	2f 31       	cpi	r18, 0x1F	; 31
     94e:	31 05       	cpc	r19, r1
     950:	1c f0       	brlt	.+6      	; 0x958 <__fixsfsi+0x4e>
     952:	66 23       	and	r22, r22
     954:	f9 f0       	breq	.+62     	; 0x994 <__fixsfsi+0x8a>
     956:	23 c0       	rjmp	.+70     	; 0x99e <__fixsfsi+0x94>
     958:	8e e1       	ldi	r24, 0x1E	; 30
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	82 1b       	sub	r24, r18
     95e:	93 0b       	sbc	r25, r19
     960:	29 85       	ldd	r18, Y+9	; 0x09
     962:	3a 85       	ldd	r19, Y+10	; 0x0a
     964:	4b 85       	ldd	r20, Y+11	; 0x0b
     966:	5c 85       	ldd	r21, Y+12	; 0x0c
     968:	04 c0       	rjmp	.+8      	; 0x972 <__fixsfsi+0x68>
     96a:	56 95       	lsr	r21
     96c:	47 95       	ror	r20
     96e:	37 95       	ror	r19
     970:	27 95       	ror	r18
     972:	8a 95       	dec	r24
     974:	d2 f7       	brpl	.-12     	; 0x96a <__fixsfsi+0x60>
     976:	66 23       	and	r22, r22
     978:	b1 f0       	breq	.+44     	; 0x9a6 <__fixsfsi+0x9c>
     97a:	50 95       	com	r21
     97c:	40 95       	com	r20
     97e:	30 95       	com	r19
     980:	21 95       	neg	r18
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	4f 4f       	sbci	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	0e c0       	rjmp	.+28     	; 0x9a6 <__fixsfsi+0x9c>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__fixsfsi+0x9c>
     994:	2f ef       	ldi	r18, 0xFF	; 255
     996:	3f ef       	ldi	r19, 0xFF	; 255
     998:	4f ef       	ldi	r20, 0xFF	; 255
     99a:	5f e7       	ldi	r21, 0x7F	; 127
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__fixsfsi+0x9c>
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e8       	ldi	r21, 0x80	; 128
     9a6:	b9 01       	movw	r22, r18
     9a8:	ca 01       	movw	r24, r20
     9aa:	2c 96       	adiw	r28, 0x0c	; 12
     9ac:	e2 e0       	ldi	r30, 0x02	; 2
     9ae:	0c 94 5e 28 	jmp	0x50bc	; 0x50bc <__epilogue_restores__+0x20>

000009b2 <__floatunsisf>:
     9b2:	a8 e0       	ldi	r26, 0x08	; 8
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	ef ed       	ldi	r30, 0xDF	; 223
     9b8:	f4 e0       	ldi	r31, 0x04	; 4
     9ba:	0c 94 3a 28 	jmp	0x5074	; 0x5074 <__prologue_saves__+0x10>
     9be:	7b 01       	movw	r14, r22
     9c0:	8c 01       	movw	r16, r24
     9c2:	61 15       	cp	r22, r1
     9c4:	71 05       	cpc	r23, r1
     9c6:	81 05       	cpc	r24, r1
     9c8:	91 05       	cpc	r25, r1
     9ca:	19 f4       	brne	.+6      	; 0x9d2 <__floatunsisf+0x20>
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	60 c0       	rjmp	.+192    	; 0xa92 <__floatunsisf+0xe0>
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	8e e1       	ldi	r24, 0x1E	; 30
     9d8:	c8 2e       	mov	r12, r24
     9da:	d1 2c       	mov	r13, r1
     9dc:	dc 82       	std	Y+4, r13	; 0x04
     9de:	cb 82       	std	Y+3, r12	; 0x03
     9e0:	ed 82       	std	Y+5, r14	; 0x05
     9e2:	fe 82       	std	Y+6, r15	; 0x06
     9e4:	0f 83       	std	Y+7, r16	; 0x07
     9e6:	18 87       	std	Y+8, r17	; 0x08
     9e8:	c8 01       	movw	r24, r16
     9ea:	b7 01       	movw	r22, r14
     9ec:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__clzsi2>
     9f0:	fc 01       	movw	r30, r24
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	f7 ff       	sbrs	r31, 7
     9f6:	3b c0       	rjmp	.+118    	; 0xa6e <__floatunsisf+0xbc>
     9f8:	22 27       	eor	r18, r18
     9fa:	33 27       	eor	r19, r19
     9fc:	2e 1b       	sub	r18, r30
     9fe:	3f 0b       	sbc	r19, r31
     a00:	57 01       	movw	r10, r14
     a02:	68 01       	movw	r12, r16
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__floatunsisf+0x5e>
     a08:	d6 94       	lsr	r13
     a0a:	c7 94       	ror	r12
     a0c:	b7 94       	ror	r11
     a0e:	a7 94       	ror	r10
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__floatunsisf+0x56>
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a0 e0       	ldi	r26, 0x00	; 0
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__floatunsisf+0x7c>
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	aa 1f       	adc	r26, r26
     a2c:	bb 1f       	adc	r27, r27
     a2e:	2a 95       	dec	r18
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__floatunsisf+0x74>
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	a1 09       	sbc	r26, r1
     a36:	b1 09       	sbc	r27, r1
     a38:	8e 21       	and	r24, r14
     a3a:	9f 21       	and	r25, r15
     a3c:	a0 23       	and	r26, r16
     a3e:	b1 23       	and	r27, r17
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	a1 05       	cpc	r26, r1
     a44:	b1 05       	cpc	r27, r1
     a46:	21 f0       	breq	.+8      	; 0xa50 <__floatunsisf+0x9e>
     a48:	41 e0       	ldi	r20, 0x01	; 1
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	4a 29       	or	r20, r10
     a52:	5b 29       	or	r21, r11
     a54:	6c 29       	or	r22, r12
     a56:	7d 29       	or	r23, r13
     a58:	4d 83       	std	Y+5, r20	; 0x05
     a5a:	5e 83       	std	Y+6, r21	; 0x06
     a5c:	6f 83       	std	Y+7, r22	; 0x07
     a5e:	78 87       	std	Y+8, r23	; 0x08
     a60:	8e e1       	ldi	r24, 0x1E	; 30
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	8e 1b       	sub	r24, r30
     a66:	9f 0b       	sbc	r25, r31
     a68:	9c 83       	std	Y+4, r25	; 0x04
     a6a:	8b 83       	std	Y+3, r24	; 0x03
     a6c:	12 c0       	rjmp	.+36     	; 0xa92 <__floatunsisf+0xe0>
     a6e:	30 97       	sbiw	r30, 0x00	; 0
     a70:	81 f0       	breq	.+32     	; 0xa92 <__floatunsisf+0xe0>
     a72:	0e 2e       	mov	r0, r30
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__floatunsisf+0xcc>
     a76:	ee 0c       	add	r14, r14
     a78:	ff 1c       	adc	r15, r15
     a7a:	00 1f       	adc	r16, r16
     a7c:	11 1f       	adc	r17, r17
     a7e:	0a 94       	dec	r0
     a80:	d2 f7       	brpl	.-12     	; 0xa76 <__floatunsisf+0xc4>
     a82:	ed 82       	std	Y+5, r14	; 0x05
     a84:	fe 82       	std	Y+6, r15	; 0x06
     a86:	0f 83       	std	Y+7, r16	; 0x07
     a88:	18 87       	std	Y+8, r17	; 0x08
     a8a:	ce 1a       	sub	r12, r30
     a8c:	df 0a       	sbc	r13, r31
     a8e:	dc 82       	std	Y+4, r13	; 0x04
     a90:	cb 82       	std	Y+3, r12	; 0x03
     a92:	1a 82       	std	Y+2, r1	; 0x02
     a94:	ce 01       	movw	r24, r28
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     a9c:	28 96       	adiw	r28, 0x08	; 8
     a9e:	ea e0       	ldi	r30, 0x0A	; 10
     aa0:	0c 94 56 28 	jmp	0x50ac	; 0x50ac <__epilogue_restores__+0x10>

00000aa4 <__clzsi2>:
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	7b 01       	movw	r14, r22
     aae:	8c 01       	movw	r16, r24
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	e8 16       	cp	r14, r24
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	f8 06       	cpc	r15, r24
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	08 07       	cpc	r16, r24
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	18 07       	cpc	r17, r24
     ac0:	88 f4       	brcc	.+34     	; 0xae4 <__clzsi2+0x40>
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	e8 16       	cp	r14, r24
     ac6:	f1 04       	cpc	r15, r1
     ac8:	01 05       	cpc	r16, r1
     aca:	11 05       	cpc	r17, r1
     acc:	31 f0       	breq	.+12     	; 0xada <__clzsi2+0x36>
     ace:	28 f0       	brcs	.+10     	; 0xada <__clzsi2+0x36>
     ad0:	88 e0       	ldi	r24, 0x08	; 8
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	17 c0       	rjmp	.+46     	; 0xb08 <__clzsi2+0x64>
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	a0 e0       	ldi	r26, 0x00	; 0
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	12 c0       	rjmp	.+36     	; 0xb08 <__clzsi2+0x64>
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	e8 16       	cp	r14, r24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	f8 06       	cpc	r15, r24
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	08 07       	cpc	r16, r24
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	18 07       	cpc	r17, r24
     af4:	28 f0       	brcs	.+10     	; 0xb00 <__clzsi2+0x5c>
     af6:	88 e1       	ldi	r24, 0x18	; 24
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__clzsi2+0x64>
     b00:	80 e1       	ldi	r24, 0x10	; 16
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	20 e2       	ldi	r18, 0x20	; 32
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	28 1b       	sub	r18, r24
     b12:	39 0b       	sbc	r19, r25
     b14:	4a 0b       	sbc	r20, r26
     b16:	5b 0b       	sbc	r21, r27
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__clzsi2+0x7e>
     b1a:	16 95       	lsr	r17
     b1c:	07 95       	ror	r16
     b1e:	f7 94       	ror	r15
     b20:	e7 94       	ror	r14
     b22:	8a 95       	dec	r24
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__clzsi2+0x76>
     b26:	f7 01       	movw	r30, r14
     b28:	e8 58       	subi	r30, 0x88	; 136
     b2a:	fe 4f       	sbci	r31, 0xFE	; 254
     b2c:	80 81       	ld	r24, Z
     b2e:	28 1b       	sub	r18, r24
     b30:	31 09       	sbc	r19, r1
     b32:	41 09       	sbc	r20, r1
     b34:	51 09       	sbc	r21, r1
     b36:	c9 01       	movw	r24, r18
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	08 95       	ret

00000b42 <__pack_f>:
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	fc 01       	movw	r30, r24
     b4e:	e4 80       	ldd	r14, Z+4	; 0x04
     b50:	f5 80       	ldd	r15, Z+5	; 0x05
     b52:	06 81       	ldd	r16, Z+6	; 0x06
     b54:	17 81       	ldd	r17, Z+7	; 0x07
     b56:	d1 80       	ldd	r13, Z+1	; 0x01
     b58:	80 81       	ld	r24, Z
     b5a:	82 30       	cpi	r24, 0x02	; 2
     b5c:	48 f4       	brcc	.+18     	; 0xb70 <__pack_f+0x2e>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	a0 e1       	ldi	r26, 0x10	; 16
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e8 2a       	or	r14, r24
     b68:	f9 2a       	or	r15, r25
     b6a:	0a 2b       	or	r16, r26
     b6c:	1b 2b       	or	r17, r27
     b6e:	a5 c0       	rjmp	.+330    	; 0xcba <__pack_f+0x178>
     b70:	84 30       	cpi	r24, 0x04	; 4
     b72:	09 f4       	brne	.+2      	; 0xb76 <__pack_f+0x34>
     b74:	9f c0       	rjmp	.+318    	; 0xcb4 <__pack_f+0x172>
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	21 f4       	brne	.+8      	; 0xb82 <__pack_f+0x40>
     b7a:	ee 24       	eor	r14, r14
     b7c:	ff 24       	eor	r15, r15
     b7e:	87 01       	movw	r16, r14
     b80:	05 c0       	rjmp	.+10     	; 0xb8c <__pack_f+0x4a>
     b82:	e1 14       	cp	r14, r1
     b84:	f1 04       	cpc	r15, r1
     b86:	01 05       	cpc	r16, r1
     b88:	11 05       	cpc	r17, r1
     b8a:	19 f4       	brne	.+6      	; 0xb92 <__pack_f+0x50>
     b8c:	e0 e0       	ldi	r30, 0x00	; 0
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	96 c0       	rjmp	.+300    	; 0xcbe <__pack_f+0x17c>
     b92:	62 81       	ldd	r22, Z+2	; 0x02
     b94:	73 81       	ldd	r23, Z+3	; 0x03
     b96:	9f ef       	ldi	r25, 0xFF	; 255
     b98:	62 38       	cpi	r22, 0x82	; 130
     b9a:	79 07       	cpc	r23, r25
     b9c:	0c f0       	brlt	.+2      	; 0xba0 <__pack_f+0x5e>
     b9e:	5b c0       	rjmp	.+182    	; 0xc56 <__pack_f+0x114>
     ba0:	22 e8       	ldi	r18, 0x82	; 130
     ba2:	3f ef       	ldi	r19, 0xFF	; 255
     ba4:	26 1b       	sub	r18, r22
     ba6:	37 0b       	sbc	r19, r23
     ba8:	2a 31       	cpi	r18, 0x1A	; 26
     baa:	31 05       	cpc	r19, r1
     bac:	2c f0       	brlt	.+10     	; 0xbb8 <__pack_f+0x76>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	2a c0       	rjmp	.+84     	; 0xc0c <__pack_f+0xca>
     bb8:	b8 01       	movw	r22, r16
     bba:	a7 01       	movw	r20, r14
     bbc:	02 2e       	mov	r0, r18
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0x86>
     bc0:	76 95       	lsr	r23
     bc2:	67 95       	ror	r22
     bc4:	57 95       	ror	r21
     bc6:	47 95       	ror	r20
     bc8:	0a 94       	dec	r0
     bca:	d2 f7       	brpl	.-12     	; 0xbc0 <__pack_f+0x7e>
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	a0 e0       	ldi	r26, 0x00	; 0
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__pack_f+0x9c>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	aa 1f       	adc	r26, r26
     bdc:	bb 1f       	adc	r27, r27
     bde:	2a 95       	dec	r18
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__pack_f+0x94>
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	a1 09       	sbc	r26, r1
     be6:	b1 09       	sbc	r27, r1
     be8:	8e 21       	and	r24, r14
     bea:	9f 21       	and	r25, r15
     bec:	a0 23       	and	r26, r16
     bee:	b1 23       	and	r27, r17
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	a1 05       	cpc	r26, r1
     bf4:	b1 05       	cpc	r27, r1
     bf6:	21 f0       	breq	.+8      	; 0xc00 <__pack_f+0xbe>
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e0       	ldi	r26, 0x00	; 0
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	9a 01       	movw	r18, r20
     c02:	ab 01       	movw	r20, r22
     c04:	28 2b       	or	r18, r24
     c06:	39 2b       	or	r19, r25
     c08:	4a 2b       	or	r20, r26
     c0a:	5b 2b       	or	r21, r27
     c0c:	da 01       	movw	r26, r20
     c0e:	c9 01       	movw	r24, r18
     c10:	8f 77       	andi	r24, 0x7F	; 127
     c12:	90 70       	andi	r25, 0x00	; 0
     c14:	a0 70       	andi	r26, 0x00	; 0
     c16:	b0 70       	andi	r27, 0x00	; 0
     c18:	80 34       	cpi	r24, 0x40	; 64
     c1a:	91 05       	cpc	r25, r1
     c1c:	a1 05       	cpc	r26, r1
     c1e:	b1 05       	cpc	r27, r1
     c20:	39 f4       	brne	.+14     	; 0xc30 <__pack_f+0xee>
     c22:	27 ff       	sbrs	r18, 7
     c24:	09 c0       	rjmp	.+18     	; 0xc38 <__pack_f+0xf6>
     c26:	20 5c       	subi	r18, 0xC0	; 192
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
     c2a:	4f 4f       	sbci	r20, 0xFF	; 255
     c2c:	5f 4f       	sbci	r21, 0xFF	; 255
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <__pack_f+0xf6>
     c30:	21 5c       	subi	r18, 0xC1	; 193
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
     c34:	4f 4f       	sbci	r20, 0xFF	; 255
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	e0 e0       	ldi	r30, 0x00	; 0
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	20 30       	cpi	r18, 0x00	; 0
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	3a 07       	cpc	r19, r26
     c42:	a0 e0       	ldi	r26, 0x00	; 0
     c44:	4a 07       	cpc	r20, r26
     c46:	a0 e4       	ldi	r26, 0x40	; 64
     c48:	5a 07       	cpc	r21, r26
     c4a:	10 f0       	brcs	.+4      	; 0xc50 <__pack_f+0x10e>
     c4c:	e1 e0       	ldi	r30, 0x01	; 1
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	79 01       	movw	r14, r18
     c52:	8a 01       	movw	r16, r20
     c54:	27 c0       	rjmp	.+78     	; 0xca4 <__pack_f+0x162>
     c56:	60 38       	cpi	r22, 0x80	; 128
     c58:	71 05       	cpc	r23, r1
     c5a:	64 f5       	brge	.+88     	; 0xcb4 <__pack_f+0x172>
     c5c:	fb 01       	movw	r30, r22
     c5e:	e1 58       	subi	r30, 0x81	; 129
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	d8 01       	movw	r26, r16
     c64:	c7 01       	movw	r24, r14
     c66:	8f 77       	andi	r24, 0x7F	; 127
     c68:	90 70       	andi	r25, 0x00	; 0
     c6a:	a0 70       	andi	r26, 0x00	; 0
     c6c:	b0 70       	andi	r27, 0x00	; 0
     c6e:	80 34       	cpi	r24, 0x40	; 64
     c70:	91 05       	cpc	r25, r1
     c72:	a1 05       	cpc	r26, r1
     c74:	b1 05       	cpc	r27, r1
     c76:	39 f4       	brne	.+14     	; 0xc86 <__pack_f+0x144>
     c78:	e7 fe       	sbrs	r14, 7
     c7a:	0d c0       	rjmp	.+26     	; 0xc96 <__pack_f+0x154>
     c7c:	80 e4       	ldi	r24, 0x40	; 64
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a0 e0       	ldi	r26, 0x00	; 0
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <__pack_f+0x14c>
     c86:	8f e3       	ldi	r24, 0x3F	; 63
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e8 0e       	add	r14, r24
     c90:	f9 1e       	adc	r15, r25
     c92:	0a 1f       	adc	r16, r26
     c94:	1b 1f       	adc	r17, r27
     c96:	17 ff       	sbrs	r17, 7
     c98:	05 c0       	rjmp	.+10     	; 0xca4 <__pack_f+0x162>
     c9a:	16 95       	lsr	r17
     c9c:	07 95       	ror	r16
     c9e:	f7 94       	ror	r15
     ca0:	e7 94       	ror	r14
     ca2:	31 96       	adiw	r30, 0x01	; 1
     ca4:	87 e0       	ldi	r24, 0x07	; 7
     ca6:	16 95       	lsr	r17
     ca8:	07 95       	ror	r16
     caa:	f7 94       	ror	r15
     cac:	e7 94       	ror	r14
     cae:	8a 95       	dec	r24
     cb0:	d1 f7       	brne	.-12     	; 0xca6 <__pack_f+0x164>
     cb2:	05 c0       	rjmp	.+10     	; 0xcbe <__pack_f+0x17c>
     cb4:	ee 24       	eor	r14, r14
     cb6:	ff 24       	eor	r15, r15
     cb8:	87 01       	movw	r16, r14
     cba:	ef ef       	ldi	r30, 0xFF	; 255
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	6e 2f       	mov	r22, r30
     cc0:	67 95       	ror	r22
     cc2:	66 27       	eor	r22, r22
     cc4:	67 95       	ror	r22
     cc6:	90 2f       	mov	r25, r16
     cc8:	9f 77       	andi	r25, 0x7F	; 127
     cca:	d7 94       	ror	r13
     ccc:	dd 24       	eor	r13, r13
     cce:	d7 94       	ror	r13
     cd0:	8e 2f       	mov	r24, r30
     cd2:	86 95       	lsr	r24
     cd4:	49 2f       	mov	r20, r25
     cd6:	46 2b       	or	r20, r22
     cd8:	58 2f       	mov	r21, r24
     cda:	5d 29       	or	r21, r13
     cdc:	b7 01       	movw	r22, r14
     cde:	ca 01       	movw	r24, r20
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	08 95       	ret

00000cec <__unpack_f>:
     cec:	fc 01       	movw	r30, r24
     cee:	db 01       	movw	r26, r22
     cf0:	40 81       	ld	r20, Z
     cf2:	51 81       	ldd	r21, Z+1	; 0x01
     cf4:	22 81       	ldd	r18, Z+2	; 0x02
     cf6:	62 2f       	mov	r22, r18
     cf8:	6f 77       	andi	r22, 0x7F	; 127
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	22 1f       	adc	r18, r18
     cfe:	22 27       	eor	r18, r18
     d00:	22 1f       	adc	r18, r18
     d02:	93 81       	ldd	r25, Z+3	; 0x03
     d04:	89 2f       	mov	r24, r25
     d06:	88 0f       	add	r24, r24
     d08:	82 2b       	or	r24, r18
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	99 1f       	adc	r25, r25
     d10:	99 27       	eor	r25, r25
     d12:	99 1f       	adc	r25, r25
     d14:	11 96       	adiw	r26, 0x01	; 1
     d16:	9c 93       	st	X, r25
     d18:	11 97       	sbiw	r26, 0x01	; 1
     d1a:	21 15       	cp	r18, r1
     d1c:	31 05       	cpc	r19, r1
     d1e:	a9 f5       	brne	.+106    	; 0xd8a <__unpack_f+0x9e>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	11 f4       	brne	.+4      	; 0xd2e <__unpack_f+0x42>
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	37 c0       	rjmp	.+110    	; 0xd9c <__unpack_f+0xb0>
     d2e:	82 e8       	ldi	r24, 0x82	; 130
     d30:	9f ef       	ldi	r25, 0xFF	; 255
     d32:	13 96       	adiw	r26, 0x03	; 3
     d34:	9c 93       	st	X, r25
     d36:	8e 93       	st	-X, r24
     d38:	12 97       	sbiw	r26, 0x02	; 2
     d3a:	9a 01       	movw	r18, r20
     d3c:	ab 01       	movw	r20, r22
     d3e:	67 e0       	ldi	r22, 0x07	; 7
     d40:	22 0f       	add	r18, r18
     d42:	33 1f       	adc	r19, r19
     d44:	44 1f       	adc	r20, r20
     d46:	55 1f       	adc	r21, r21
     d48:	6a 95       	dec	r22
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__unpack_f+0x54>
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	8c 93       	st	X, r24
     d50:	0d c0       	rjmp	.+26     	; 0xd6c <__unpack_f+0x80>
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	44 1f       	adc	r20, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	12 96       	adiw	r26, 0x02	; 2
     d5c:	8d 91       	ld	r24, X+
     d5e:	9c 91       	ld	r25, X
     d60:	13 97       	sbiw	r26, 0x03	; 3
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	13 96       	adiw	r26, 0x03	; 3
     d66:	9c 93       	st	X, r25
     d68:	8e 93       	st	-X, r24
     d6a:	12 97       	sbiw	r26, 0x02	; 2
     d6c:	20 30       	cpi	r18, 0x00	; 0
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	38 07       	cpc	r19, r24
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	48 07       	cpc	r20, r24
     d76:	80 e4       	ldi	r24, 0x40	; 64
     d78:	58 07       	cpc	r21, r24
     d7a:	58 f3       	brcs	.-42     	; 0xd52 <__unpack_f+0x66>
     d7c:	14 96       	adiw	r26, 0x04	; 4
     d7e:	2d 93       	st	X+, r18
     d80:	3d 93       	st	X+, r19
     d82:	4d 93       	st	X+, r20
     d84:	5c 93       	st	X, r21
     d86:	17 97       	sbiw	r26, 0x07	; 7
     d88:	08 95       	ret
     d8a:	2f 3f       	cpi	r18, 0xFF	; 255
     d8c:	31 05       	cpc	r19, r1
     d8e:	79 f4       	brne	.+30     	; 0xdae <__unpack_f+0xc2>
     d90:	41 15       	cp	r20, r1
     d92:	51 05       	cpc	r21, r1
     d94:	61 05       	cpc	r22, r1
     d96:	71 05       	cpc	r23, r1
     d98:	19 f4       	brne	.+6      	; 0xda0 <__unpack_f+0xb4>
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	8c 93       	st	X, r24
     d9e:	08 95       	ret
     da0:	64 ff       	sbrs	r22, 4
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <__unpack_f+0xbe>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	8c 93       	st	X, r24
     da8:	12 c0       	rjmp	.+36     	; 0xdce <__unpack_f+0xe2>
     daa:	1c 92       	st	X, r1
     dac:	10 c0       	rjmp	.+32     	; 0xdce <__unpack_f+0xe2>
     dae:	2f 57       	subi	r18, 0x7F	; 127
     db0:	30 40       	sbci	r19, 0x00	; 0
     db2:	13 96       	adiw	r26, 0x03	; 3
     db4:	3c 93       	st	X, r19
     db6:	2e 93       	st	-X, r18
     db8:	12 97       	sbiw	r26, 0x02	; 2
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	8c 93       	st	X, r24
     dbe:	87 e0       	ldi	r24, 0x07	; 7
     dc0:	44 0f       	add	r20, r20
     dc2:	55 1f       	adc	r21, r21
     dc4:	66 1f       	adc	r22, r22
     dc6:	77 1f       	adc	r23, r23
     dc8:	8a 95       	dec	r24
     dca:	d1 f7       	brne	.-12     	; 0xdc0 <__unpack_f+0xd4>
     dcc:	70 64       	ori	r23, 0x40	; 64
     dce:	14 96       	adiw	r26, 0x04	; 4
     dd0:	4d 93       	st	X+, r20
     dd2:	5d 93       	st	X+, r21
     dd4:	6d 93       	st	X+, r22
     dd6:	7c 93       	st	X, r23
     dd8:	17 97       	sbiw	r26, 0x07	; 7
     dda:	08 95       	ret

00000ddc <__fpcmp_parts_f>:
     ddc:	1f 93       	push	r17
     dde:	dc 01       	movw	r26, r24
     de0:	fb 01       	movw	r30, r22
     de2:	9c 91       	ld	r25, X
     de4:	92 30       	cpi	r25, 0x02	; 2
     de6:	08 f4       	brcc	.+2      	; 0xdea <__fpcmp_parts_f+0xe>
     de8:	47 c0       	rjmp	.+142    	; 0xe78 <__fpcmp_parts_f+0x9c>
     dea:	80 81       	ld	r24, Z
     dec:	82 30       	cpi	r24, 0x02	; 2
     dee:	08 f4       	brcc	.+2      	; 0xdf2 <__fpcmp_parts_f+0x16>
     df0:	43 c0       	rjmp	.+134    	; 0xe78 <__fpcmp_parts_f+0x9c>
     df2:	94 30       	cpi	r25, 0x04	; 4
     df4:	51 f4       	brne	.+20     	; 0xe0a <__fpcmp_parts_f+0x2e>
     df6:	11 96       	adiw	r26, 0x01	; 1
     df8:	1c 91       	ld	r17, X
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	99 f5       	brne	.+102    	; 0xe64 <__fpcmp_parts_f+0x88>
     dfe:	81 81       	ldd	r24, Z+1	; 0x01
     e00:	68 2f       	mov	r22, r24
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	61 1b       	sub	r22, r17
     e06:	71 09       	sbc	r23, r1
     e08:	3f c0       	rjmp	.+126    	; 0xe88 <__fpcmp_parts_f+0xac>
     e0a:	84 30       	cpi	r24, 0x04	; 4
     e0c:	21 f0       	breq	.+8      	; 0xe16 <__fpcmp_parts_f+0x3a>
     e0e:	92 30       	cpi	r25, 0x02	; 2
     e10:	31 f4       	brne	.+12     	; 0xe1e <__fpcmp_parts_f+0x42>
     e12:	82 30       	cpi	r24, 0x02	; 2
     e14:	b9 f1       	breq	.+110    	; 0xe84 <__fpcmp_parts_f+0xa8>
     e16:	81 81       	ldd	r24, Z+1	; 0x01
     e18:	88 23       	and	r24, r24
     e1a:	89 f1       	breq	.+98     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e1c:	2d c0       	rjmp	.+90     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	1c 91       	ld	r17, X
     e22:	11 97       	sbiw	r26, 0x01	; 1
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	f1 f0       	breq	.+60     	; 0xe64 <__fpcmp_parts_f+0x88>
     e28:	81 81       	ldd	r24, Z+1	; 0x01
     e2a:	18 17       	cp	r17, r24
     e2c:	d9 f4       	brne	.+54     	; 0xe64 <__fpcmp_parts_f+0x88>
     e2e:	12 96       	adiw	r26, 0x02	; 2
     e30:	2d 91       	ld	r18, X+
     e32:	3c 91       	ld	r19, X
     e34:	13 97       	sbiw	r26, 0x03	; 3
     e36:	82 81       	ldd	r24, Z+2	; 0x02
     e38:	93 81       	ldd	r25, Z+3	; 0x03
     e3a:	82 17       	cp	r24, r18
     e3c:	93 07       	cpc	r25, r19
     e3e:	94 f0       	brlt	.+36     	; 0xe64 <__fpcmp_parts_f+0x88>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	bc f0       	brlt	.+46     	; 0xe74 <__fpcmp_parts_f+0x98>
     e46:	14 96       	adiw	r26, 0x04	; 4
     e48:	8d 91       	ld	r24, X+
     e4a:	9d 91       	ld	r25, X+
     e4c:	0d 90       	ld	r0, X+
     e4e:	bc 91       	ld	r27, X
     e50:	a0 2d       	mov	r26, r0
     e52:	24 81       	ldd	r18, Z+4	; 0x04
     e54:	35 81       	ldd	r19, Z+5	; 0x05
     e56:	46 81       	ldd	r20, Z+6	; 0x06
     e58:	57 81       	ldd	r21, Z+7	; 0x07
     e5a:	28 17       	cp	r18, r24
     e5c:	39 07       	cpc	r19, r25
     e5e:	4a 07       	cpc	r20, r26
     e60:	5b 07       	cpc	r21, r27
     e62:	18 f4       	brcc	.+6      	; 0xe6a <__fpcmp_parts_f+0x8e>
     e64:	11 23       	and	r17, r17
     e66:	41 f0       	breq	.+16     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e68:	0a c0       	rjmp	.+20     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e6a:	82 17       	cp	r24, r18
     e6c:	93 07       	cpc	r25, r19
     e6e:	a4 07       	cpc	r26, r20
     e70:	b5 07       	cpc	r27, r21
     e72:	40 f4       	brcc	.+16     	; 0xe84 <__fpcmp_parts_f+0xa8>
     e74:	11 23       	and	r17, r17
     e76:	19 f0       	breq	.+6      	; 0xe7e <__fpcmp_parts_f+0xa2>
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <__fpcmp_parts_f+0xac>
     e7e:	6f ef       	ldi	r22, 0xFF	; 255
     e80:	7f ef       	ldi	r23, 0xFF	; 255
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <__fpcmp_parts_f+0xac>
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	cb 01       	movw	r24, r22
     e8a:	1f 91       	pop	r17
     e8c:	08 95       	ret

00000e8e <ADC_voidInit>:
#include "BIT_MATH.h"
#include "STD_TYPES.h"
#include "ADC_register.h"
#include "ADC_interface.h"

void ADC_voidInit(u8 copy_u8RefrenceVoltage){
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	00 d0       	rcall	.+0      	; 0xe94 <ADC_voidInit+0x6>
     e94:	0f 92       	push	r0
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	89 83       	std	Y+1, r24	; 0x01
	//TO CHOOSE THE REFRENCE VOLTAGE
	switch(copy_u8RefrenceVoltage){
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	3b 83       	std	Y+3, r19	; 0x03
     ea4:	2a 83       	std	Y+2, r18	; 0x02
     ea6:	8a 81       	ldd	r24, Y+2	; 0x02
     ea8:	9b 81       	ldd	r25, Y+3	; 0x03
     eaa:	81 30       	cpi	r24, 0x01	; 1
     eac:	91 05       	cpc	r25, r1
     eae:	c1 f0       	breq	.+48     	; 0xee0 <ADC_voidInit+0x52>
     eb0:	2a 81       	ldd	r18, Y+2	; 0x02
     eb2:	3b 81       	ldd	r19, Y+3	; 0x03
     eb4:	22 30       	cpi	r18, 0x02	; 2
     eb6:	31 05       	cpc	r19, r1
     eb8:	11 f1       	breq	.+68     	; 0xefe <ADC_voidInit+0x70>
     eba:	8a 81       	ldd	r24, Y+2	; 0x02
     ebc:	9b 81       	ldd	r25, Y+3	; 0x03
     ebe:	00 97       	sbiw	r24, 0x00	; 0
     ec0:	61 f5       	brne	.+88     	; 0xf1a <ADC_voidInit+0x8c>
	case ADC_REFERANCE_AVCC:
		CLR_BIT(ADMUX_REG,REFS1);
     ec2:	a7 e2       	ldi	r26, 0x27	; 39
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e7 e2       	ldi	r30, 0x27	; 39
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	8f 77       	andi	r24, 0x7F	; 127
     ece:	8c 93       	st	X, r24
		SET_BIT(ADMUX_REG,REFS0);
     ed0:	a7 e2       	ldi	r26, 0x27	; 39
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e7 e2       	ldi	r30, 0x27	; 39
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	80 64       	ori	r24, 0x40	; 64
     edc:	8c 93       	st	X, r24
     ede:	1d c0       	rjmp	.+58     	; 0xf1a <ADC_voidInit+0x8c>
		break;
	case ADC_REFERANCE_AREF:
		CLR_BIT(ADMUX_REG,REFS1);
     ee0:	a7 e2       	ldi	r26, 0x27	; 39
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	e7 e2       	ldi	r30, 0x27	; 39
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	8f 77       	andi	r24, 0x7F	; 127
     eec:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,REFS0);
     eee:	a7 e2       	ldi	r26, 0x27	; 39
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	e7 e2       	ldi	r30, 0x27	; 39
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	8f 7b       	andi	r24, 0xBF	; 191
     efa:	8c 93       	st	X, r24
     efc:	0e c0       	rjmp	.+28     	; 0xf1a <ADC_voidInit+0x8c>
		break;
	case ADC_REFERANCE_INTERNAL:
		SET_BIT(ADMUX_REG,REFS1);
     efe:	a7 e2       	ldi	r26, 0x27	; 39
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e7 e2       	ldi	r30, 0x27	; 39
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	80 68       	ori	r24, 0x80	; 128
     f0a:	8c 93       	st	X, r24
		SET_BIT(ADMUX_REG,REFS0);
     f0c:	a7 e2       	ldi	r26, 0x27	; 39
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e7 e2       	ldi	r30, 0x27	; 39
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	80 64       	ori	r24, 0x40	; 64
     f18:	8c 93       	st	X, r24
		break;

	}
	//RIGHT ADJUSTMENT
	CLR_BIT(ADMUX_REG,ADLAR);
     f1a:	a7 e2       	ldi	r26, 0x27	; 39
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	e7 e2       	ldi	r30, 0x27	; 39
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	8f 7d       	andi	r24, 0xDF	; 223
     f26:	8c 93       	st	X, r24

	//SINGLE CONVERSION MODE
	CLR_BIT(ADCSRA_REG,ADATE);
     f28:	a6 e2       	ldi	r26, 0x26	; 38
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	e6 e2       	ldi	r30, 0x26	; 38
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	8f 7d       	andi	r24, 0xDF	; 223
     f34:	8c 93       	st	X, r24

	//CLR INTERUPT OF ADC
	CLR_BIT(ADCSRA_REG,ADIE);
     f36:	a6 e2       	ldi	r26, 0x26	; 38
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e6 e2       	ldi	r30, 0x26	; 38
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	87 7f       	andi	r24, 0xF7	; 247
     f42:	8c 93       	st	X, r24

	//PRESCALER
	SET_BIT(ADCSRA_REG,ADPS0);
     f44:	a6 e2       	ldi	r26, 0x26	; 38
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e6 e2       	ldi	r30, 0x26	; 38
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	81 60       	ori	r24, 0x01	; 1
     f50:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG,ADPS1);
     f52:	a6 e2       	ldi	r26, 0x26	; 38
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e6 e2       	ldi	r30, 0x26	; 38
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	82 60       	ori	r24, 0x02	; 2
     f5e:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG,ADPS2);
     f60:	a6 e2       	ldi	r26, 0x26	; 38
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e6 e2       	ldi	r30, 0x26	; 38
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	84 60       	ori	r24, 0x04	; 4
     f6c:	8c 93       	st	X, r24

	//ADC ENABLE
	SET_BIT(ADCSRA_REG,ADEN);
     f6e:	a6 e2       	ldi	r26, 0x26	; 38
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e6 e2       	ldi	r30, 0x26	; 38
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	80 68       	ori	r24, 0x80	; 128
     f7a:	8c 93       	st	X, r24
}
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	cf 91       	pop	r28
     f84:	df 91       	pop	r29
     f86:	08 95       	ret

00000f88 <ADC_voidGetDigigtalValue>:
void ADC_voidGetDigigtalValue(u8 copy_u8ChannelId,u16* copy_pu16DigitalValue){
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	00 d0       	rcall	.+0      	; 0xf8e <ADC_voidGetDigigtalValue+0x6>
     f8e:	00 d0       	rcall	.+0      	; 0xf90 <ADC_voidGetDigigtalValue+0x8>
     f90:	cd b7       	in	r28, 0x3d	; 61
     f92:	de b7       	in	r29, 0x3e	; 62
     f94:	89 83       	std	Y+1, r24	; 0x01
     f96:	7b 83       	std	Y+3, r23	; 0x03
     f98:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_pu16DigitalValue !=NULL && copy_u8ChannelId<32){
     f9a:	8a 81       	ldd	r24, Y+2	; 0x02
     f9c:	9b 81       	ldd	r25, Y+3	; 0x03
     f9e:	00 97       	sbiw	r24, 0x00	; 0
     fa0:	59 f1       	breq	.+86     	; 0xff8 <ADC_voidGetDigigtalValue+0x70>
     fa2:	89 81       	ldd	r24, Y+1	; 0x01
     fa4:	80 32       	cpi	r24, 0x20	; 32
     fa6:	40 f5       	brcc	.+80     	; 0xff8 <ADC_voidGetDigigtalValue+0x70>
		//CHANNEL
		ADMUX_REG &=0b11100000;
     fa8:	a7 e2       	ldi	r26, 0x27	; 39
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e7 e2       	ldi	r30, 0x27	; 39
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	80 7e       	andi	r24, 0xE0	; 224
     fb4:	8c 93       	st	X, r24
		ADMUX_REG |=copy_u8ChannelId;
     fb6:	a7 e2       	ldi	r26, 0x27	; 39
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	e7 e2       	ldi	r30, 0x27	; 39
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	90 81       	ld	r25, Z
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	89 2b       	or	r24, r25
     fc4:	8c 93       	st	X, r24

		//START CONVERSION
		SET_BIT(ADCSRA_REG,ADSC);
     fc6:	a6 e2       	ldi	r26, 0x26	; 38
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e6 e2       	ldi	r30, 0x26	; 38
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	80 64       	ori	r24, 0x40	; 64
     fd2:	8c 93       	st	X, r24

		//BUSY WAIT FOR ADC FLAG
		while(GET_BIT(ADCSRA_REG,ADIF) == 0);
     fd4:	e6 e2       	ldi	r30, 0x26	; 38
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z

		//CLR FLAG
		SET_BIT(ADCSRA_REG,ADIF);
     fda:	a6 e2       	ldi	r26, 0x26	; 38
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e6 e2       	ldi	r30, 0x26	; 38
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	80 61       	ori	r24, 0x10	; 16
     fe6:	8c 93       	st	X, r24

		//pass out adc data
		*copy_pu16DigitalValue=ADC_REG;
     fe8:	e4 e2       	ldi	r30, 0x24	; 36
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	91 81       	ldd	r25, Z+1	; 0x01
     ff0:	ea 81       	ldd	r30, Y+2	; 0x02
     ff2:	fb 81       	ldd	r31, Y+3	; 0x03
     ff4:	91 83       	std	Z+1, r25	; 0x01
     ff6:	80 83       	st	Z, r24
	}
	else{
		//return error
	}

}
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	0f 90       	pop	r0
    1000:	cf 91       	pop	r28
    1002:	df 91       	pop	r29
    1004:	08 95       	ret

00001006 <DCM_voidInit>:
#include "TIMER0_interface.h"
#include "DCM_interface.h"
#include "DCM_config.h"


void DCM_voidInit(u8 copy_u8MotorId){
    1006:	df 93       	push	r29
    1008:	cf 93       	push	r28
    100a:	00 d0       	rcall	.+0      	; 0x100c <DCM_voidInit+0x6>
    100c:	0f 92       	push	r0
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
    1012:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8MotorId)
    1014:	89 81       	ldd	r24, Y+1	; 0x01
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	3b 83       	std	Y+3, r19	; 0x03
    101c:	2a 83       	std	Y+2, r18	; 0x02
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	9b 81       	ldd	r25, Y+3	; 0x03
    1022:	00 97       	sbiw	r24, 0x00	; 0
    1024:	31 f0       	breq	.+12     	; 0x1032 <DCM_voidInit+0x2c>
    1026:	2a 81       	ldd	r18, Y+2	; 0x02
    1028:	3b 81       	ldd	r19, Y+3	; 0x03
    102a:	21 30       	cpi	r18, 0x01	; 1
    102c:	31 05       	cpc	r19, r1
    102e:	89 f0       	breq	.+34     	; 0x1052 <DCM_voidInit+0x4c>
    1030:	1f c0       	rjmp	.+62     	; 0x1070 <DCM_voidInit+0x6a>
	{
	case DCM_MOTORA:
		DIO_voidSetPinDirection(DCM_MOTOR_A_PORT_IN1,DCM_MOTOR_A_PIN_IN1,DIO_PIN_OUTPUT);
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	60 e0       	ldi	r22, 0x00	; 0
    1036:	41 e0       	ldi	r20, 0x01	; 1
    1038:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(DCM_MOTOR_A_PORT_IN2,DCM_MOTOR_A_PIN_IN2,DIO_PIN_OUTPUT);
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	61 e0       	ldi	r22, 0x01	; 1
    1040:	41 e0       	ldi	r20, 0x01	; 1
    1042:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(DCM_MOTOR_A_PORT_EN1,DCM_MOTOR_A_PORT_EN1,DIO_PIN_OUTPUT);
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	61 e0       	ldi	r22, 0x01	; 1
    104a:	41 e0       	ldi	r20, 0x01	; 1
    104c:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>
    1050:	0f c0       	rjmp	.+30     	; 0x1070 <DCM_voidInit+0x6a>
		break;
	case DCM_MOTORB:
		DIO_voidSetPinDirection(DCM_MOTOR_B_PORT_IN3,DCM_MOTOR_B_PIN_IN3,DIO_PIN_OUTPUT);
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	63 e0       	ldi	r22, 0x03	; 3
    1056:	41 e0       	ldi	r20, 0x01	; 1
    1058:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(DCM_MOTOR_B_PORT_IN4,DCM_MOTOR_B_PIN_IN4,DIO_PIN_OUTPUT);
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	64 e0       	ldi	r22, 0x04	; 4
    1060:	41 e0       	ldi	r20, 0x01	; 1
    1062:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(DCM_MOTOR_B_PORT_EN2,DCM_MOTOR_B_PORT_EN2,DIO_PIN_OUTPUT);
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	60 e0       	ldi	r22, 0x00	; 0
    106a:	41 e0       	ldi	r20, 0x01	; 1
    106c:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>
		break;
	}
}
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	cf 91       	pop	r28
    1078:	df 91       	pop	r29
    107a:	08 95       	ret

0000107c <DCM_voidOn>:

void DCM_voidOn(u8 copy_u8MotorId,u8 copy_u8MotorDirection){
    107c:	df 93       	push	r29
    107e:	cf 93       	push	r28
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
    1084:	28 97       	sbiw	r28, 0x08	; 8
    1086:	0f b6       	in	r0, 0x3f	; 63
    1088:	f8 94       	cli
    108a:	de bf       	out	0x3e, r29	; 62
    108c:	0f be       	out	0x3f, r0	; 63
    108e:	cd bf       	out	0x3d, r28	; 61
    1090:	89 83       	std	Y+1, r24	; 0x01
    1092:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8MotorId)
    1094:	89 81       	ldd	r24, Y+1	; 0x01
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	38 87       	std	Y+8, r19	; 0x08
    109c:	2f 83       	std	Y+7, r18	; 0x07
    109e:	8f 81       	ldd	r24, Y+7	; 0x07
    10a0:	98 85       	ldd	r25, Y+8	; 0x08
    10a2:	00 97       	sbiw	r24, 0x00	; 0
    10a4:	31 f0       	breq	.+12     	; 0x10b2 <DCM_voidOn+0x36>
    10a6:	2f 81       	ldd	r18, Y+7	; 0x07
    10a8:	38 85       	ldd	r19, Y+8	; 0x08
    10aa:	21 30       	cpi	r18, 0x01	; 1
    10ac:	31 05       	cpc	r19, r1
    10ae:	31 f1       	breq	.+76     	; 0x10fc <DCM_voidOn+0x80>
    10b0:	49 c0       	rjmp	.+146    	; 0x1144 <DCM_voidOn+0xc8>
	{
	case DCM_MOTORA:

			switch(copy_u8MotorDirection){
    10b2:	8a 81       	ldd	r24, Y+2	; 0x02
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	3e 83       	std	Y+6, r19	; 0x06
    10ba:	2d 83       	std	Y+5, r18	; 0x05
    10bc:	8d 81       	ldd	r24, Y+5	; 0x05
    10be:	9e 81       	ldd	r25, Y+6	; 0x06
    10c0:	00 97       	sbiw	r24, 0x00	; 0
    10c2:	31 f0       	breq	.+12     	; 0x10d0 <DCM_voidOn+0x54>
    10c4:	2d 81       	ldd	r18, Y+5	; 0x05
    10c6:	3e 81       	ldd	r19, Y+6	; 0x06
    10c8:	21 30       	cpi	r18, 0x01	; 1
    10ca:	31 05       	cpc	r19, r1
    10cc:	61 f0       	breq	.+24     	; 0x10e6 <DCM_voidOn+0x6a>
    10ce:	3a c0       	rjmp	.+116    	; 0x1144 <DCM_voidOn+0xc8>
			DIO_voidSetPinValue(DCM_MOTOR_A_PORT_EN1,DCM_MOTOR_A_PORT_EN1,DIO_PIN_HIGH);
				case DCM_ROTATE_CLOCKWISE:
					DIO_voidSetPinValue(DCM_MOTOR_A_PORT_IN1,DCM_MOTOR_A_PIN_IN1,DIO_PIN_HIGH);
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	60 e0       	ldi	r22, 0x00	; 0
    10d4:	41 e0       	ldi	r20, 0x01	; 1
    10d6:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
					DIO_voidSetPinValue(DCM_MOTOR_A_PORT_IN2,DCM_MOTOR_A_PIN_IN2,DIO_PIN_LOW);
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	61 e0       	ldi	r22, 0x01	; 1
    10de:	40 e0       	ldi	r20, 0x00	; 0
    10e0:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
    10e4:	2f c0       	rjmp	.+94     	; 0x1144 <DCM_voidOn+0xc8>
					break;
				case DCM_ROTATE_COUNTERCLOCKWISE:
					DIO_voidSetPinValue(DCM_MOTOR_A_PORT_IN1,DCM_MOTOR_A_PIN_IN1,DIO_PIN_LOW);
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	60 e0       	ldi	r22, 0x00	; 0
    10ea:	40 e0       	ldi	r20, 0x00	; 0
    10ec:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
					DIO_voidSetPinValue(DCM_MOTOR_A_PORT_IN2,DCM_MOTOR_A_PIN_IN2,DIO_PIN_HIGH);
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	61 e0       	ldi	r22, 0x01	; 1
    10f4:	41 e0       	ldi	r20, 0x01	; 1
    10f6:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
    10fa:	24 c0       	rjmp	.+72     	; 0x1144 <DCM_voidOn+0xc8>

			break;

	case DCM_MOTORB:

			switch(copy_u8MotorDirection){
    10fc:	8a 81       	ldd	r24, Y+2	; 0x02
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	3c 83       	std	Y+4, r19	; 0x04
    1104:	2b 83       	std	Y+3, r18	; 0x03
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	9c 81       	ldd	r25, Y+4	; 0x04
    110a:	00 97       	sbiw	r24, 0x00	; 0
    110c:	31 f0       	breq	.+12     	; 0x111a <DCM_voidOn+0x9e>
    110e:	2b 81       	ldd	r18, Y+3	; 0x03
    1110:	3c 81       	ldd	r19, Y+4	; 0x04
    1112:	21 30       	cpi	r18, 0x01	; 1
    1114:	31 05       	cpc	r19, r1
    1116:	61 f0       	breq	.+24     	; 0x1130 <DCM_voidOn+0xb4>
    1118:	15 c0       	rjmp	.+42     	; 0x1144 <DCM_voidOn+0xc8>
			DIO_voidSetPinValue(DCM_MOTOR_B_PORT_EN2,DCM_MOTOR_B_PORT_EN2,DIO_PIN_HIGH);
				case DCM_ROTATE_CLOCKWISE:
					DIO_voidSetPinValue(DCM_MOTOR_B_PORT_IN3,DCM_MOTOR_B_PIN_IN3,DIO_PIN_HIGH);
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	63 e0       	ldi	r22, 0x03	; 3
    111e:	41 e0       	ldi	r20, 0x01	; 1
    1120:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
					DIO_voidSetPinValue(DCM_MOTOR_B_PORT_IN4,DCM_MOTOR_B_PIN_IN4,DIO_PIN_LOW);
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	64 e0       	ldi	r22, 0x04	; 4
    1128:	40 e0       	ldi	r20, 0x00	; 0
    112a:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
    112e:	0a c0       	rjmp	.+20     	; 0x1144 <DCM_voidOn+0xc8>
					break;
				case DCM_ROTATE_COUNTERCLOCKWISE:
					DIO_voidSetPinValue(DCM_MOTOR_B_PORT_IN3,DCM_MOTOR_B_PIN_IN3,DIO_PIN_LOW);
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	63 e0       	ldi	r22, 0x03	; 3
    1134:	40 e0       	ldi	r20, 0x00	; 0
    1136:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
					DIO_voidSetPinValue(DCM_MOTOR_B_PORT_IN4,DCM_MOTOR_B_PIN_IN4,DIO_PIN_HIGH);
    113a:	80 e0       	ldi	r24, 0x00	; 0
    113c:	64 e0       	ldi	r22, 0x04	; 4
    113e:	41 e0       	ldi	r20, 0x01	; 1
    1140:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
				}

				break;

	}
}
    1144:	28 96       	adiw	r28, 0x08	; 8
    1146:	0f b6       	in	r0, 0x3f	; 63
    1148:	f8 94       	cli
    114a:	de bf       	out	0x3e, r29	; 62
    114c:	0f be       	out	0x3f, r0	; 63
    114e:	cd bf       	out	0x3d, r28	; 61
    1150:	cf 91       	pop	r28
    1152:	df 91       	pop	r29
    1154:	08 95       	ret

00001156 <DCM_voidOff>:

void DCM_voidOff(u8 copy_u8MotorId){
    1156:	df 93       	push	r29
    1158:	cf 93       	push	r28
    115a:	00 d0       	rcall	.+0      	; 0x115c <DCM_voidOff+0x6>
    115c:	0f 92       	push	r0
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
    1162:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8MotorId)
    1164:	89 81       	ldd	r24, Y+1	; 0x01
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	3b 83       	std	Y+3, r19	; 0x03
    116c:	2a 83       	std	Y+2, r18	; 0x02
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	9b 81       	ldd	r25, Y+3	; 0x03
    1172:	00 97       	sbiw	r24, 0x00	; 0
    1174:	31 f0       	breq	.+12     	; 0x1182 <DCM_voidOff+0x2c>
    1176:	2a 81       	ldd	r18, Y+2	; 0x02
    1178:	3b 81       	ldd	r19, Y+3	; 0x03
    117a:	21 30       	cpi	r18, 0x01	; 1
    117c:	31 05       	cpc	r19, r1
    117e:	39 f0       	breq	.+14     	; 0x118e <DCM_voidOff+0x38>
    1180:	0b c0       	rjmp	.+22     	; 0x1198 <DCM_voidOff+0x42>
	{
	case DCM_MOTORA:
			DIO_voidSetPinValue(DCM_MOTOR_A_PORT_EN1,DCM_MOTOR_A_PORT_EN1,DIO_PIN_LOW);
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	61 e0       	ldi	r22, 0x01	; 1
    1186:	40 e0       	ldi	r20, 0x00	; 0
    1188:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
    118c:	05 c0       	rjmp	.+10     	; 0x1198 <DCM_voidOff+0x42>
			break;

	 case DCM_MOTORB:
			DIO_voidSetPinValue(DCM_MOTOR_B_PORT_EN2,DCM_MOTOR_B_PORT_EN2,DIO_PIN_LOW);
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	60 e0       	ldi	r22, 0x00	; 0
    1192:	40 e0       	ldi	r20, 0x00	; 0
    1194:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
			break;

	}
}
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	0f 90       	pop	r0
    119e:	cf 91       	pop	r28
    11a0:	df 91       	pop	r29
    11a2:	08 95       	ret

000011a4 <DCM_voidInitWithCtrlSpeed>:

void DCM_voidInitWithCtrlSpeed(u8 copy_u8MotorId){
    11a4:	df 93       	push	r29
    11a6:	cf 93       	push	r28
    11a8:	00 d0       	rcall	.+0      	; 0x11aa <DCM_voidInitWithCtrlSpeed+0x6>
    11aa:	0f 92       	push	r0
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
    11b0:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8MotorId)
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
    11b4:	28 2f       	mov	r18, r24
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	3b 83       	std	Y+3, r19	; 0x03
    11ba:	2a 83       	std	Y+2, r18	; 0x02
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	9b 81       	ldd	r25, Y+3	; 0x03
    11c0:	00 97       	sbiw	r24, 0x00	; 0
    11c2:	31 f0       	breq	.+12     	; 0x11d0 <DCM_voidInitWithCtrlSpeed+0x2c>
    11c4:	2a 81       	ldd	r18, Y+2	; 0x02
    11c6:	3b 81       	ldd	r19, Y+3	; 0x03
    11c8:	21 30       	cpi	r18, 0x01	; 1
    11ca:	31 05       	cpc	r19, r1
    11cc:	89 f0       	breq	.+34     	; 0x11f0 <DCM_voidInitWithCtrlSpeed+0x4c>
    11ce:	1f c0       	rjmp	.+62     	; 0x120e <DCM_voidInitWithCtrlSpeed+0x6a>
	{
	case DCM_MOTORA:
		DIO_voidSetPinDirection(DCM_MOTOR_A_PORT_IN1,DCM_MOTOR_A_PIN_IN1,DIO_PIN_OUTPUT);
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	60 e0       	ldi	r22, 0x00	; 0
    11d4:	41 e0       	ldi	r20, 0x01	; 1
    11d6:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(DCM_MOTOR_A_PORT_IN2,DCM_MOTOR_A_PIN_IN2,DIO_PIN_OUTPUT);
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	61 e0       	ldi	r22, 0x01	; 1
    11de:	41 e0       	ldi	r20, 0x01	; 1
    11e0:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(DCM_MOTOR_A_PORT_EN1,DCM_MOTOR_A_PORT_EN1,DIO_PIN_OUTPUT);
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	61 e0       	ldi	r22, 0x01	; 1
    11e8:	41 e0       	ldi	r20, 0x01	; 1
    11ea:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>
    11ee:	0f c0       	rjmp	.+30     	; 0x120e <DCM_voidInitWithCtrlSpeed+0x6a>
		break;
	case DCM_MOTORB:
		DIO_voidSetPinDirection(DCM_MOTOR_B_PORT_IN3,DCM_MOTOR_B_PIN_IN3,DIO_PIN_OUTPUT);
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	63 e0       	ldi	r22, 0x03	; 3
    11f4:	41 e0       	ldi	r20, 0x01	; 1
    11f6:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(DCM_MOTOR_B_PORT_IN4,DCM_MOTOR_B_PIN_IN4,DIO_PIN_OUTPUT);
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	64 e0       	ldi	r22, 0x04	; 4
    11fe:	41 e0       	ldi	r20, 0x01	; 1
    1200:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(DCM_MOTOR_B_PORT_EN2,DCM_MOTOR_B_PORT_EN2,DIO_PIN_OUTPUT);
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	60 e0       	ldi	r22, 0x00	; 0
    1208:	41 e0       	ldi	r20, 0x01	; 1
    120a:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>
		break;
	}
	DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN3,DIO_PIN_OUTPUT);
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	63 e0       	ldi	r22, 0x03	; 3
    1212:	41 e0       	ldi	r20, 0x01	; 1
    1214:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>
	TIMER0_voidInit();
    1218:	0e 94 40 1b 	call	0x3680	; 0x3680 <TIMER0_voidInit>
}
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	cf 91       	pop	r28
    1224:	df 91       	pop	r29
    1226:	08 95       	ret

00001228 <DCM_voidOnwithCtrlSpeed>:

void DCM_voidOnwithCtrlSpeed(u8 copy_u8MotorId,u8 copy_u8MotorDirection,u8 copy_u8MotorSpeed){
    1228:	df 93       	push	r29
    122a:	cf 93       	push	r28
    122c:	cd b7       	in	r28, 0x3d	; 61
    122e:	de b7       	in	r29, 0x3e	; 62
    1230:	29 97       	sbiw	r28, 0x09	; 9
    1232:	0f b6       	in	r0, 0x3f	; 63
    1234:	f8 94       	cli
    1236:	de bf       	out	0x3e, r29	; 62
    1238:	0f be       	out	0x3f, r0	; 63
    123a:	cd bf       	out	0x3d, r28	; 61
    123c:	89 83       	std	Y+1, r24	; 0x01
    123e:	6a 83       	std	Y+2, r22	; 0x02
    1240:	4b 83       	std	Y+3, r20	; 0x03
	 TIMER0_PWMGenerateChannel(copy_u8MotorSpeed);
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <TIMER0_PWMGenerateChannel>
	switch(copy_u8MotorId)
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	39 87       	std	Y+9, r19	; 0x09
    1250:	28 87       	std	Y+8, r18	; 0x08
    1252:	88 85       	ldd	r24, Y+8	; 0x08
    1254:	99 85       	ldd	r25, Y+9	; 0x09
    1256:	00 97       	sbiw	r24, 0x00	; 0
    1258:	31 f0       	breq	.+12     	; 0x1266 <DCM_voidOnwithCtrlSpeed+0x3e>
    125a:	28 85       	ldd	r18, Y+8	; 0x08
    125c:	39 85       	ldd	r19, Y+9	; 0x09
    125e:	21 30       	cpi	r18, 0x01	; 1
    1260:	31 05       	cpc	r19, r1
    1262:	31 f1       	breq	.+76     	; 0x12b0 <DCM_voidOnwithCtrlSpeed+0x88>
    1264:	49 c0       	rjmp	.+146    	; 0x12f8 <DCM_voidOnwithCtrlSpeed+0xd0>
	{
	case DCM_MOTORA:

			switch(copy_u8MotorDirection){
    1266:	8a 81       	ldd	r24, Y+2	; 0x02
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	3f 83       	std	Y+7, r19	; 0x07
    126e:	2e 83       	std	Y+6, r18	; 0x06
    1270:	8e 81       	ldd	r24, Y+6	; 0x06
    1272:	9f 81       	ldd	r25, Y+7	; 0x07
    1274:	00 97       	sbiw	r24, 0x00	; 0
    1276:	31 f0       	breq	.+12     	; 0x1284 <DCM_voidOnwithCtrlSpeed+0x5c>
    1278:	2e 81       	ldd	r18, Y+6	; 0x06
    127a:	3f 81       	ldd	r19, Y+7	; 0x07
    127c:	21 30       	cpi	r18, 0x01	; 1
    127e:	31 05       	cpc	r19, r1
    1280:	61 f0       	breq	.+24     	; 0x129a <DCM_voidOnwithCtrlSpeed+0x72>
    1282:	3a c0       	rjmp	.+116    	; 0x12f8 <DCM_voidOnwithCtrlSpeed+0xd0>

				case DCM_ROTATE_CLOCKWISE:
					DIO_voidSetPinValue(DCM_MOTOR_A_PORT_IN1,DCM_MOTOR_A_PIN_IN1,DIO_PIN_HIGH);
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	60 e0       	ldi	r22, 0x00	; 0
    1288:	41 e0       	ldi	r20, 0x01	; 1
    128a:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
					DIO_voidSetPinValue(DCM_MOTOR_A_PORT_IN2,DCM_MOTOR_A_PIN_IN2,DIO_PIN_LOW);
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	61 e0       	ldi	r22, 0x01	; 1
    1292:	40 e0       	ldi	r20, 0x00	; 0
    1294:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
    1298:	2f c0       	rjmp	.+94     	; 0x12f8 <DCM_voidOnwithCtrlSpeed+0xd0>
					break;
				case DCM_ROTATE_COUNTERCLOCKWISE:
					DIO_voidSetPinValue(DCM_MOTOR_A_PORT_IN1,DCM_MOTOR_A_PIN_IN1,DIO_PIN_LOW);
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	60 e0       	ldi	r22, 0x00	; 0
    129e:	40 e0       	ldi	r20, 0x00	; 0
    12a0:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
					DIO_voidSetPinValue(DCM_MOTOR_A_PORT_IN2,DCM_MOTOR_A_PIN_IN2,DIO_PIN_HIGH);
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	61 e0       	ldi	r22, 0x01	; 1
    12a8:	41 e0       	ldi	r20, 0x01	; 1
    12aa:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
    12ae:	24 c0       	rjmp	.+72     	; 0x12f8 <DCM_voidOnwithCtrlSpeed+0xd0>

			break;

	case DCM_MOTORB:

			switch(copy_u8MotorDirection){
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	3d 83       	std	Y+5, r19	; 0x05
    12b8:	2c 83       	std	Y+4, r18	; 0x04
    12ba:	8c 81       	ldd	r24, Y+4	; 0x04
    12bc:	9d 81       	ldd	r25, Y+5	; 0x05
    12be:	00 97       	sbiw	r24, 0x00	; 0
    12c0:	31 f0       	breq	.+12     	; 0x12ce <DCM_voidOnwithCtrlSpeed+0xa6>
    12c2:	2c 81       	ldd	r18, Y+4	; 0x04
    12c4:	3d 81       	ldd	r19, Y+5	; 0x05
    12c6:	21 30       	cpi	r18, 0x01	; 1
    12c8:	31 05       	cpc	r19, r1
    12ca:	61 f0       	breq	.+24     	; 0x12e4 <DCM_voidOnwithCtrlSpeed+0xbc>
    12cc:	15 c0       	rjmp	.+42     	; 0x12f8 <DCM_voidOnwithCtrlSpeed+0xd0>

				case DCM_ROTATE_CLOCKWISE:
					DIO_voidSetPinValue(DCM_MOTOR_B_PORT_IN3,DCM_MOTOR_B_PIN_IN3,DIO_PIN_HIGH);
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	63 e0       	ldi	r22, 0x03	; 3
    12d2:	41 e0       	ldi	r20, 0x01	; 1
    12d4:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
					DIO_voidSetPinValue(DCM_MOTOR_B_PORT_IN4,DCM_MOTOR_B_PIN_IN4,DIO_PIN_LOW);
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	64 e0       	ldi	r22, 0x04	; 4
    12dc:	40 e0       	ldi	r20, 0x00	; 0
    12de:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
    12e2:	0a c0       	rjmp	.+20     	; 0x12f8 <DCM_voidOnwithCtrlSpeed+0xd0>
					break;
				case DCM_ROTATE_COUNTERCLOCKWISE:
					DIO_voidSetPinValue(DCM_MOTOR_B_PORT_IN3,DCM_MOTOR_B_PIN_IN3,DIO_PIN_LOW);
    12e4:	80 e0       	ldi	r24, 0x00	; 0
    12e6:	63 e0       	ldi	r22, 0x03	; 3
    12e8:	40 e0       	ldi	r20, 0x00	; 0
    12ea:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
					DIO_voidSetPinValue(DCM_MOTOR_B_PORT_IN4,DCM_MOTOR_B_PIN_IN4,DIO_PIN_HIGH);
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    12f0:	64 e0       	ldi	r22, 0x04	; 4
    12f2:	41 e0       	ldi	r20, 0x01	; 1
    12f4:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
				}

				break;

	}
}
    12f8:	29 96       	adiw	r28, 0x09	; 9
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	f8 94       	cli
    12fe:	de bf       	out	0x3e, r29	; 62
    1300:	0f be       	out	0x3f, r0	; 63
    1302:	cd bf       	out	0x3d, r28	; 61
    1304:	cf 91       	pop	r28
    1306:	df 91       	pop	r29
    1308:	08 95       	ret

0000130a <DCM_voidOffwithCtrlSpeed>:

void DCM_voidOffwithCtrlSpeed(){
    130a:	df 93       	push	r29
    130c:	cf 93       	push	r28
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
TIMER0_voidStop();
    1312:	0e 94 b0 1b 	call	0x3760	; 0x3760 <TIMER0_voidStop>
}
    1316:	cf 91       	pop	r28
    1318:	df 91       	pop	r29
    131a:	08 95       	ret

0000131c <DIO_voidSetPinDirection>:
#include "DIO_interface.h"


//pin
void DIO_voidSetPinDirection(u8 copy_u8PortId,u8 copy_u8PinId,u8 copy_u8PinDirection)
{
    131c:	df 93       	push	r29
    131e:	cf 93       	push	r28
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
    1324:	2d 97       	sbiw	r28, 0x0d	; 13
    1326:	0f b6       	in	r0, 0x3f	; 63
    1328:	f8 94       	cli
    132a:	de bf       	out	0x3e, r29	; 62
    132c:	0f be       	out	0x3f, r0	; 63
    132e:	cd bf       	out	0x3d, r28	; 61
    1330:	89 83       	std	Y+1, r24	; 0x01
    1332:	6a 83       	std	Y+2, r22	; 0x02
    1334:	4b 83       	std	Y+3, r20	; 0x03
if(copy_u8PortId <=3 && copy_u8PinId<=7){
    1336:	89 81       	ldd	r24, Y+1	; 0x01
    1338:	84 30       	cpi	r24, 0x04	; 4
    133a:	08 f0       	brcs	.+2      	; 0x133e <DIO_voidSetPinDirection+0x22>
    133c:	05 c1       	rjmp	.+522    	; 0x1548 <DIO_voidSetPinDirection+0x22c>
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	88 30       	cpi	r24, 0x08	; 8
    1342:	08 f0       	brcs	.+2      	; 0x1346 <DIO_voidSetPinDirection+0x2a>
    1344:	01 c1       	rjmp	.+514    	; 0x1548 <DIO_voidSetPinDirection+0x22c>
	switch(copy_u8PortId)
    1346:	89 81       	ldd	r24, Y+1	; 0x01
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	3d 87       	std	Y+13, r19	; 0x0d
    134e:	2c 87       	std	Y+12, r18	; 0x0c
    1350:	8c 85       	ldd	r24, Y+12	; 0x0c
    1352:	9d 85       	ldd	r25, Y+13	; 0x0d
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	91 05       	cpc	r25, r1
    1358:	09 f4       	brne	.+2      	; 0x135c <DIO_voidSetPinDirection+0x40>
    135a:	4f c0       	rjmp	.+158    	; 0x13fa <DIO_voidSetPinDirection+0xde>
    135c:	2c 85       	ldd	r18, Y+12	; 0x0c
    135e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1360:	22 30       	cpi	r18, 0x02	; 2
    1362:	31 05       	cpc	r19, r1
    1364:	2c f4       	brge	.+10     	; 0x1370 <DIO_voidSetPinDirection+0x54>
    1366:	8c 85       	ldd	r24, Y+12	; 0x0c
    1368:	9d 85       	ldd	r25, Y+13	; 0x0d
    136a:	00 97       	sbiw	r24, 0x00	; 0
    136c:	71 f0       	breq	.+28     	; 0x138a <DIO_voidSetPinDirection+0x6e>
    136e:	ec c0       	rjmp	.+472    	; 0x1548 <DIO_voidSetPinDirection+0x22c>
    1370:	2c 85       	ldd	r18, Y+12	; 0x0c
    1372:	3d 85       	ldd	r19, Y+13	; 0x0d
    1374:	22 30       	cpi	r18, 0x02	; 2
    1376:	31 05       	cpc	r19, r1
    1378:	09 f4       	brne	.+2      	; 0x137c <DIO_voidSetPinDirection+0x60>
    137a:	77 c0       	rjmp	.+238    	; 0x146a <DIO_voidSetPinDirection+0x14e>
    137c:	8c 85       	ldd	r24, Y+12	; 0x0c
    137e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1380:	83 30       	cpi	r24, 0x03	; 3
    1382:	91 05       	cpc	r25, r1
    1384:	09 f4       	brne	.+2      	; 0x1388 <DIO_voidSetPinDirection+0x6c>
    1386:	a9 c0       	rjmp	.+338    	; 0x14da <DIO_voidSetPinDirection+0x1be>
    1388:	df c0       	rjmp	.+446    	; 0x1548 <DIO_voidSetPinDirection+0x22c>
	{
		case DIO_PORTA:
		switch(copy_u8PinDirection)
    138a:	8b 81       	ldd	r24, Y+3	; 0x03
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	3b 87       	std	Y+11, r19	; 0x0b
    1392:	2a 87       	std	Y+10, r18	; 0x0a
    1394:	8a 85       	ldd	r24, Y+10	; 0x0a
    1396:	9b 85       	ldd	r25, Y+11	; 0x0b
    1398:	00 97       	sbiw	r24, 0x00	; 0
    139a:	31 f0       	breq	.+12     	; 0x13a8 <DIO_voidSetPinDirection+0x8c>
    139c:	2a 85       	ldd	r18, Y+10	; 0x0a
    139e:	3b 85       	ldd	r19, Y+11	; 0x0b
    13a0:	21 30       	cpi	r18, 0x01	; 1
    13a2:	31 05       	cpc	r19, r1
    13a4:	b1 f0       	breq	.+44     	; 0x13d2 <DIO_voidSetPinDirection+0xb6>
    13a6:	d0 c0       	rjmp	.+416    	; 0x1548 <DIO_voidSetPinDirection+0x22c>
		{
			case DIO_PIN_INPUT:
				CLR_BIT(DDRA_REG,copy_u8PinId);
    13a8:	aa e3       	ldi	r26, 0x3A	; 58
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	ea e3       	ldi	r30, 0x3A	; 58
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	48 2f       	mov	r20, r24
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	02 2e       	mov	r0, r18
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <DIO_voidSetPinDirection+0xaa>
    13c2:	88 0f       	add	r24, r24
    13c4:	99 1f       	adc	r25, r25
    13c6:	0a 94       	dec	r0
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <DIO_voidSetPinDirection+0xa6>
    13ca:	80 95       	com	r24
    13cc:	84 23       	and	r24, r20
    13ce:	8c 93       	st	X, r24
    13d0:	bb c0       	rjmp	.+374    	; 0x1548 <DIO_voidSetPinDirection+0x22c>
				break;
			case DIO_PIN_OUTPUT:
				SET_BIT(DDRA_REG,copy_u8PinId);
    13d2:	aa e3       	ldi	r26, 0x3A	; 58
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	ea e3       	ldi	r30, 0x3A	; 58
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	48 2f       	mov	r20, r24
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	02 2e       	mov	r0, r18
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <DIO_voidSetPinDirection+0xd4>
    13ec:	88 0f       	add	r24, r24
    13ee:	99 1f       	adc	r25, r25
    13f0:	0a 94       	dec	r0
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <DIO_voidSetPinDirection+0xd0>
    13f4:	84 2b       	or	r24, r20
    13f6:	8c 93       	st	X, r24
    13f8:	a7 c0       	rjmp	.+334    	; 0x1548 <DIO_voidSetPinDirection+0x22c>
				break;
		}
		break;
		case DIO_PORTB:
		switch(copy_u8PinDirection)
    13fa:	8b 81       	ldd	r24, Y+3	; 0x03
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	39 87       	std	Y+9, r19	; 0x09
    1402:	28 87       	std	Y+8, r18	; 0x08
    1404:	88 85       	ldd	r24, Y+8	; 0x08
    1406:	99 85       	ldd	r25, Y+9	; 0x09
    1408:	00 97       	sbiw	r24, 0x00	; 0
    140a:	31 f0       	breq	.+12     	; 0x1418 <DIO_voidSetPinDirection+0xfc>
    140c:	28 85       	ldd	r18, Y+8	; 0x08
    140e:	39 85       	ldd	r19, Y+9	; 0x09
    1410:	21 30       	cpi	r18, 0x01	; 1
    1412:	31 05       	cpc	r19, r1
    1414:	b1 f0       	breq	.+44     	; 0x1442 <DIO_voidSetPinDirection+0x126>
    1416:	98 c0       	rjmp	.+304    	; 0x1548 <DIO_voidSetPinDirection+0x22c>
		{
			case DIO_PIN_INPUT:
				CLR_BIT(DDRB_REG,copy_u8PinId);
    1418:	a7 e3       	ldi	r26, 0x37	; 55
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e7 e3       	ldi	r30, 0x37	; 55
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	48 2f       	mov	r20, r24
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	02 2e       	mov	r0, r18
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <DIO_voidSetPinDirection+0x11a>
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	0a 94       	dec	r0
    1438:	e2 f7       	brpl	.-8      	; 0x1432 <DIO_voidSetPinDirection+0x116>
    143a:	80 95       	com	r24
    143c:	84 23       	and	r24, r20
    143e:	8c 93       	st	X, r24
    1440:	83 c0       	rjmp	.+262    	; 0x1548 <DIO_voidSetPinDirection+0x22c>
				break;
			case DIO_PIN_OUTPUT:
				SET_BIT(DDRB_REG,copy_u8PinId);
    1442:	a7 e3       	ldi	r26, 0x37	; 55
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	e7 e3       	ldi	r30, 0x37	; 55
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	48 2f       	mov	r20, r24
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	02 2e       	mov	r0, r18
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <DIO_voidSetPinDirection+0x144>
    145c:	88 0f       	add	r24, r24
    145e:	99 1f       	adc	r25, r25
    1460:	0a 94       	dec	r0
    1462:	e2 f7       	brpl	.-8      	; 0x145c <DIO_voidSetPinDirection+0x140>
    1464:	84 2b       	or	r24, r20
    1466:	8c 93       	st	X, r24
    1468:	6f c0       	rjmp	.+222    	; 0x1548 <DIO_voidSetPinDirection+0x22c>
				break;
		}
		break;
		case DIO_PORTC:
		switch(copy_u8PinDirection)
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	3f 83       	std	Y+7, r19	; 0x07
    1472:	2e 83       	std	Y+6, r18	; 0x06
    1474:	8e 81       	ldd	r24, Y+6	; 0x06
    1476:	9f 81       	ldd	r25, Y+7	; 0x07
    1478:	00 97       	sbiw	r24, 0x00	; 0
    147a:	31 f0       	breq	.+12     	; 0x1488 <DIO_voidSetPinDirection+0x16c>
    147c:	2e 81       	ldd	r18, Y+6	; 0x06
    147e:	3f 81       	ldd	r19, Y+7	; 0x07
    1480:	21 30       	cpi	r18, 0x01	; 1
    1482:	31 05       	cpc	r19, r1
    1484:	b1 f0       	breq	.+44     	; 0x14b2 <DIO_voidSetPinDirection+0x196>
    1486:	60 c0       	rjmp	.+192    	; 0x1548 <DIO_voidSetPinDirection+0x22c>
		{
			case DIO_PIN_INPUT:
				CLR_BIT(DDRC_REG,copy_u8PinId);
    1488:	a4 e3       	ldi	r26, 0x34	; 52
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	e4 e3       	ldi	r30, 0x34	; 52
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	48 2f       	mov	r20, r24
    1494:	8a 81       	ldd	r24, Y+2	; 0x02
    1496:	28 2f       	mov	r18, r24
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	02 2e       	mov	r0, r18
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <DIO_voidSetPinDirection+0x18a>
    14a2:	88 0f       	add	r24, r24
    14a4:	99 1f       	adc	r25, r25
    14a6:	0a 94       	dec	r0
    14a8:	e2 f7       	brpl	.-8      	; 0x14a2 <DIO_voidSetPinDirection+0x186>
    14aa:	80 95       	com	r24
    14ac:	84 23       	and	r24, r20
    14ae:	8c 93       	st	X, r24
    14b0:	4b c0       	rjmp	.+150    	; 0x1548 <DIO_voidSetPinDirection+0x22c>
				break;
			case DIO_PIN_OUTPUT:
				SET_BIT(DDRC_REG,copy_u8PinId);
    14b2:	a4 e3       	ldi	r26, 0x34	; 52
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	e4 e3       	ldi	r30, 0x34	; 52
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	48 2f       	mov	r20, r24
    14be:	8a 81       	ldd	r24, Y+2	; 0x02
    14c0:	28 2f       	mov	r18, r24
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	02 2e       	mov	r0, r18
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <DIO_voidSetPinDirection+0x1b4>
    14cc:	88 0f       	add	r24, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	0a 94       	dec	r0
    14d2:	e2 f7       	brpl	.-8      	; 0x14cc <DIO_voidSetPinDirection+0x1b0>
    14d4:	84 2b       	or	r24, r20
    14d6:	8c 93       	st	X, r24
    14d8:	37 c0       	rjmp	.+110    	; 0x1548 <DIO_voidSetPinDirection+0x22c>
				break;
		}
		break;
		case DIO_PORTD:
		switch(copy_u8PinDirection)
    14da:	8b 81       	ldd	r24, Y+3	; 0x03
    14dc:	28 2f       	mov	r18, r24
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	3d 83       	std	Y+5, r19	; 0x05
    14e2:	2c 83       	std	Y+4, r18	; 0x04
    14e4:	8c 81       	ldd	r24, Y+4	; 0x04
    14e6:	9d 81       	ldd	r25, Y+5	; 0x05
    14e8:	00 97       	sbiw	r24, 0x00	; 0
    14ea:	31 f0       	breq	.+12     	; 0x14f8 <DIO_voidSetPinDirection+0x1dc>
    14ec:	2c 81       	ldd	r18, Y+4	; 0x04
    14ee:	3d 81       	ldd	r19, Y+5	; 0x05
    14f0:	21 30       	cpi	r18, 0x01	; 1
    14f2:	31 05       	cpc	r19, r1
    14f4:	b1 f0       	breq	.+44     	; 0x1522 <DIO_voidSetPinDirection+0x206>
    14f6:	28 c0       	rjmp	.+80     	; 0x1548 <DIO_voidSetPinDirection+0x22c>
		{
			case DIO_PIN_INPUT:
				CLR_BIT(DDRD_REG,copy_u8PinId);
    14f8:	a1 e3       	ldi	r26, 0x31	; 49
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	e1 e3       	ldi	r30, 0x31	; 49
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	48 2f       	mov	r20, r24
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	28 2f       	mov	r18, r24
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	02 2e       	mov	r0, r18
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <DIO_voidSetPinDirection+0x1fa>
    1512:	88 0f       	add	r24, r24
    1514:	99 1f       	adc	r25, r25
    1516:	0a 94       	dec	r0
    1518:	e2 f7       	brpl	.-8      	; 0x1512 <DIO_voidSetPinDirection+0x1f6>
    151a:	80 95       	com	r24
    151c:	84 23       	and	r24, r20
    151e:	8c 93       	st	X, r24
    1520:	13 c0       	rjmp	.+38     	; 0x1548 <DIO_voidSetPinDirection+0x22c>
				break;
			case DIO_PIN_OUTPUT:
				SET_BIT(DDRD_REG,copy_u8PinId);
    1522:	a1 e3       	ldi	r26, 0x31	; 49
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	e1 e3       	ldi	r30, 0x31	; 49
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	48 2f       	mov	r20, r24
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	02 2e       	mov	r0, r18
    153a:	02 c0       	rjmp	.+4      	; 0x1540 <DIO_voidSetPinDirection+0x224>
    153c:	88 0f       	add	r24, r24
    153e:	99 1f       	adc	r25, r25
    1540:	0a 94       	dec	r0
    1542:	e2 f7       	brpl	.-8      	; 0x153c <DIO_voidSetPinDirection+0x220>
    1544:	84 2b       	or	r24, r20
    1546:	8c 93       	st	X, r24
else
{
	//return error
}

}
    1548:	2d 96       	adiw	r28, 0x0d	; 13
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	f8 94       	cli
    154e:	de bf       	out	0x3e, r29	; 62
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	cd bf       	out	0x3d, r28	; 61
    1554:	cf 91       	pop	r28
    1556:	df 91       	pop	r29
    1558:	08 95       	ret

0000155a <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 copy_u8PortId,u8 copy_u8PinId,u8 copy_u8PinValue){
    155a:	df 93       	push	r29
    155c:	cf 93       	push	r28
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
    1562:	2d 97       	sbiw	r28, 0x0d	; 13
    1564:	0f b6       	in	r0, 0x3f	; 63
    1566:	f8 94       	cli
    1568:	de bf       	out	0x3e, r29	; 62
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	cd bf       	out	0x3d, r28	; 61
    156e:	89 83       	std	Y+1, r24	; 0x01
    1570:	6a 83       	std	Y+2, r22	; 0x02
    1572:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8PortId <=3 && copy_u8PinId<=7){
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	84 30       	cpi	r24, 0x04	; 4
    1578:	08 f0       	brcs	.+2      	; 0x157c <DIO_voidSetPinValue+0x22>
    157a:	05 c1       	rjmp	.+522    	; 0x1786 <DIO_voidSetPinValue+0x22c>
    157c:	8a 81       	ldd	r24, Y+2	; 0x02
    157e:	88 30       	cpi	r24, 0x08	; 8
    1580:	08 f0       	brcs	.+2      	; 0x1584 <DIO_voidSetPinValue+0x2a>
    1582:	01 c1       	rjmp	.+514    	; 0x1786 <DIO_voidSetPinValue+0x22c>
	switch(copy_u8PortId)
    1584:	89 81       	ldd	r24, Y+1	; 0x01
    1586:	28 2f       	mov	r18, r24
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	3d 87       	std	Y+13, r19	; 0x0d
    158c:	2c 87       	std	Y+12, r18	; 0x0c
    158e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1590:	9d 85       	ldd	r25, Y+13	; 0x0d
    1592:	81 30       	cpi	r24, 0x01	; 1
    1594:	91 05       	cpc	r25, r1
    1596:	09 f4       	brne	.+2      	; 0x159a <DIO_voidSetPinValue+0x40>
    1598:	4f c0       	rjmp	.+158    	; 0x1638 <DIO_voidSetPinValue+0xde>
    159a:	2c 85       	ldd	r18, Y+12	; 0x0c
    159c:	3d 85       	ldd	r19, Y+13	; 0x0d
    159e:	22 30       	cpi	r18, 0x02	; 2
    15a0:	31 05       	cpc	r19, r1
    15a2:	2c f4       	brge	.+10     	; 0x15ae <DIO_voidSetPinValue+0x54>
    15a4:	8c 85       	ldd	r24, Y+12	; 0x0c
    15a6:	9d 85       	ldd	r25, Y+13	; 0x0d
    15a8:	00 97       	sbiw	r24, 0x00	; 0
    15aa:	71 f0       	breq	.+28     	; 0x15c8 <DIO_voidSetPinValue+0x6e>
    15ac:	ec c0       	rjmp	.+472    	; 0x1786 <DIO_voidSetPinValue+0x22c>
    15ae:	2c 85       	ldd	r18, Y+12	; 0x0c
    15b0:	3d 85       	ldd	r19, Y+13	; 0x0d
    15b2:	22 30       	cpi	r18, 0x02	; 2
    15b4:	31 05       	cpc	r19, r1
    15b6:	09 f4       	brne	.+2      	; 0x15ba <DIO_voidSetPinValue+0x60>
    15b8:	77 c0       	rjmp	.+238    	; 0x16a8 <DIO_voidSetPinValue+0x14e>
    15ba:	8c 85       	ldd	r24, Y+12	; 0x0c
    15bc:	9d 85       	ldd	r25, Y+13	; 0x0d
    15be:	83 30       	cpi	r24, 0x03	; 3
    15c0:	91 05       	cpc	r25, r1
    15c2:	09 f4       	brne	.+2      	; 0x15c6 <DIO_voidSetPinValue+0x6c>
    15c4:	a9 c0       	rjmp	.+338    	; 0x1718 <DIO_voidSetPinValue+0x1be>
    15c6:	df c0       	rjmp	.+446    	; 0x1786 <DIO_voidSetPinValue+0x22c>
	{
		case DIO_PORTA:
		switch(copy_u8PinValue)
    15c8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ca:	28 2f       	mov	r18, r24
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	3b 87       	std	Y+11, r19	; 0x0b
    15d0:	2a 87       	std	Y+10, r18	; 0x0a
    15d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    15d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    15d6:	00 97       	sbiw	r24, 0x00	; 0
    15d8:	31 f0       	breq	.+12     	; 0x15e6 <DIO_voidSetPinValue+0x8c>
    15da:	2a 85       	ldd	r18, Y+10	; 0x0a
    15dc:	3b 85       	ldd	r19, Y+11	; 0x0b
    15de:	21 30       	cpi	r18, 0x01	; 1
    15e0:	31 05       	cpc	r19, r1
    15e2:	b1 f0       	breq	.+44     	; 0x1610 <DIO_voidSetPinValue+0xb6>
    15e4:	d0 c0       	rjmp	.+416    	; 0x1786 <DIO_voidSetPinValue+0x22c>
		{
			case DIO_PIN_LOW:
				CLR_BIT(PORTA_REG,copy_u8PinId);
    15e6:	ab e3       	ldi	r26, 0x3B	; 59
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	eb e3       	ldi	r30, 0x3B	; 59
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	48 2f       	mov	r20, r24
    15f2:	8a 81       	ldd	r24, Y+2	; 0x02
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	02 2e       	mov	r0, r18
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <DIO_voidSetPinValue+0xaa>
    1600:	88 0f       	add	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	0a 94       	dec	r0
    1606:	e2 f7       	brpl	.-8      	; 0x1600 <DIO_voidSetPinValue+0xa6>
    1608:	80 95       	com	r24
    160a:	84 23       	and	r24, r20
    160c:	8c 93       	st	X, r24
    160e:	bb c0       	rjmp	.+374    	; 0x1786 <DIO_voidSetPinValue+0x22c>
				break;
			case DIO_PIN_HIGH:
				SET_BIT(PORTA_REG,copy_u8PinId);
    1610:	ab e3       	ldi	r26, 0x3B	; 59
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	eb e3       	ldi	r30, 0x3B	; 59
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	48 2f       	mov	r20, r24
    161c:	8a 81       	ldd	r24, Y+2	; 0x02
    161e:	28 2f       	mov	r18, r24
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	02 2e       	mov	r0, r18
    1628:	02 c0       	rjmp	.+4      	; 0x162e <DIO_voidSetPinValue+0xd4>
    162a:	88 0f       	add	r24, r24
    162c:	99 1f       	adc	r25, r25
    162e:	0a 94       	dec	r0
    1630:	e2 f7       	brpl	.-8      	; 0x162a <DIO_voidSetPinValue+0xd0>
    1632:	84 2b       	or	r24, r20
    1634:	8c 93       	st	X, r24
    1636:	a7 c0       	rjmp	.+334    	; 0x1786 <DIO_voidSetPinValue+0x22c>
				break;
		}
		break;
		case DIO_PORTB:
		switch(copy_u8PinValue)
    1638:	8b 81       	ldd	r24, Y+3	; 0x03
    163a:	28 2f       	mov	r18, r24
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	39 87       	std	Y+9, r19	; 0x09
    1640:	28 87       	std	Y+8, r18	; 0x08
    1642:	88 85       	ldd	r24, Y+8	; 0x08
    1644:	99 85       	ldd	r25, Y+9	; 0x09
    1646:	00 97       	sbiw	r24, 0x00	; 0
    1648:	31 f0       	breq	.+12     	; 0x1656 <DIO_voidSetPinValue+0xfc>
    164a:	28 85       	ldd	r18, Y+8	; 0x08
    164c:	39 85       	ldd	r19, Y+9	; 0x09
    164e:	21 30       	cpi	r18, 0x01	; 1
    1650:	31 05       	cpc	r19, r1
    1652:	b1 f0       	breq	.+44     	; 0x1680 <DIO_voidSetPinValue+0x126>
    1654:	98 c0       	rjmp	.+304    	; 0x1786 <DIO_voidSetPinValue+0x22c>
		{
			case DIO_PIN_LOW:
				CLR_BIT(PORTB_REG,copy_u8PinId);
    1656:	a8 e3       	ldi	r26, 0x38	; 56
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	e8 e3       	ldi	r30, 0x38	; 56
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	48 2f       	mov	r20, r24
    1662:	8a 81       	ldd	r24, Y+2	; 0x02
    1664:	28 2f       	mov	r18, r24
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	02 2e       	mov	r0, r18
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <DIO_voidSetPinValue+0x11a>
    1670:	88 0f       	add	r24, r24
    1672:	99 1f       	adc	r25, r25
    1674:	0a 94       	dec	r0
    1676:	e2 f7       	brpl	.-8      	; 0x1670 <DIO_voidSetPinValue+0x116>
    1678:	80 95       	com	r24
    167a:	84 23       	and	r24, r20
    167c:	8c 93       	st	X, r24
    167e:	83 c0       	rjmp	.+262    	; 0x1786 <DIO_voidSetPinValue+0x22c>
				break;
			case DIO_PIN_HIGH:
				SET_BIT(PORTB_REG,copy_u8PinId);
    1680:	a8 e3       	ldi	r26, 0x38	; 56
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	e8 e3       	ldi	r30, 0x38	; 56
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	48 2f       	mov	r20, r24
    168c:	8a 81       	ldd	r24, Y+2	; 0x02
    168e:	28 2f       	mov	r18, r24
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	02 2e       	mov	r0, r18
    1698:	02 c0       	rjmp	.+4      	; 0x169e <DIO_voidSetPinValue+0x144>
    169a:	88 0f       	add	r24, r24
    169c:	99 1f       	adc	r25, r25
    169e:	0a 94       	dec	r0
    16a0:	e2 f7       	brpl	.-8      	; 0x169a <DIO_voidSetPinValue+0x140>
    16a2:	84 2b       	or	r24, r20
    16a4:	8c 93       	st	X, r24
    16a6:	6f c0       	rjmp	.+222    	; 0x1786 <DIO_voidSetPinValue+0x22c>
				break;
		}
		break;
		case DIO_PORTC:
		switch(copy_u8PinValue)
    16a8:	8b 81       	ldd	r24, Y+3	; 0x03
    16aa:	28 2f       	mov	r18, r24
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	3f 83       	std	Y+7, r19	; 0x07
    16b0:	2e 83       	std	Y+6, r18	; 0x06
    16b2:	8e 81       	ldd	r24, Y+6	; 0x06
    16b4:	9f 81       	ldd	r25, Y+7	; 0x07
    16b6:	00 97       	sbiw	r24, 0x00	; 0
    16b8:	31 f0       	breq	.+12     	; 0x16c6 <DIO_voidSetPinValue+0x16c>
    16ba:	2e 81       	ldd	r18, Y+6	; 0x06
    16bc:	3f 81       	ldd	r19, Y+7	; 0x07
    16be:	21 30       	cpi	r18, 0x01	; 1
    16c0:	31 05       	cpc	r19, r1
    16c2:	b1 f0       	breq	.+44     	; 0x16f0 <DIO_voidSetPinValue+0x196>
    16c4:	60 c0       	rjmp	.+192    	; 0x1786 <DIO_voidSetPinValue+0x22c>
		{
			case DIO_PIN_LOW:
				CLR_BIT(PORTC_REG,copy_u8PinId);
    16c6:	a5 e3       	ldi	r26, 0x35	; 53
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	e5 e3       	ldi	r30, 0x35	; 53
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	48 2f       	mov	r20, r24
    16d2:	8a 81       	ldd	r24, Y+2	; 0x02
    16d4:	28 2f       	mov	r18, r24
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	02 2e       	mov	r0, r18
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <DIO_voidSetPinValue+0x18a>
    16e0:	88 0f       	add	r24, r24
    16e2:	99 1f       	adc	r25, r25
    16e4:	0a 94       	dec	r0
    16e6:	e2 f7       	brpl	.-8      	; 0x16e0 <DIO_voidSetPinValue+0x186>
    16e8:	80 95       	com	r24
    16ea:	84 23       	and	r24, r20
    16ec:	8c 93       	st	X, r24
    16ee:	4b c0       	rjmp	.+150    	; 0x1786 <DIO_voidSetPinValue+0x22c>
				break;
			case DIO_PIN_HIGH:
				SET_BIT(PORTC_REG,copy_u8PinId);
    16f0:	a5 e3       	ldi	r26, 0x35	; 53
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	e5 e3       	ldi	r30, 0x35	; 53
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	48 2f       	mov	r20, r24
    16fc:	8a 81       	ldd	r24, Y+2	; 0x02
    16fe:	28 2f       	mov	r18, r24
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	02 2e       	mov	r0, r18
    1708:	02 c0       	rjmp	.+4      	; 0x170e <DIO_voidSetPinValue+0x1b4>
    170a:	88 0f       	add	r24, r24
    170c:	99 1f       	adc	r25, r25
    170e:	0a 94       	dec	r0
    1710:	e2 f7       	brpl	.-8      	; 0x170a <DIO_voidSetPinValue+0x1b0>
    1712:	84 2b       	or	r24, r20
    1714:	8c 93       	st	X, r24
    1716:	37 c0       	rjmp	.+110    	; 0x1786 <DIO_voidSetPinValue+0x22c>
				break;
		}
		break;
		case DIO_PORTD:
		switch(copy_u8PinValue)
    1718:	8b 81       	ldd	r24, Y+3	; 0x03
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	3d 83       	std	Y+5, r19	; 0x05
    1720:	2c 83       	std	Y+4, r18	; 0x04
    1722:	8c 81       	ldd	r24, Y+4	; 0x04
    1724:	9d 81       	ldd	r25, Y+5	; 0x05
    1726:	00 97       	sbiw	r24, 0x00	; 0
    1728:	31 f0       	breq	.+12     	; 0x1736 <DIO_voidSetPinValue+0x1dc>
    172a:	2c 81       	ldd	r18, Y+4	; 0x04
    172c:	3d 81       	ldd	r19, Y+5	; 0x05
    172e:	21 30       	cpi	r18, 0x01	; 1
    1730:	31 05       	cpc	r19, r1
    1732:	b1 f0       	breq	.+44     	; 0x1760 <DIO_voidSetPinValue+0x206>
    1734:	28 c0       	rjmp	.+80     	; 0x1786 <DIO_voidSetPinValue+0x22c>
		{
			case DIO_PIN_LOW:
				CLR_BIT(PORTD_REG,copy_u8PinId);
    1736:	a2 e3       	ldi	r26, 0x32	; 50
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	e2 e3       	ldi	r30, 0x32	; 50
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	48 2f       	mov	r20, r24
    1742:	8a 81       	ldd	r24, Y+2	; 0x02
    1744:	28 2f       	mov	r18, r24
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	02 2e       	mov	r0, r18
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <DIO_voidSetPinValue+0x1fa>
    1750:	88 0f       	add	r24, r24
    1752:	99 1f       	adc	r25, r25
    1754:	0a 94       	dec	r0
    1756:	e2 f7       	brpl	.-8      	; 0x1750 <DIO_voidSetPinValue+0x1f6>
    1758:	80 95       	com	r24
    175a:	84 23       	and	r24, r20
    175c:	8c 93       	st	X, r24
    175e:	13 c0       	rjmp	.+38     	; 0x1786 <DIO_voidSetPinValue+0x22c>
				break;
			case DIO_PIN_HIGH:
				SET_BIT(PORTD_REG,copy_u8PinId);
    1760:	a2 e3       	ldi	r26, 0x32	; 50
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	e2 e3       	ldi	r30, 0x32	; 50
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	48 2f       	mov	r20, r24
    176c:	8a 81       	ldd	r24, Y+2	; 0x02
    176e:	28 2f       	mov	r18, r24
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	02 2e       	mov	r0, r18
    1778:	02 c0       	rjmp	.+4      	; 0x177e <DIO_voidSetPinValue+0x224>
    177a:	88 0f       	add	r24, r24
    177c:	99 1f       	adc	r25, r25
    177e:	0a 94       	dec	r0
    1780:	e2 f7       	brpl	.-8      	; 0x177a <DIO_voidSetPinValue+0x220>
    1782:	84 2b       	or	r24, r20
    1784:	8c 93       	st	X, r24
}
else
{
	//return error
}
}
    1786:	2d 96       	adiw	r28, 0x0d	; 13
    1788:	0f b6       	in	r0, 0x3f	; 63
    178a:	f8 94       	cli
    178c:	de bf       	out	0x3e, r29	; 62
    178e:	0f be       	out	0x3f, r0	; 63
    1790:	cd bf       	out	0x3d, r28	; 61
    1792:	cf 91       	pop	r28
    1794:	df 91       	pop	r29
    1796:	08 95       	ret

00001798 <DIO_voidGetPinValue>:

void DIO_voidGetPinValue(u8 copy_u8PortId,u8 copy_u8PinId,u8* copy_pu8PinValue){
    1798:	df 93       	push	r29
    179a:	cf 93       	push	r28
    179c:	00 d0       	rcall	.+0      	; 0x179e <DIO_voidGetPinValue+0x6>
    179e:	00 d0       	rcall	.+0      	; 0x17a0 <DIO_voidGetPinValue+0x8>
    17a0:	00 d0       	rcall	.+0      	; 0x17a2 <DIO_voidGetPinValue+0xa>
    17a2:	cd b7       	in	r28, 0x3d	; 61
    17a4:	de b7       	in	r29, 0x3e	; 62
    17a6:	89 83       	std	Y+1, r24	; 0x01
    17a8:	6a 83       	std	Y+2, r22	; 0x02
    17aa:	5c 83       	std	Y+4, r21	; 0x04
    17ac:	4b 83       	std	Y+3, r20	; 0x03
if(copy_u8PortId <=3 && copy_u8PinId<=7 && copy_pu8PinValue!=NULL){
    17ae:	89 81       	ldd	r24, Y+1	; 0x01
    17b0:	84 30       	cpi	r24, 0x04	; 4
    17b2:	08 f0       	brcs	.+2      	; 0x17b6 <DIO_voidGetPinValue+0x1e>
    17b4:	79 c0       	rjmp	.+242    	; 0x18a8 <DIO_voidGetPinValue+0x110>
    17b6:	8a 81       	ldd	r24, Y+2	; 0x02
    17b8:	88 30       	cpi	r24, 0x08	; 8
    17ba:	08 f0       	brcs	.+2      	; 0x17be <DIO_voidGetPinValue+0x26>
    17bc:	75 c0       	rjmp	.+234    	; 0x18a8 <DIO_voidGetPinValue+0x110>
    17be:	8b 81       	ldd	r24, Y+3	; 0x03
    17c0:	9c 81       	ldd	r25, Y+4	; 0x04
    17c2:	00 97       	sbiw	r24, 0x00	; 0
    17c4:	09 f4       	brne	.+2      	; 0x17c8 <DIO_voidGetPinValue+0x30>
    17c6:	70 c0       	rjmp	.+224    	; 0x18a8 <DIO_voidGetPinValue+0x110>
	switch(copy_u8PortId)
    17c8:	89 81       	ldd	r24, Y+1	; 0x01
    17ca:	28 2f       	mov	r18, r24
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	3e 83       	std	Y+6, r19	; 0x06
    17d0:	2d 83       	std	Y+5, r18	; 0x05
    17d2:	4d 81       	ldd	r20, Y+5	; 0x05
    17d4:	5e 81       	ldd	r21, Y+6	; 0x06
    17d6:	41 30       	cpi	r20, 0x01	; 1
    17d8:	51 05       	cpc	r21, r1
    17da:	59 f1       	breq	.+86     	; 0x1832 <DIO_voidGetPinValue+0x9a>
    17dc:	8d 81       	ldd	r24, Y+5	; 0x05
    17de:	9e 81       	ldd	r25, Y+6	; 0x06
    17e0:	82 30       	cpi	r24, 0x02	; 2
    17e2:	91 05       	cpc	r25, r1
    17e4:	34 f4       	brge	.+12     	; 0x17f2 <DIO_voidGetPinValue+0x5a>
    17e6:	2d 81       	ldd	r18, Y+5	; 0x05
    17e8:	3e 81       	ldd	r19, Y+6	; 0x06
    17ea:	21 15       	cp	r18, r1
    17ec:	31 05       	cpc	r19, r1
    17ee:	69 f0       	breq	.+26     	; 0x180a <DIO_voidGetPinValue+0x72>
    17f0:	5b c0       	rjmp	.+182    	; 0x18a8 <DIO_voidGetPinValue+0x110>
    17f2:	4d 81       	ldd	r20, Y+5	; 0x05
    17f4:	5e 81       	ldd	r21, Y+6	; 0x06
    17f6:	42 30       	cpi	r20, 0x02	; 2
    17f8:	51 05       	cpc	r21, r1
    17fa:	79 f1       	breq	.+94     	; 0x185a <DIO_voidGetPinValue+0xc2>
    17fc:	8d 81       	ldd	r24, Y+5	; 0x05
    17fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1800:	83 30       	cpi	r24, 0x03	; 3
    1802:	91 05       	cpc	r25, r1
    1804:	09 f4       	brne	.+2      	; 0x1808 <DIO_voidGetPinValue+0x70>
    1806:	3d c0       	rjmp	.+122    	; 0x1882 <DIO_voidGetPinValue+0xea>
    1808:	4f c0       	rjmp	.+158    	; 0x18a8 <DIO_voidGetPinValue+0x110>
	{
		case DIO_PORTA:
			* copy_pu8PinValue=GET_BIT(PINA_REG,copy_u8PinId);
    180a:	e9 e3       	ldi	r30, 0x39	; 57
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	28 2f       	mov	r18, r24
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	8a 81       	ldd	r24, Y+2	; 0x02
    1816:	88 2f       	mov	r24, r24
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	a9 01       	movw	r20, r18
    181c:	02 c0       	rjmp	.+4      	; 0x1822 <DIO_voidGetPinValue+0x8a>
    181e:	55 95       	asr	r21
    1820:	47 95       	ror	r20
    1822:	8a 95       	dec	r24
    1824:	e2 f7       	brpl	.-8      	; 0x181e <DIO_voidGetPinValue+0x86>
    1826:	ca 01       	movw	r24, r20
    1828:	81 70       	andi	r24, 0x01	; 1
    182a:	eb 81       	ldd	r30, Y+3	; 0x03
    182c:	fc 81       	ldd	r31, Y+4	; 0x04
    182e:	80 83       	st	Z, r24
    1830:	3b c0       	rjmp	.+118    	; 0x18a8 <DIO_voidGetPinValue+0x110>
		break;
		case DIO_PORTB:
			* copy_pu8PinValue=GET_BIT(PINB_REG,copy_u8PinId);
    1832:	e6 e3       	ldi	r30, 0x36	; 54
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	28 2f       	mov	r18, r24
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	8a 81       	ldd	r24, Y+2	; 0x02
    183e:	88 2f       	mov	r24, r24
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	a9 01       	movw	r20, r18
    1844:	02 c0       	rjmp	.+4      	; 0x184a <DIO_voidGetPinValue+0xb2>
    1846:	55 95       	asr	r21
    1848:	47 95       	ror	r20
    184a:	8a 95       	dec	r24
    184c:	e2 f7       	brpl	.-8      	; 0x1846 <DIO_voidGetPinValue+0xae>
    184e:	ca 01       	movw	r24, r20
    1850:	81 70       	andi	r24, 0x01	; 1
    1852:	eb 81       	ldd	r30, Y+3	; 0x03
    1854:	fc 81       	ldd	r31, Y+4	; 0x04
    1856:	80 83       	st	Z, r24
    1858:	27 c0       	rjmp	.+78     	; 0x18a8 <DIO_voidGetPinValue+0x110>
		break;
		case DIO_PORTC:
			* copy_pu8PinValue=GET_BIT(PINC_REG,copy_u8PinId);
    185a:	e3 e3       	ldi	r30, 0x33	; 51
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	28 2f       	mov	r18, r24
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	8a 81       	ldd	r24, Y+2	; 0x02
    1866:	88 2f       	mov	r24, r24
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	a9 01       	movw	r20, r18
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <DIO_voidGetPinValue+0xda>
    186e:	55 95       	asr	r21
    1870:	47 95       	ror	r20
    1872:	8a 95       	dec	r24
    1874:	e2 f7       	brpl	.-8      	; 0x186e <DIO_voidGetPinValue+0xd6>
    1876:	ca 01       	movw	r24, r20
    1878:	81 70       	andi	r24, 0x01	; 1
    187a:	eb 81       	ldd	r30, Y+3	; 0x03
    187c:	fc 81       	ldd	r31, Y+4	; 0x04
    187e:	80 83       	st	Z, r24
    1880:	13 c0       	rjmp	.+38     	; 0x18a8 <DIO_voidGetPinValue+0x110>
		break;
		case DIO_PORTD:
			* copy_pu8PinValue=GET_BIT(PIND_REG,copy_u8PinId);
    1882:	e0 e3       	ldi	r30, 0x30	; 48
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	28 2f       	mov	r18, r24
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	8a 81       	ldd	r24, Y+2	; 0x02
    188e:	88 2f       	mov	r24, r24
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	a9 01       	movw	r20, r18
    1894:	02 c0       	rjmp	.+4      	; 0x189a <DIO_voidGetPinValue+0x102>
    1896:	55 95       	asr	r21
    1898:	47 95       	ror	r20
    189a:	8a 95       	dec	r24
    189c:	e2 f7       	brpl	.-8      	; 0x1896 <DIO_voidGetPinValue+0xfe>
    189e:	ca 01       	movw	r24, r20
    18a0:	81 70       	andi	r24, 0x01	; 1
    18a2:	eb 81       	ldd	r30, Y+3	; 0x03
    18a4:	fc 81       	ldd	r31, Y+4	; 0x04
    18a6:	80 83       	st	Z, r24
else
{
//return error
}

}
    18a8:	26 96       	adiw	r28, 0x06	; 6
    18aa:	0f b6       	in	r0, 0x3f	; 63
    18ac:	f8 94       	cli
    18ae:	de bf       	out	0x3e, r29	; 62
    18b0:	0f be       	out	0x3f, r0	; 63
    18b2:	cd bf       	out	0x3d, r28	; 61
    18b4:	cf 91       	pop	r28
    18b6:	df 91       	pop	r29
    18b8:	08 95       	ret

000018ba <DIO_voidTogglePinValue>:

void DIO_voidTogglePinValue(u8 copy_u8PortId,u8 copy_u8PinId){
    18ba:	df 93       	push	r29
    18bc:	cf 93       	push	r28
    18be:	00 d0       	rcall	.+0      	; 0x18c0 <DIO_voidTogglePinValue+0x6>
    18c0:	00 d0       	rcall	.+0      	; 0x18c2 <DIO_voidTogglePinValue+0x8>
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
    18c6:	89 83       	std	Y+1, r24	; 0x01
    18c8:	6a 83       	std	Y+2, r22	; 0x02
if(copy_u8PortId <=3 && copy_u8PinId<=7){
    18ca:	89 81       	ldd	r24, Y+1	; 0x01
    18cc:	84 30       	cpi	r24, 0x04	; 4
    18ce:	08 f0       	brcs	.+2      	; 0x18d2 <DIO_voidTogglePinValue+0x18>
    18d0:	72 c0       	rjmp	.+228    	; 0x19b6 <DIO_voidTogglePinValue+0xfc>
    18d2:	8a 81       	ldd	r24, Y+2	; 0x02
    18d4:	88 30       	cpi	r24, 0x08	; 8
    18d6:	08 f0       	brcs	.+2      	; 0x18da <DIO_voidTogglePinValue+0x20>
    18d8:	6e c0       	rjmp	.+220    	; 0x19b6 <DIO_voidTogglePinValue+0xfc>
	switch(copy_u8PortId)
    18da:	89 81       	ldd	r24, Y+1	; 0x01
    18dc:	28 2f       	mov	r18, r24
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	3c 83       	std	Y+4, r19	; 0x04
    18e2:	2b 83       	std	Y+3, r18	; 0x03
    18e4:	8b 81       	ldd	r24, Y+3	; 0x03
    18e6:	9c 81       	ldd	r25, Y+4	; 0x04
    18e8:	81 30       	cpi	r24, 0x01	; 1
    18ea:	91 05       	cpc	r25, r1
    18ec:	49 f1       	breq	.+82     	; 0x1940 <DIO_voidTogglePinValue+0x86>
    18ee:	2b 81       	ldd	r18, Y+3	; 0x03
    18f0:	3c 81       	ldd	r19, Y+4	; 0x04
    18f2:	22 30       	cpi	r18, 0x02	; 2
    18f4:	31 05       	cpc	r19, r1
    18f6:	2c f4       	brge	.+10     	; 0x1902 <DIO_voidTogglePinValue+0x48>
    18f8:	8b 81       	ldd	r24, Y+3	; 0x03
    18fa:	9c 81       	ldd	r25, Y+4	; 0x04
    18fc:	00 97       	sbiw	r24, 0x00	; 0
    18fe:	61 f0       	breq	.+24     	; 0x1918 <DIO_voidTogglePinValue+0x5e>
    1900:	5a c0       	rjmp	.+180    	; 0x19b6 <DIO_voidTogglePinValue+0xfc>
    1902:	2b 81       	ldd	r18, Y+3	; 0x03
    1904:	3c 81       	ldd	r19, Y+4	; 0x04
    1906:	22 30       	cpi	r18, 0x02	; 2
    1908:	31 05       	cpc	r19, r1
    190a:	71 f1       	breq	.+92     	; 0x1968 <DIO_voidTogglePinValue+0xae>
    190c:	8b 81       	ldd	r24, Y+3	; 0x03
    190e:	9c 81       	ldd	r25, Y+4	; 0x04
    1910:	83 30       	cpi	r24, 0x03	; 3
    1912:	91 05       	cpc	r25, r1
    1914:	e9 f1       	breq	.+122    	; 0x1990 <DIO_voidTogglePinValue+0xd6>
    1916:	4f c0       	rjmp	.+158    	; 0x19b6 <DIO_voidTogglePinValue+0xfc>
	{
		case DIO_PORTA:
			TOG_BIT(PORTA_REG,copy_u8PinId);
    1918:	ab e3       	ldi	r26, 0x3B	; 59
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	eb e3       	ldi	r30, 0x3B	; 59
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	48 2f       	mov	r20, r24
    1924:	8a 81       	ldd	r24, Y+2	; 0x02
    1926:	28 2f       	mov	r18, r24
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	02 2e       	mov	r0, r18
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <DIO_voidTogglePinValue+0x7c>
    1932:	88 0f       	add	r24, r24
    1934:	99 1f       	adc	r25, r25
    1936:	0a 94       	dec	r0
    1938:	e2 f7       	brpl	.-8      	; 0x1932 <DIO_voidTogglePinValue+0x78>
    193a:	84 27       	eor	r24, r20
    193c:	8c 93       	st	X, r24
    193e:	3b c0       	rjmp	.+118    	; 0x19b6 <DIO_voidTogglePinValue+0xfc>
		break;
		case DIO_PORTB:
			TOG_BIT(PORTB_REG,copy_u8PinId);
    1940:	a8 e3       	ldi	r26, 0x38	; 56
    1942:	b0 e0       	ldi	r27, 0x00	; 0
    1944:	e8 e3       	ldi	r30, 0x38	; 56
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	80 81       	ld	r24, Z
    194a:	48 2f       	mov	r20, r24
    194c:	8a 81       	ldd	r24, Y+2	; 0x02
    194e:	28 2f       	mov	r18, r24
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	02 2e       	mov	r0, r18
    1958:	02 c0       	rjmp	.+4      	; 0x195e <DIO_voidTogglePinValue+0xa4>
    195a:	88 0f       	add	r24, r24
    195c:	99 1f       	adc	r25, r25
    195e:	0a 94       	dec	r0
    1960:	e2 f7       	brpl	.-8      	; 0x195a <DIO_voidTogglePinValue+0xa0>
    1962:	84 27       	eor	r24, r20
    1964:	8c 93       	st	X, r24
    1966:	27 c0       	rjmp	.+78     	; 0x19b6 <DIO_voidTogglePinValue+0xfc>
		break;
		case DIO_PORTC:
			TOG_BIT(PORTC_REG,copy_u8PinId);
    1968:	a5 e3       	ldi	r26, 0x35	; 53
    196a:	b0 e0       	ldi	r27, 0x00	; 0
    196c:	e5 e3       	ldi	r30, 0x35	; 53
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	80 81       	ld	r24, Z
    1972:	48 2f       	mov	r20, r24
    1974:	8a 81       	ldd	r24, Y+2	; 0x02
    1976:	28 2f       	mov	r18, r24
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	02 2e       	mov	r0, r18
    1980:	02 c0       	rjmp	.+4      	; 0x1986 <DIO_voidTogglePinValue+0xcc>
    1982:	88 0f       	add	r24, r24
    1984:	99 1f       	adc	r25, r25
    1986:	0a 94       	dec	r0
    1988:	e2 f7       	brpl	.-8      	; 0x1982 <DIO_voidTogglePinValue+0xc8>
    198a:	84 27       	eor	r24, r20
    198c:	8c 93       	st	X, r24
    198e:	13 c0       	rjmp	.+38     	; 0x19b6 <DIO_voidTogglePinValue+0xfc>
		break;
		case DIO_PORTD:
			TOG_BIT(PORTD_REG,copy_u8PinId);
    1990:	a2 e3       	ldi	r26, 0x32	; 50
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	e2 e3       	ldi	r30, 0x32	; 50
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	48 2f       	mov	r20, r24
    199c:	8a 81       	ldd	r24, Y+2	; 0x02
    199e:	28 2f       	mov	r18, r24
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	02 2e       	mov	r0, r18
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <DIO_voidTogglePinValue+0xf4>
    19aa:	88 0f       	add	r24, r24
    19ac:	99 1f       	adc	r25, r25
    19ae:	0a 94       	dec	r0
    19b0:	e2 f7       	brpl	.-8      	; 0x19aa <DIO_voidTogglePinValue+0xf0>
    19b2:	84 27       	eor	r24, r20
    19b4:	8c 93       	st	X, r24
}
else
{
//return error
}
}
    19b6:	0f 90       	pop	r0
    19b8:	0f 90       	pop	r0
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	cf 91       	pop	r28
    19c0:	df 91       	pop	r29
    19c2:	08 95       	ret

000019c4 <DIO_voidSetPortDirection>:
//port
void DIO_voidSetPortDirection(u8 copy_u8PortId,u8 copy_u8PortDirection){
    19c4:	df 93       	push	r29
    19c6:	cf 93       	push	r28
    19c8:	00 d0       	rcall	.+0      	; 0x19ca <DIO_voidSetPortDirection+0x6>
    19ca:	00 d0       	rcall	.+0      	; 0x19cc <DIO_voidSetPortDirection+0x8>
    19cc:	cd b7       	in	r28, 0x3d	; 61
    19ce:	de b7       	in	r29, 0x3e	; 62
    19d0:	89 83       	std	Y+1, r24	; 0x01
    19d2:	6a 83       	std	Y+2, r22	; 0x02
if(copy_u8PortId <=3){
    19d4:	89 81       	ldd	r24, Y+1	; 0x01
    19d6:	84 30       	cpi	r24, 0x04	; 4
    19d8:	90 f5       	brcc	.+100    	; 0x1a3e <DIO_voidSetPortDirection+0x7a>
	switch(copy_u8PortId){
    19da:	89 81       	ldd	r24, Y+1	; 0x01
    19dc:	28 2f       	mov	r18, r24
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	3c 83       	std	Y+4, r19	; 0x04
    19e2:	2b 83       	std	Y+3, r18	; 0x03
    19e4:	8b 81       	ldd	r24, Y+3	; 0x03
    19e6:	9c 81       	ldd	r25, Y+4	; 0x04
    19e8:	81 30       	cpi	r24, 0x01	; 1
    19ea:	91 05       	cpc	r25, r1
    19ec:	d1 f0       	breq	.+52     	; 0x1a22 <DIO_voidSetPortDirection+0x5e>
    19ee:	2b 81       	ldd	r18, Y+3	; 0x03
    19f0:	3c 81       	ldd	r19, Y+4	; 0x04
    19f2:	22 30       	cpi	r18, 0x02	; 2
    19f4:	31 05       	cpc	r19, r1
    19f6:	2c f4       	brge	.+10     	; 0x1a02 <DIO_voidSetPortDirection+0x3e>
    19f8:	8b 81       	ldd	r24, Y+3	; 0x03
    19fa:	9c 81       	ldd	r25, Y+4	; 0x04
    19fc:	00 97       	sbiw	r24, 0x00	; 0
    19fe:	61 f0       	breq	.+24     	; 0x1a18 <DIO_voidSetPortDirection+0x54>
    1a00:	1e c0       	rjmp	.+60     	; 0x1a3e <DIO_voidSetPortDirection+0x7a>
    1a02:	2b 81       	ldd	r18, Y+3	; 0x03
    1a04:	3c 81       	ldd	r19, Y+4	; 0x04
    1a06:	22 30       	cpi	r18, 0x02	; 2
    1a08:	31 05       	cpc	r19, r1
    1a0a:	81 f0       	breq	.+32     	; 0x1a2c <DIO_voidSetPortDirection+0x68>
    1a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a10:	83 30       	cpi	r24, 0x03	; 3
    1a12:	91 05       	cpc	r25, r1
    1a14:	81 f0       	breq	.+32     	; 0x1a36 <DIO_voidSetPortDirection+0x72>
    1a16:	13 c0       	rjmp	.+38     	; 0x1a3e <DIO_voidSetPortDirection+0x7a>
	case DIO_PORTA:
		DDRA_REG=copy_u8PortDirection;
    1a18:	ea e3       	ldi	r30, 0x3A	; 58
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1e:	80 83       	st	Z, r24
    1a20:	0e c0       	rjmp	.+28     	; 0x1a3e <DIO_voidSetPortDirection+0x7a>
	break;
	case DIO_PORTB:
		DDRB_REG=copy_u8PortDirection;
    1a22:	e7 e3       	ldi	r30, 0x37	; 55
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	8a 81       	ldd	r24, Y+2	; 0x02
    1a28:	80 83       	st	Z, r24
    1a2a:	09 c0       	rjmp	.+18     	; 0x1a3e <DIO_voidSetPortDirection+0x7a>
	break;
	case DIO_PORTC:
		DDRC_REG=copy_u8PortDirection;
    1a2c:	e4 e3       	ldi	r30, 0x34	; 52
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	8a 81       	ldd	r24, Y+2	; 0x02
    1a32:	80 83       	st	Z, r24
    1a34:	04 c0       	rjmp	.+8      	; 0x1a3e <DIO_voidSetPortDirection+0x7a>
	break;
	break;
	case DIO_PORTD:
		DDRD_REG=copy_u8PortDirection;
    1a36:	e1 e3       	ldi	r30, 0x31	; 49
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3c:	80 83       	st	Z, r24
}
else
{
	//return false
}
}
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
    1a44:	0f 90       	pop	r0
    1a46:	cf 91       	pop	r28
    1a48:	df 91       	pop	r29
    1a4a:	08 95       	ret

00001a4c <DIO_voidSetPortValue>:
void DIO_voidSetPortValue(u8 copy_u8PortId,u8 copy_u8PortValue){
    1a4c:	df 93       	push	r29
    1a4e:	cf 93       	push	r28
    1a50:	00 d0       	rcall	.+0      	; 0x1a52 <DIO_voidSetPortValue+0x6>
    1a52:	00 d0       	rcall	.+0      	; 0x1a54 <DIO_voidSetPortValue+0x8>
    1a54:	cd b7       	in	r28, 0x3d	; 61
    1a56:	de b7       	in	r29, 0x3e	; 62
    1a58:	89 83       	std	Y+1, r24	; 0x01
    1a5a:	6a 83       	std	Y+2, r22	; 0x02
if(copy_u8PortId <=3){
    1a5c:	89 81       	ldd	r24, Y+1	; 0x01
    1a5e:	84 30       	cpi	r24, 0x04	; 4
    1a60:	90 f5       	brcc	.+100    	; 0x1ac6 <DIO_voidSetPortValue+0x7a>
	switch(copy_u8PortId){
    1a62:	89 81       	ldd	r24, Y+1	; 0x01
    1a64:	28 2f       	mov	r18, r24
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	3c 83       	std	Y+4, r19	; 0x04
    1a6a:	2b 83       	std	Y+3, r18	; 0x03
    1a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a70:	81 30       	cpi	r24, 0x01	; 1
    1a72:	91 05       	cpc	r25, r1
    1a74:	d1 f0       	breq	.+52     	; 0x1aaa <DIO_voidSetPortValue+0x5e>
    1a76:	2b 81       	ldd	r18, Y+3	; 0x03
    1a78:	3c 81       	ldd	r19, Y+4	; 0x04
    1a7a:	22 30       	cpi	r18, 0x02	; 2
    1a7c:	31 05       	cpc	r19, r1
    1a7e:	2c f4       	brge	.+10     	; 0x1a8a <DIO_voidSetPortValue+0x3e>
    1a80:	8b 81       	ldd	r24, Y+3	; 0x03
    1a82:	9c 81       	ldd	r25, Y+4	; 0x04
    1a84:	00 97       	sbiw	r24, 0x00	; 0
    1a86:	61 f0       	breq	.+24     	; 0x1aa0 <DIO_voidSetPortValue+0x54>
    1a88:	1e c0       	rjmp	.+60     	; 0x1ac6 <DIO_voidSetPortValue+0x7a>
    1a8a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a8c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a8e:	22 30       	cpi	r18, 0x02	; 2
    1a90:	31 05       	cpc	r19, r1
    1a92:	81 f0       	breq	.+32     	; 0x1ab4 <DIO_voidSetPortValue+0x68>
    1a94:	8b 81       	ldd	r24, Y+3	; 0x03
    1a96:	9c 81       	ldd	r25, Y+4	; 0x04
    1a98:	83 30       	cpi	r24, 0x03	; 3
    1a9a:	91 05       	cpc	r25, r1
    1a9c:	81 f0       	breq	.+32     	; 0x1abe <DIO_voidSetPortValue+0x72>
    1a9e:	13 c0       	rjmp	.+38     	; 0x1ac6 <DIO_voidSetPortValue+0x7a>
		case DIO_PORTA:
			PORTA_REG=copy_u8PortValue;
    1aa0:	eb e3       	ldi	r30, 0x3B	; 59
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa6:	80 83       	st	Z, r24
    1aa8:	0e c0       	rjmp	.+28     	; 0x1ac6 <DIO_voidSetPortValue+0x7a>
		break;
		case DIO_PORTB:
			PORTB_REG=copy_u8PortValue;
    1aaa:	e8 e3       	ldi	r30, 0x38	; 56
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab0:	80 83       	st	Z, r24
    1ab2:	09 c0       	rjmp	.+18     	; 0x1ac6 <DIO_voidSetPortValue+0x7a>
		break;
		case DIO_PORTC:
			PORTC_REG=copy_u8PortValue;
    1ab4:	e5 e3       	ldi	r30, 0x35	; 53
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aba:	80 83       	st	Z, r24
    1abc:	04 c0       	rjmp	.+8      	; 0x1ac6 <DIO_voidSetPortValue+0x7a>
		break;
		break;
		case DIO_PORTD:
			PORTD_REG=copy_u8PortValue;
    1abe:	e2 e3       	ldi	r30, 0x32	; 50
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac4:	80 83       	st	Z, r24
}
else
{
		//return false
}
}
    1ac6:	0f 90       	pop	r0
    1ac8:	0f 90       	pop	r0
    1aca:	0f 90       	pop	r0
    1acc:	0f 90       	pop	r0
    1ace:	cf 91       	pop	r28
    1ad0:	df 91       	pop	r29
    1ad2:	08 95       	ret

00001ad4 <DIO_voidGetPortValue>:
void DIO_voidGetPortValue(u8 copy_u8PortId,u8* copy_pu8PortValue){
    1ad4:	df 93       	push	r29
    1ad6:	cf 93       	push	r28
    1ad8:	00 d0       	rcall	.+0      	; 0x1ada <DIO_voidGetPortValue+0x6>
    1ada:	00 d0       	rcall	.+0      	; 0x1adc <DIO_voidGetPortValue+0x8>
    1adc:	0f 92       	push	r0
    1ade:	cd b7       	in	r28, 0x3d	; 61
    1ae0:	de b7       	in	r29, 0x3e	; 62
    1ae2:	89 83       	std	Y+1, r24	; 0x01
    1ae4:	7b 83       	std	Y+3, r23	; 0x03
    1ae6:	6a 83       	std	Y+2, r22	; 0x02
if(copy_u8PortId <=3){
    1ae8:	89 81       	ldd	r24, Y+1	; 0x01
    1aea:	84 30       	cpi	r24, 0x04	; 4
    1aec:	d0 f5       	brcc	.+116    	; 0x1b62 <DIO_voidGetPortValue+0x8e>
		switch(copy_u8PortId){
    1aee:	89 81       	ldd	r24, Y+1	; 0x01
    1af0:	28 2f       	mov	r18, r24
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	3d 83       	std	Y+5, r19	; 0x05
    1af6:	2c 83       	std	Y+4, r18	; 0x04
    1af8:	8c 81       	ldd	r24, Y+4	; 0x04
    1afa:	9d 81       	ldd	r25, Y+5	; 0x05
    1afc:	81 30       	cpi	r24, 0x01	; 1
    1afe:	91 05       	cpc	r25, r1
    1b00:	e1 f0       	breq	.+56     	; 0x1b3a <DIO_voidGetPortValue+0x66>
    1b02:	2c 81       	ldd	r18, Y+4	; 0x04
    1b04:	3d 81       	ldd	r19, Y+5	; 0x05
    1b06:	22 30       	cpi	r18, 0x02	; 2
    1b08:	31 05       	cpc	r19, r1
    1b0a:	2c f4       	brge	.+10     	; 0x1b16 <DIO_voidGetPortValue+0x42>
    1b0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b0e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b10:	00 97       	sbiw	r24, 0x00	; 0
    1b12:	61 f0       	breq	.+24     	; 0x1b2c <DIO_voidGetPortValue+0x58>
    1b14:	26 c0       	rjmp	.+76     	; 0x1b62 <DIO_voidGetPortValue+0x8e>
    1b16:	2c 81       	ldd	r18, Y+4	; 0x04
    1b18:	3d 81       	ldd	r19, Y+5	; 0x05
    1b1a:	22 30       	cpi	r18, 0x02	; 2
    1b1c:	31 05       	cpc	r19, r1
    1b1e:	a1 f0       	breq	.+40     	; 0x1b48 <DIO_voidGetPortValue+0x74>
    1b20:	8c 81       	ldd	r24, Y+4	; 0x04
    1b22:	9d 81       	ldd	r25, Y+5	; 0x05
    1b24:	83 30       	cpi	r24, 0x03	; 3
    1b26:	91 05       	cpc	r25, r1
    1b28:	b1 f0       	breq	.+44     	; 0x1b56 <DIO_voidGetPortValue+0x82>
    1b2a:	1b c0       	rjmp	.+54     	; 0x1b62 <DIO_voidGetPortValue+0x8e>
			case DIO_PORTA:
				*copy_pu8PortValue=PINA_REG;
    1b2c:	e9 e3       	ldi	r30, 0x39	; 57
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	ea 81       	ldd	r30, Y+2	; 0x02
    1b34:	fb 81       	ldd	r31, Y+3	; 0x03
    1b36:	80 83       	st	Z, r24
    1b38:	14 c0       	rjmp	.+40     	; 0x1b62 <DIO_voidGetPortValue+0x8e>
			break;
			case DIO_PORTB:
				*copy_pu8PortValue=PINB_REG;
    1b3a:	e6 e3       	ldi	r30, 0x36	; 54
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	ea 81       	ldd	r30, Y+2	; 0x02
    1b42:	fb 81       	ldd	r31, Y+3	; 0x03
    1b44:	80 83       	st	Z, r24
    1b46:	0d c0       	rjmp	.+26     	; 0x1b62 <DIO_voidGetPortValue+0x8e>

			break;
			case DIO_PORTC:
				*copy_pu8PortValue=PINC_REG;
    1b48:	e3 e3       	ldi	r30, 0x33	; 51
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	ea 81       	ldd	r30, Y+2	; 0x02
    1b50:	fb 81       	ldd	r31, Y+3	; 0x03
    1b52:	80 83       	st	Z, r24
    1b54:	06 c0       	rjmp	.+12     	; 0x1b62 <DIO_voidGetPortValue+0x8e>

			break;
			break;
			case DIO_PORTD:
				*copy_pu8PortValue=PIND_REG;
    1b56:	e0 e3       	ldi	r30, 0x30	; 48
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	80 81       	ld	r24, Z
    1b5c:	ea 81       	ldd	r30, Y+2	; 0x02
    1b5e:	fb 81       	ldd	r31, Y+3	; 0x03
    1b60:	80 83       	st	Z, r24
else
{
		//return false
}

}
    1b62:	0f 90       	pop	r0
    1b64:	0f 90       	pop	r0
    1b66:	0f 90       	pop	r0
    1b68:	0f 90       	pop	r0
    1b6a:	0f 90       	pop	r0
    1b6c:	cf 91       	pop	r28
    1b6e:	df 91       	pop	r29
    1b70:	08 95       	ret

00001b72 <DIO_voidTogglePortValue>:
void DIO_voidTogglePortValue(u8 copy_u8PortId){
    1b72:	df 93       	push	r29
    1b74:	cf 93       	push	r28
    1b76:	00 d0       	rcall	.+0      	; 0x1b78 <DIO_voidTogglePortValue+0x6>
    1b78:	0f 92       	push	r0
    1b7a:	cd b7       	in	r28, 0x3d	; 61
    1b7c:	de b7       	in	r29, 0x3e	; 62
    1b7e:	89 83       	std	Y+1, r24	; 0x01
if(copy_u8PortId <=3){
    1b80:	89 81       	ldd	r24, Y+1	; 0x01
    1b82:	84 30       	cpi	r24, 0x04	; 4
    1b84:	08 f0       	brcs	.+2      	; 0x1b88 <DIO_voidTogglePortValue+0x16>
    1b86:	3e c0       	rjmp	.+124    	; 0x1c04 <DIO_voidTogglePortValue+0x92>
		switch(copy_u8PortId){
    1b88:	89 81       	ldd	r24, Y+1	; 0x01
    1b8a:	28 2f       	mov	r18, r24
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	3b 83       	std	Y+3, r19	; 0x03
    1b90:	2a 83       	std	Y+2, r18	; 0x02
    1b92:	8a 81       	ldd	r24, Y+2	; 0x02
    1b94:	9b 81       	ldd	r25, Y+3	; 0x03
    1b96:	81 30       	cpi	r24, 0x01	; 1
    1b98:	91 05       	cpc	r25, r1
    1b9a:	e9 f0       	breq	.+58     	; 0x1bd6 <DIO_voidTogglePortValue+0x64>
    1b9c:	2a 81       	ldd	r18, Y+2	; 0x02
    1b9e:	3b 81       	ldd	r19, Y+3	; 0x03
    1ba0:	22 30       	cpi	r18, 0x02	; 2
    1ba2:	31 05       	cpc	r19, r1
    1ba4:	2c f4       	brge	.+10     	; 0x1bb0 <DIO_voidTogglePortValue+0x3e>
    1ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba8:	9b 81       	ldd	r25, Y+3	; 0x03
    1baa:	00 97       	sbiw	r24, 0x00	; 0
    1bac:	61 f0       	breq	.+24     	; 0x1bc6 <DIO_voidTogglePortValue+0x54>
    1bae:	2a c0       	rjmp	.+84     	; 0x1c04 <DIO_voidTogglePortValue+0x92>
    1bb0:	2a 81       	ldd	r18, Y+2	; 0x02
    1bb2:	3b 81       	ldd	r19, Y+3	; 0x03
    1bb4:	22 30       	cpi	r18, 0x02	; 2
    1bb6:	31 05       	cpc	r19, r1
    1bb8:	b1 f0       	breq	.+44     	; 0x1be6 <DIO_voidTogglePortValue+0x74>
    1bba:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbc:	9b 81       	ldd	r25, Y+3	; 0x03
    1bbe:	83 30       	cpi	r24, 0x03	; 3
    1bc0:	91 05       	cpc	r25, r1
    1bc2:	c9 f0       	breq	.+50     	; 0x1bf6 <DIO_voidTogglePortValue+0x84>
    1bc4:	1f c0       	rjmp	.+62     	; 0x1c04 <DIO_voidTogglePortValue+0x92>
				case DIO_PORTA:
					PORTA_REG= ~(PORTA_REG);
    1bc6:	ab e3       	ldi	r26, 0x3B	; 59
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	eb e3       	ldi	r30, 0x3B	; 59
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	80 95       	com	r24
    1bd2:	8c 93       	st	X, r24
    1bd4:	17 c0       	rjmp	.+46     	; 0x1c04 <DIO_voidTogglePortValue+0x92>
				break;
				case DIO_PORTB:
					PORTB_REG= ~(PORTB_REG);
    1bd6:	a8 e3       	ldi	r26, 0x38	; 56
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	e8 e3       	ldi	r30, 0x38	; 56
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	80 95       	com	r24
    1be2:	8c 93       	st	X, r24
    1be4:	0f c0       	rjmp	.+30     	; 0x1c04 <DIO_voidTogglePortValue+0x92>

				break;
				case DIO_PORTC:
					PORTC_REG= ~(PORTC_REG);
    1be6:	a5 e3       	ldi	r26, 0x35	; 53
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	e5 e3       	ldi	r30, 0x35	; 53
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	80 95       	com	r24
    1bf2:	8c 93       	st	X, r24
    1bf4:	07 c0       	rjmp	.+14     	; 0x1c04 <DIO_voidTogglePortValue+0x92>

				break;
				break;
				case DIO_PORTD:
					PORTD_REG= ~(PORTD_REG);
    1bf6:	a2 e3       	ldi	r26, 0x32	; 50
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	e2 e3       	ldi	r30, 0x32	; 50
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	80 95       	com	r24
    1c02:	8c 93       	st	X, r24
else
{
		//return false
}

}
    1c04:	0f 90       	pop	r0
    1c06:	0f 90       	pop	r0
    1c08:	0f 90       	pop	r0
    1c0a:	cf 91       	pop	r28
    1c0c:	df 91       	pop	r29
    1c0e:	08 95       	ret

00001c10 <DIO_voidActivePinInPllUpResistor>:
void DIO_voidActivePinInPllUpResistor(u8 copy_u8PortId,u8 copy_u8PinId){
    1c10:	df 93       	push	r29
    1c12:	cf 93       	push	r28
    1c14:	00 d0       	rcall	.+0      	; 0x1c16 <DIO_voidActivePinInPllUpResistor+0x6>
    1c16:	00 d0       	rcall	.+0      	; 0x1c18 <DIO_voidActivePinInPllUpResistor+0x8>
    1c18:	cd b7       	in	r28, 0x3d	; 61
    1c1a:	de b7       	in	r29, 0x3e	; 62
    1c1c:	89 83       	std	Y+1, r24	; 0x01
    1c1e:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_u8PortId<=3 && copy_u8PinId<=7)
    1c20:	89 81       	ldd	r24, Y+1	; 0x01
    1c22:	84 30       	cpi	r24, 0x04	; 4
    1c24:	08 f0       	brcs	.+2      	; 0x1c28 <DIO_voidActivePinInPllUpResistor+0x18>
    1c26:	72 c0       	rjmp	.+228    	; 0x1d0c <DIO_voidActivePinInPllUpResistor+0xfc>
    1c28:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2a:	88 30       	cpi	r24, 0x08	; 8
    1c2c:	08 f0       	brcs	.+2      	; 0x1c30 <DIO_voidActivePinInPllUpResistor+0x20>
    1c2e:	6e c0       	rjmp	.+220    	; 0x1d0c <DIO_voidActivePinInPllUpResistor+0xfc>
	{
		switch(copy_u8PortId)
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
    1c32:	28 2f       	mov	r18, r24
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	3c 83       	std	Y+4, r19	; 0x04
    1c38:	2b 83       	std	Y+3, r18	; 0x03
    1c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3e:	81 30       	cpi	r24, 0x01	; 1
    1c40:	91 05       	cpc	r25, r1
    1c42:	49 f1       	breq	.+82     	; 0x1c96 <DIO_voidActivePinInPllUpResistor+0x86>
    1c44:	2b 81       	ldd	r18, Y+3	; 0x03
    1c46:	3c 81       	ldd	r19, Y+4	; 0x04
    1c48:	22 30       	cpi	r18, 0x02	; 2
    1c4a:	31 05       	cpc	r19, r1
    1c4c:	2c f4       	brge	.+10     	; 0x1c58 <DIO_voidActivePinInPllUpResistor+0x48>
    1c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c50:	9c 81       	ldd	r25, Y+4	; 0x04
    1c52:	00 97       	sbiw	r24, 0x00	; 0
    1c54:	61 f0       	breq	.+24     	; 0x1c6e <DIO_voidActivePinInPllUpResistor+0x5e>
    1c56:	5a c0       	rjmp	.+180    	; 0x1d0c <DIO_voidActivePinInPllUpResistor+0xfc>
    1c58:	2b 81       	ldd	r18, Y+3	; 0x03
    1c5a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c5c:	22 30       	cpi	r18, 0x02	; 2
    1c5e:	31 05       	cpc	r19, r1
    1c60:	71 f1       	breq	.+92     	; 0x1cbe <DIO_voidActivePinInPllUpResistor+0xae>
    1c62:	8b 81       	ldd	r24, Y+3	; 0x03
    1c64:	9c 81       	ldd	r25, Y+4	; 0x04
    1c66:	83 30       	cpi	r24, 0x03	; 3
    1c68:	91 05       	cpc	r25, r1
    1c6a:	e9 f1       	breq	.+122    	; 0x1ce6 <DIO_voidActivePinInPllUpResistor+0xd6>
    1c6c:	4f c0       	rjmp	.+158    	; 0x1d0c <DIO_voidActivePinInPllUpResistor+0xfc>
		{
		case DIO_PORTA:SET_BIT(PORTA_REG,copy_u8PinId);
    1c6e:	ab e3       	ldi	r26, 0x3B	; 59
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	eb e3       	ldi	r30, 0x3B	; 59
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	80 81       	ld	r24, Z
    1c78:	48 2f       	mov	r20, r24
    1c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7c:	28 2f       	mov	r18, r24
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	02 2e       	mov	r0, r18
    1c86:	02 c0       	rjmp	.+4      	; 0x1c8c <DIO_voidActivePinInPllUpResistor+0x7c>
    1c88:	88 0f       	add	r24, r24
    1c8a:	99 1f       	adc	r25, r25
    1c8c:	0a 94       	dec	r0
    1c8e:	e2 f7       	brpl	.-8      	; 0x1c88 <DIO_voidActivePinInPllUpResistor+0x78>
    1c90:	84 2b       	or	r24, r20
    1c92:	8c 93       	st	X, r24
    1c94:	3b c0       	rjmp	.+118    	; 0x1d0c <DIO_voidActivePinInPllUpResistor+0xfc>
			break;
		case DIO_PORTB:SET_BIT(PORTB_REG,copy_u8PinId);
    1c96:	a8 e3       	ldi	r26, 0x38	; 56
    1c98:	b0 e0       	ldi	r27, 0x00	; 0
    1c9a:	e8 e3       	ldi	r30, 0x38	; 56
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	48 2f       	mov	r20, r24
    1ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca4:	28 2f       	mov	r18, r24
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	02 2e       	mov	r0, r18
    1cae:	02 c0       	rjmp	.+4      	; 0x1cb4 <DIO_voidActivePinInPllUpResistor+0xa4>
    1cb0:	88 0f       	add	r24, r24
    1cb2:	99 1f       	adc	r25, r25
    1cb4:	0a 94       	dec	r0
    1cb6:	e2 f7       	brpl	.-8      	; 0x1cb0 <DIO_voidActivePinInPllUpResistor+0xa0>
    1cb8:	84 2b       	or	r24, r20
    1cba:	8c 93       	st	X, r24
    1cbc:	27 c0       	rjmp	.+78     	; 0x1d0c <DIO_voidActivePinInPllUpResistor+0xfc>
			break;
		case DIO_PORTC:SET_BIT(PORTC_REG,copy_u8PinId);
    1cbe:	a5 e3       	ldi	r26, 0x35	; 53
    1cc0:	b0 e0       	ldi	r27, 0x00	; 0
    1cc2:	e5 e3       	ldi	r30, 0x35	; 53
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	80 81       	ld	r24, Z
    1cc8:	48 2f       	mov	r20, r24
    1cca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ccc:	28 2f       	mov	r18, r24
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	02 2e       	mov	r0, r18
    1cd6:	02 c0       	rjmp	.+4      	; 0x1cdc <DIO_voidActivePinInPllUpResistor+0xcc>
    1cd8:	88 0f       	add	r24, r24
    1cda:	99 1f       	adc	r25, r25
    1cdc:	0a 94       	dec	r0
    1cde:	e2 f7       	brpl	.-8      	; 0x1cd8 <DIO_voidActivePinInPllUpResistor+0xc8>
    1ce0:	84 2b       	or	r24, r20
    1ce2:	8c 93       	st	X, r24
    1ce4:	13 c0       	rjmp	.+38     	; 0x1d0c <DIO_voidActivePinInPllUpResistor+0xfc>
			break;
		case DIO_PORTD:SET_BIT(PORTD_REG,copy_u8PinId);
    1ce6:	a2 e3       	ldi	r26, 0x32	; 50
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	e2 e3       	ldi	r30, 0x32	; 50
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	48 2f       	mov	r20, r24
    1cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf4:	28 2f       	mov	r18, r24
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	02 2e       	mov	r0, r18
    1cfe:	02 c0       	rjmp	.+4      	; 0x1d04 <DIO_voidActivePinInPllUpResistor+0xf4>
    1d00:	88 0f       	add	r24, r24
    1d02:	99 1f       	adc	r25, r25
    1d04:	0a 94       	dec	r0
    1d06:	e2 f7       	brpl	.-8      	; 0x1d00 <DIO_voidActivePinInPllUpResistor+0xf0>
    1d08:	84 2b       	or	r24, r20
    1d0a:	8c 93       	st	X, r24
	}
	else
	{
		//return false
	}
}
    1d0c:	0f 90       	pop	r0
    1d0e:	0f 90       	pop	r0
    1d10:	0f 90       	pop	r0
    1d12:	0f 90       	pop	r0
    1d14:	cf 91       	pop	r28
    1d16:	df 91       	pop	r29
    1d18:	08 95       	ret

00001d1a <DIO_voidActivePortInPllUpResistor>:

void DIO_voidActivePortInPllUpResistor(u8 copy_u8PortId){
    1d1a:	df 93       	push	r29
    1d1c:	cf 93       	push	r28
    1d1e:	00 d0       	rcall	.+0      	; 0x1d20 <DIO_voidActivePortInPllUpResistor+0x6>
    1d20:	0f 92       	push	r0
    1d22:	cd b7       	in	r28, 0x3d	; 61
    1d24:	de b7       	in	r29, 0x3e	; 62
    1d26:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8PortId <=3){
    1d28:	89 81       	ldd	r24, Y+1	; 0x01
    1d2a:	84 30       	cpi	r24, 0x04	; 4
    1d2c:	90 f5       	brcc	.+100    	; 0x1d92 <DIO_voidActivePortInPllUpResistor+0x78>
		switch(copy_u8PortId){
    1d2e:	89 81       	ldd	r24, Y+1	; 0x01
    1d30:	28 2f       	mov	r18, r24
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	3b 83       	std	Y+3, r19	; 0x03
    1d36:	2a 83       	std	Y+2, r18	; 0x02
    1d38:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d3c:	81 30       	cpi	r24, 0x01	; 1
    1d3e:	91 05       	cpc	r25, r1
    1d40:	d1 f0       	breq	.+52     	; 0x1d76 <DIO_voidActivePortInPllUpResistor+0x5c>
    1d42:	2a 81       	ldd	r18, Y+2	; 0x02
    1d44:	3b 81       	ldd	r19, Y+3	; 0x03
    1d46:	22 30       	cpi	r18, 0x02	; 2
    1d48:	31 05       	cpc	r19, r1
    1d4a:	2c f4       	brge	.+10     	; 0x1d56 <DIO_voidActivePortInPllUpResistor+0x3c>
    1d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d50:	00 97       	sbiw	r24, 0x00	; 0
    1d52:	61 f0       	breq	.+24     	; 0x1d6c <DIO_voidActivePortInPllUpResistor+0x52>
    1d54:	1e c0       	rjmp	.+60     	; 0x1d92 <DIO_voidActivePortInPllUpResistor+0x78>
    1d56:	2a 81       	ldd	r18, Y+2	; 0x02
    1d58:	3b 81       	ldd	r19, Y+3	; 0x03
    1d5a:	22 30       	cpi	r18, 0x02	; 2
    1d5c:	31 05       	cpc	r19, r1
    1d5e:	81 f0       	breq	.+32     	; 0x1d80 <DIO_voidActivePortInPllUpResistor+0x66>
    1d60:	8a 81       	ldd	r24, Y+2	; 0x02
    1d62:	9b 81       	ldd	r25, Y+3	; 0x03
    1d64:	83 30       	cpi	r24, 0x03	; 3
    1d66:	91 05       	cpc	r25, r1
    1d68:	81 f0       	breq	.+32     	; 0x1d8a <DIO_voidActivePortInPllUpResistor+0x70>
    1d6a:	13 c0       	rjmp	.+38     	; 0x1d92 <DIO_voidActivePortInPllUpResistor+0x78>
			case DIO_PORTA:
				PORTA_REG=DIO_PORT_HIGH;
    1d6c:	eb e3       	ldi	r30, 0x3B	; 59
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	8f ef       	ldi	r24, 0xFF	; 255
    1d72:	80 83       	st	Z, r24
    1d74:	0e c0       	rjmp	.+28     	; 0x1d92 <DIO_voidActivePortInPllUpResistor+0x78>
			break;
			case DIO_PORTB:
				PORTB_REG=DIO_PORT_HIGH;
    1d76:	e8 e3       	ldi	r30, 0x38	; 56
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	8f ef       	ldi	r24, 0xFF	; 255
    1d7c:	80 83       	st	Z, r24
    1d7e:	09 c0       	rjmp	.+18     	; 0x1d92 <DIO_voidActivePortInPllUpResistor+0x78>
			break;
			case DIO_PORTC:
				PORTC_REG=DIO_PORT_HIGH;
    1d80:	e5 e3       	ldi	r30, 0x35	; 53
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	8f ef       	ldi	r24, 0xFF	; 255
    1d86:	80 83       	st	Z, r24
    1d88:	04 c0       	rjmp	.+8      	; 0x1d92 <DIO_voidActivePortInPllUpResistor+0x78>
			break;
			break;
			case DIO_PORTD:
				PORTD_REG=DIO_PORT_HIGH;
    1d8a:	e2 e3       	ldi	r30, 0x32	; 50
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	8f ef       	ldi	r24, 0xFF	; 255
    1d90:	80 83       	st	Z, r24
	}
	else
	{
			//return false
	}
}
    1d92:	0f 90       	pop	r0
    1d94:	0f 90       	pop	r0
    1d96:	0f 90       	pop	r0
    1d98:	cf 91       	pop	r28
    1d9a:	df 91       	pop	r29
    1d9c:	08 95       	ret

00001d9e <EEPROM_voidInit>:
#include "EEPROM_interface.h"
#include "EEPROM_private.h"


void EEPROM_voidInit(void)
{
    1d9e:	df 93       	push	r29
    1da0:	cf 93       	push	r28
    1da2:	cd b7       	in	r28, 0x3d	; 61
    1da4:	de b7       	in	r29, 0x3e	; 62
	TWI_voidInitMaster();
    1da6:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <TWI_voidInitMaster>
}
    1daa:	cf 91       	pop	r28
    1dac:	df 91       	pop	r29
    1dae:	08 95       	ret

00001db0 <EEPROM_voidWriteByte>:


void EEPROM_voidWriteByte(u16 copy_u16WordAdd, u8 copy_u8Data)
{
    1db0:	df 93       	push	r29
    1db2:	cf 93       	push	r28
    1db4:	cd b7       	in	r28, 0x3d	; 61
    1db6:	de b7       	in	r29, 0x3e	; 62
    1db8:	62 97       	sbiw	r28, 0x12	; 18
    1dba:	0f b6       	in	r0, 0x3f	; 63
    1dbc:	f8 94       	cli
    1dbe:	de bf       	out	0x3e, r29	; 62
    1dc0:	0f be       	out	0x3f, r0	; 63
    1dc2:	cd bf       	out	0x3d, r28	; 61
    1dc4:	99 8b       	std	Y+17, r25	; 0x11
    1dc6:	88 8b       	std	Y+16, r24	; 0x10
    1dc8:	6a 8b       	std	Y+18, r22	; 0x12
	u8 local_u8DeviceAdd = (copy_u16WordAdd >> 8) | EEPROM_FIXED_ADDRESS;
    1dca:	88 89       	ldd	r24, Y+16	; 0x10
    1dcc:	99 89       	ldd	r25, Y+17	; 0x11
    1dce:	89 2f       	mov	r24, r25
    1dd0:	99 27       	eor	r25, r25
    1dd2:	80 65       	ori	r24, 0x50	; 80
    1dd4:	8f 87       	std	Y+15, r24	; 0x0f

	// Send start condition
	TWI_voidSendStartCondition();
    1dd6:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <TWI_voidSendStartCondition>

	// Send slave address with write operation (device address)
	TWI_voidSendSlaveAddWithWrite(local_u8DeviceAdd);
    1dda:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ddc:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <TWI_voidSendSlaveAddWithWrite>

	// Send word address
	TWI_voidTransmitMasterDataByte((u8)copy_u16WordAdd);
    1de0:	88 89       	ldd	r24, Y+16	; 0x10
    1de2:	0e 94 76 1f 	call	0x3eec	; 0x3eec <TWI_voidTransmitMasterDataByte>

	// Send byte data
	TWI_voidTransmitMasterDataByte(copy_u8Data);
    1de6:	8a 89       	ldd	r24, Y+18	; 0x12
    1de8:	0e 94 76 1f 	call	0x3eec	; 0x3eec <TWI_voidTransmitMasterDataByte>

	// Send stop condition
	TWI_voidSendStopCondition();
    1dec:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <TWI_voidSendStopCondition>
    1df0:	80 e0       	ldi	r24, 0x00	; 0
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	a0 ea       	ldi	r26, 0xA0	; 160
    1df6:	b0 e4       	ldi	r27, 0x40	; 64
    1df8:	8b 87       	std	Y+11, r24	; 0x0b
    1dfa:	9c 87       	std	Y+12, r25	; 0x0c
    1dfc:	ad 87       	std	Y+13, r26	; 0x0d
    1dfe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e00:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e02:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	4a e7       	ldi	r20, 0x7A	; 122
    1e0e:	55 e4       	ldi	r21, 0x45	; 69
    1e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e14:	dc 01       	movw	r26, r24
    1e16:	cb 01       	movw	r24, r22
    1e18:	8f 83       	std	Y+7, r24	; 0x07
    1e1a:	98 87       	std	Y+8, r25	; 0x08
    1e1c:	a9 87       	std	Y+9, r26	; 0x09
    1e1e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e20:	6f 81       	ldd	r22, Y+7	; 0x07
    1e22:	78 85       	ldd	r23, Y+8	; 0x08
    1e24:	89 85       	ldd	r24, Y+9	; 0x09
    1e26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	40 e8       	ldi	r20, 0x80	; 128
    1e2e:	5f e3       	ldi	r21, 0x3F	; 63
    1e30:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e34:	88 23       	and	r24, r24
    1e36:	2c f4       	brge	.+10     	; 0x1e42 <EEPROM_voidWriteByte+0x92>
		__ticks = 1;
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	9e 83       	std	Y+6, r25	; 0x06
    1e3e:	8d 83       	std	Y+5, r24	; 0x05
    1e40:	3f c0       	rjmp	.+126    	; 0x1ec0 <EEPROM_voidWriteByte+0x110>
	else if (__tmp > 65535)
    1e42:	6f 81       	ldd	r22, Y+7	; 0x07
    1e44:	78 85       	ldd	r23, Y+8	; 0x08
    1e46:	89 85       	ldd	r24, Y+9	; 0x09
    1e48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e4a:	20 e0       	ldi	r18, 0x00	; 0
    1e4c:	3f ef       	ldi	r19, 0xFF	; 255
    1e4e:	4f e7       	ldi	r20, 0x7F	; 127
    1e50:	57 e4       	ldi	r21, 0x47	; 71
    1e52:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e56:	18 16       	cp	r1, r24
    1e58:	4c f5       	brge	.+82     	; 0x1eac <EEPROM_voidWriteByte+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e60:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e62:	20 e0       	ldi	r18, 0x00	; 0
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	40 e2       	ldi	r20, 0x20	; 32
    1e68:	51 e4       	ldi	r21, 0x41	; 65
    1e6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e6e:	dc 01       	movw	r26, r24
    1e70:	cb 01       	movw	r24, r22
    1e72:	bc 01       	movw	r22, r24
    1e74:	cd 01       	movw	r24, r26
    1e76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	9e 83       	std	Y+6, r25	; 0x06
    1e80:	8d 83       	std	Y+5, r24	; 0x05
    1e82:	0f c0       	rjmp	.+30     	; 0x1ea2 <EEPROM_voidWriteByte+0xf2>
    1e84:	80 e9       	ldi	r24, 0x90	; 144
    1e86:	91 e0       	ldi	r25, 0x01	; 1
    1e88:	9c 83       	std	Y+4, r25	; 0x04
    1e8a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e90:	01 97       	sbiw	r24, 0x01	; 1
    1e92:	f1 f7       	brne	.-4      	; 0x1e90 <EEPROM_voidWriteByte+0xe0>
    1e94:	9c 83       	std	Y+4, r25	; 0x04
    1e96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e98:	8d 81       	ldd	r24, Y+5	; 0x05
    1e9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e9c:	01 97       	sbiw	r24, 0x01	; 1
    1e9e:	9e 83       	std	Y+6, r25	; 0x06
    1ea0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ea2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea6:	00 97       	sbiw	r24, 0x00	; 0
    1ea8:	69 f7       	brne	.-38     	; 0x1e84 <EEPROM_voidWriteByte+0xd4>
    1eaa:	14 c0       	rjmp	.+40     	; 0x1ed4 <EEPROM_voidWriteByte+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eac:	6f 81       	ldd	r22, Y+7	; 0x07
    1eae:	78 85       	ldd	r23, Y+8	; 0x08
    1eb0:	89 85       	ldd	r24, Y+9	; 0x09
    1eb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb8:	dc 01       	movw	r26, r24
    1eba:	cb 01       	movw	r24, r22
    1ebc:	9e 83       	std	Y+6, r25	; 0x06
    1ebe:	8d 83       	std	Y+5, r24	; 0x05
    1ec0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec4:	9a 83       	std	Y+2, r25	; 0x02
    1ec6:	89 83       	std	Y+1, r24	; 0x01
    1ec8:	89 81       	ldd	r24, Y+1	; 0x01
    1eca:	9a 81       	ldd	r25, Y+2	; 0x02
    1ecc:	01 97       	sbiw	r24, 0x01	; 1
    1ece:	f1 f7       	brne	.-4      	; 0x1ecc <EEPROM_voidWriteByte+0x11c>
    1ed0:	9a 83       	std	Y+2, r25	; 0x02
    1ed2:	89 83       	std	Y+1, r24	; 0x01

	// Self-timed Write Cycle delay
	_delay_ms(5);
}
    1ed4:	62 96       	adiw	r28, 0x12	; 18
    1ed6:	0f b6       	in	r0, 0x3f	; 63
    1ed8:	f8 94       	cli
    1eda:	de bf       	out	0x3e, r29	; 62
    1edc:	0f be       	out	0x3f, r0	; 63
    1ede:	cd bf       	out	0x3d, r28	; 61
    1ee0:	cf 91       	pop	r28
    1ee2:	df 91       	pop	r29
    1ee4:	08 95       	ret

00001ee6 <EEPROM_voidReadByte>:


void EEPROM_voidReadByte(u16 copy_u16WordAdd, u8* copy_pu8Data)
{
    1ee6:	df 93       	push	r29
    1ee8:	cf 93       	push	r28
    1eea:	cd b7       	in	r28, 0x3d	; 61
    1eec:	de b7       	in	r29, 0x3e	; 62
    1eee:	63 97       	sbiw	r28, 0x13	; 19
    1ef0:	0f b6       	in	r0, 0x3f	; 63
    1ef2:	f8 94       	cli
    1ef4:	de bf       	out	0x3e, r29	; 62
    1ef6:	0f be       	out	0x3f, r0	; 63
    1ef8:	cd bf       	out	0x3d, r28	; 61
    1efa:	99 8b       	std	Y+17, r25	; 0x11
    1efc:	88 8b       	std	Y+16, r24	; 0x10
    1efe:	7b 8b       	std	Y+19, r23	; 0x13
    1f00:	6a 8b       	std	Y+18, r22	; 0x12
	if(copy_pu8Data != NULL)
    1f02:	8a 89       	ldd	r24, Y+18	; 0x12
    1f04:	9b 89       	ldd	r25, Y+19	; 0x13
    1f06:	00 97       	sbiw	r24, 0x00	; 0
    1f08:	09 f4       	brne	.+2      	; 0x1f0c <EEPROM_voidReadByte+0x26>
    1f0a:	8b c0       	rjmp	.+278    	; 0x2022 <EEPROM_voidReadByte+0x13c>
	{
		u8 local_u8DeviceAdd = (copy_u16WordAdd >> 8) | EEPROM_FIXED_ADDRESS;
    1f0c:	88 89       	ldd	r24, Y+16	; 0x10
    1f0e:	99 89       	ldd	r25, Y+17	; 0x11
    1f10:	89 2f       	mov	r24, r25
    1f12:	99 27       	eor	r25, r25
    1f14:	80 65       	ori	r24, 0x50	; 80
    1f16:	8f 87       	std	Y+15, r24	; 0x0f

		// Send start condition
		TWI_voidSendStartCondition();
    1f18:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <TWI_voidSendStartCondition>

		// Send slave address with write operation (device address)
		TWI_voidSendSlaveAddWithWrite(local_u8DeviceAdd);
    1f1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f1e:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <TWI_voidSendSlaveAddWithWrite>

		// Send word address
		TWI_voidTransmitMasterDataByte((u8)copy_u16WordAdd);
    1f22:	88 89       	ldd	r24, Y+16	; 0x10
    1f24:	0e 94 76 1f 	call	0x3eec	; 0x3eec <TWI_voidTransmitMasterDataByte>

		// Send repeated start condition in order to switch i2c operation (W >> R)
		TWI_voidSendRepStartCondition();
    1f28:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <TWI_voidSendRepStartCondition>

		// Send slave address with read operation (device address)
		TWI_voidSendSlaveAddWithRead(local_u8DeviceAdd);
    1f2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f2e:	0e 94 40 1f 	call	0x3e80	; 0x3e80 <TWI_voidSendSlaveAddWithRead>

		// Read byte data and respond without ACK
		TWI_voidReceiveMasterDataByteWithoutACK(copy_pu8Data);
    1f32:	8a 89       	ldd	r24, Y+18	; 0x12
    1f34:	9b 89       	ldd	r25, Y+19	; 0x13
    1f36:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <TWI_voidReceiveMasterDataByteWithoutACK>

		// Send stop condition
		TWI_voidSendStopCondition();
    1f3a:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <TWI_voidSendStopCondition>
    1f3e:	80 e0       	ldi	r24, 0x00	; 0
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	a0 ea       	ldi	r26, 0xA0	; 160
    1f44:	b0 e4       	ldi	r27, 0x40	; 64
    1f46:	8b 87       	std	Y+11, r24	; 0x0b
    1f48:	9c 87       	std	Y+12, r25	; 0x0c
    1f4a:	ad 87       	std	Y+13, r26	; 0x0d
    1f4c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f50:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f52:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f54:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	4a e7       	ldi	r20, 0x7A	; 122
    1f5c:	55 e4       	ldi	r21, 0x45	; 69
    1f5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f62:	dc 01       	movw	r26, r24
    1f64:	cb 01       	movw	r24, r22
    1f66:	8f 83       	std	Y+7, r24	; 0x07
    1f68:	98 87       	std	Y+8, r25	; 0x08
    1f6a:	a9 87       	std	Y+9, r26	; 0x09
    1f6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f70:	78 85       	ldd	r23, Y+8	; 0x08
    1f72:	89 85       	ldd	r24, Y+9	; 0x09
    1f74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	40 e8       	ldi	r20, 0x80	; 128
    1f7c:	5f e3       	ldi	r21, 0x3F	; 63
    1f7e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f82:	88 23       	and	r24, r24
    1f84:	2c f4       	brge	.+10     	; 0x1f90 <EEPROM_voidReadByte+0xaa>
		__ticks = 1;
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	9e 83       	std	Y+6, r25	; 0x06
    1f8c:	8d 83       	std	Y+5, r24	; 0x05
    1f8e:	3f c0       	rjmp	.+126    	; 0x200e <EEPROM_voidReadByte+0x128>
	else if (__tmp > 65535)
    1f90:	6f 81       	ldd	r22, Y+7	; 0x07
    1f92:	78 85       	ldd	r23, Y+8	; 0x08
    1f94:	89 85       	ldd	r24, Y+9	; 0x09
    1f96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	3f ef       	ldi	r19, 0xFF	; 255
    1f9c:	4f e7       	ldi	r20, 0x7F	; 127
    1f9e:	57 e4       	ldi	r21, 0x47	; 71
    1fa0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fa4:	18 16       	cp	r1, r24
    1fa6:	4c f5       	brge	.+82     	; 0x1ffa <EEPROM_voidReadByte+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1faa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fac:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fae:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	40 e2       	ldi	r20, 0x20	; 32
    1fb6:	51 e4       	ldi	r21, 0x41	; 65
    1fb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	cb 01       	movw	r24, r22
    1fc0:	bc 01       	movw	r22, r24
    1fc2:	cd 01       	movw	r24, r26
    1fc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	9e 83       	std	Y+6, r25	; 0x06
    1fce:	8d 83       	std	Y+5, r24	; 0x05
    1fd0:	0f c0       	rjmp	.+30     	; 0x1ff0 <EEPROM_voidReadByte+0x10a>
    1fd2:	80 e9       	ldi	r24, 0x90	; 144
    1fd4:	91 e0       	ldi	r25, 0x01	; 1
    1fd6:	9c 83       	std	Y+4, r25	; 0x04
    1fd8:	8b 83       	std	Y+3, r24	; 0x03
    1fda:	8b 81       	ldd	r24, Y+3	; 0x03
    1fdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fde:	01 97       	sbiw	r24, 0x01	; 1
    1fe0:	f1 f7       	brne	.-4      	; 0x1fde <EEPROM_voidReadByte+0xf8>
    1fe2:	9c 83       	std	Y+4, r25	; 0x04
    1fe4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fea:	01 97       	sbiw	r24, 0x01	; 1
    1fec:	9e 83       	std	Y+6, r25	; 0x06
    1fee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff4:	00 97       	sbiw	r24, 0x00	; 0
    1ff6:	69 f7       	brne	.-38     	; 0x1fd2 <EEPROM_voidReadByte+0xec>
    1ff8:	14 c0       	rjmp	.+40     	; 0x2022 <EEPROM_voidReadByte+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ffa:	6f 81       	ldd	r22, Y+7	; 0x07
    1ffc:	78 85       	ldd	r23, Y+8	; 0x08
    1ffe:	89 85       	ldd	r24, Y+9	; 0x09
    2000:	9a 85       	ldd	r25, Y+10	; 0x0a
    2002:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	9e 83       	std	Y+6, r25	; 0x06
    200c:	8d 83       	std	Y+5, r24	; 0x05
    200e:	8d 81       	ldd	r24, Y+5	; 0x05
    2010:	9e 81       	ldd	r25, Y+6	; 0x06
    2012:	9a 83       	std	Y+2, r25	; 0x02
    2014:	89 83       	std	Y+1, r24	; 0x01
    2016:	89 81       	ldd	r24, Y+1	; 0x01
    2018:	9a 81       	ldd	r25, Y+2	; 0x02
    201a:	01 97       	sbiw	r24, 0x01	; 1
    201c:	f1 f7       	brne	.-4      	; 0x201a <EEPROM_voidReadByte+0x134>
    201e:	9a 83       	std	Y+2, r25	; 0x02
    2020:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		//return Error State
	}
}
    2022:	63 96       	adiw	r28, 0x13	; 19
    2024:	0f b6       	in	r0, 0x3f	; 63
    2026:	f8 94       	cli
    2028:	de bf       	out	0x3e, r29	; 62
    202a:	0f be       	out	0x3f, r0	; 63
    202c:	cd bf       	out	0x3d, r28	; 61
    202e:	cf 91       	pop	r28
    2030:	df 91       	pop	r29
    2032:	08 95       	ret

00002034 <EEPROM_voidWritePage>:

void EEPROM_voidWritePage(u16 copy_u16BaseAdd, u8 copy_u8DataLength,u8 *copy_pu8DataArray){
    2034:	df 93       	push	r29
    2036:	cf 93       	push	r28
    2038:	cd b7       	in	r28, 0x3d	; 61
    203a:	de b7       	in	r29, 0x3e	; 62
    203c:	65 97       	sbiw	r28, 0x15	; 21
    203e:	0f b6       	in	r0, 0x3f	; 63
    2040:	f8 94       	cli
    2042:	de bf       	out	0x3e, r29	; 62
    2044:	0f be       	out	0x3f, r0	; 63
    2046:	cd bf       	out	0x3d, r28	; 61
    2048:	9a 8b       	std	Y+18, r25	; 0x12
    204a:	89 8b       	std	Y+17, r24	; 0x11
    204c:	6b 8b       	std	Y+19, r22	; 0x13
    204e:	5d 8b       	std	Y+21, r21	; 0x15
    2050:	4c 8b       	std	Y+20, r20	; 0x14

	if((copy_pu8DataArray != NULL) && (copy_u8DataLength <= 16))
    2052:	8c 89       	ldd	r24, Y+20	; 0x14
    2054:	9d 89       	ldd	r25, Y+21	; 0x15
    2056:	00 97       	sbiw	r24, 0x00	; 0
    2058:	09 f4       	brne	.+2      	; 0x205c <EEPROM_voidWritePage+0x28>
    205a:	9a c0       	rjmp	.+308    	; 0x2190 <EEPROM_voidWritePage+0x15c>
    205c:	8b 89       	ldd	r24, Y+19	; 0x13
    205e:	81 31       	cpi	r24, 0x11	; 17
    2060:	08 f0       	brcs	.+2      	; 0x2064 <EEPROM_voidWritePage+0x30>
    2062:	96 c0       	rjmp	.+300    	; 0x2190 <EEPROM_voidWritePage+0x15c>
		{
			u8 local_u8Counter;
			u8 local_u8DeviceAdd = (copy_u16BaseAdd >> 8) | EEPROM_FIXED_ADDRESS;
    2064:	89 89       	ldd	r24, Y+17	; 0x11
    2066:	9a 89       	ldd	r25, Y+18	; 0x12
    2068:	89 2f       	mov	r24, r25
    206a:	99 27       	eor	r25, r25
    206c:	80 65       	ori	r24, 0x50	; 80
    206e:	8f 87       	std	Y+15, r24	; 0x0f

			// Send start condition
			TWI_voidSendStartCondition();
    2070:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <TWI_voidSendStartCondition>

			// Send slave address with write operation (device address)
			TWI_voidSendSlaveAddWithWrite(local_u8DeviceAdd);
    2074:	8f 85       	ldd	r24, Y+15	; 0x0f
    2076:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <TWI_voidSendSlaveAddWithWrite>

			// Send word address
			TWI_voidTransmitMasterDataByte((u8)copy_u16BaseAdd);
    207a:	89 89       	ldd	r24, Y+17	; 0x11
    207c:	0e 94 76 1f 	call	0x3eec	; 0x3eec <TWI_voidTransmitMasterDataByte>

			for(local_u8Counter=0 ; local_u8Counter<copy_u8DataLength ; local_u8Counter++)
    2080:	18 8a       	std	Y+16, r1	; 0x10
    2082:	0e c0       	rjmp	.+28     	; 0x20a0 <EEPROM_voidWritePage+0x6c>
			{
				// Send byte data
				TWI_voidTransmitMasterDataByte(copy_pu8DataArray[local_u8Counter]);
    2084:	88 89       	ldd	r24, Y+16	; 0x10
    2086:	28 2f       	mov	r18, r24
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	8c 89       	ldd	r24, Y+20	; 0x14
    208c:	9d 89       	ldd	r25, Y+21	; 0x15
    208e:	fc 01       	movw	r30, r24
    2090:	e2 0f       	add	r30, r18
    2092:	f3 1f       	adc	r31, r19
    2094:	80 81       	ld	r24, Z
    2096:	0e 94 76 1f 	call	0x3eec	; 0x3eec <TWI_voidTransmitMasterDataByte>
			TWI_voidSendSlaveAddWithWrite(local_u8DeviceAdd);

			// Send word address
			TWI_voidTransmitMasterDataByte((u8)copy_u16BaseAdd);

			for(local_u8Counter=0 ; local_u8Counter<copy_u8DataLength ; local_u8Counter++)
    209a:	88 89       	ldd	r24, Y+16	; 0x10
    209c:	8f 5f       	subi	r24, 0xFF	; 255
    209e:	88 8b       	std	Y+16, r24	; 0x10
    20a0:	98 89       	ldd	r25, Y+16	; 0x10
    20a2:	8b 89       	ldd	r24, Y+19	; 0x13
    20a4:	98 17       	cp	r25, r24
    20a6:	70 f3       	brcs	.-36     	; 0x2084 <EEPROM_voidWritePage+0x50>
				// Send byte data
				TWI_voidTransmitMasterDataByte(copy_pu8DataArray[local_u8Counter]);
			}

			// Send stop condition
			TWI_voidSendStopCondition();
    20a8:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <TWI_voidSendStopCondition>
    20ac:	80 e0       	ldi	r24, 0x00	; 0
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	a0 ea       	ldi	r26, 0xA0	; 160
    20b2:	b0 e4       	ldi	r27, 0x40	; 64
    20b4:	8b 87       	std	Y+11, r24	; 0x0b
    20b6:	9c 87       	std	Y+12, r25	; 0x0c
    20b8:	ad 87       	std	Y+13, r26	; 0x0d
    20ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    20be:	7c 85       	ldd	r23, Y+12	; 0x0c
    20c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	4a e7       	ldi	r20, 0x7A	; 122
    20ca:	55 e4       	ldi	r21, 0x45	; 69
    20cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	8f 83       	std	Y+7, r24	; 0x07
    20d6:	98 87       	std	Y+8, r25	; 0x08
    20d8:	a9 87       	std	Y+9, r26	; 0x09
    20da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20dc:	6f 81       	ldd	r22, Y+7	; 0x07
    20de:	78 85       	ldd	r23, Y+8	; 0x08
    20e0:	89 85       	ldd	r24, Y+9	; 0x09
    20e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	40 e8       	ldi	r20, 0x80	; 128
    20ea:	5f e3       	ldi	r21, 0x3F	; 63
    20ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20f0:	88 23       	and	r24, r24
    20f2:	2c f4       	brge	.+10     	; 0x20fe <EEPROM_voidWritePage+0xca>
		__ticks = 1;
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	9e 83       	std	Y+6, r25	; 0x06
    20fa:	8d 83       	std	Y+5, r24	; 0x05
    20fc:	3f c0       	rjmp	.+126    	; 0x217c <EEPROM_voidWritePage+0x148>
	else if (__tmp > 65535)
    20fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2100:	78 85       	ldd	r23, Y+8	; 0x08
    2102:	89 85       	ldd	r24, Y+9	; 0x09
    2104:	9a 85       	ldd	r25, Y+10	; 0x0a
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	3f ef       	ldi	r19, 0xFF	; 255
    210a:	4f e7       	ldi	r20, 0x7F	; 127
    210c:	57 e4       	ldi	r21, 0x47	; 71
    210e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2112:	18 16       	cp	r1, r24
    2114:	4c f5       	brge	.+82     	; 0x2168 <EEPROM_voidWritePage+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2116:	6b 85       	ldd	r22, Y+11	; 0x0b
    2118:	7c 85       	ldd	r23, Y+12	; 0x0c
    211a:	8d 85       	ldd	r24, Y+13	; 0x0d
    211c:	9e 85       	ldd	r25, Y+14	; 0x0e
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	40 e2       	ldi	r20, 0x20	; 32
    2124:	51 e4       	ldi	r21, 0x41	; 65
    2126:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	bc 01       	movw	r22, r24
    2130:	cd 01       	movw	r24, r26
    2132:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	9e 83       	std	Y+6, r25	; 0x06
    213c:	8d 83       	std	Y+5, r24	; 0x05
    213e:	0f c0       	rjmp	.+30     	; 0x215e <EEPROM_voidWritePage+0x12a>
    2140:	80 e9       	ldi	r24, 0x90	; 144
    2142:	91 e0       	ldi	r25, 0x01	; 1
    2144:	9c 83       	std	Y+4, r25	; 0x04
    2146:	8b 83       	std	Y+3, r24	; 0x03
    2148:	8b 81       	ldd	r24, Y+3	; 0x03
    214a:	9c 81       	ldd	r25, Y+4	; 0x04
    214c:	01 97       	sbiw	r24, 0x01	; 1
    214e:	f1 f7       	brne	.-4      	; 0x214c <EEPROM_voidWritePage+0x118>
    2150:	9c 83       	std	Y+4, r25	; 0x04
    2152:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2154:	8d 81       	ldd	r24, Y+5	; 0x05
    2156:	9e 81       	ldd	r25, Y+6	; 0x06
    2158:	01 97       	sbiw	r24, 0x01	; 1
    215a:	9e 83       	std	Y+6, r25	; 0x06
    215c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    215e:	8d 81       	ldd	r24, Y+5	; 0x05
    2160:	9e 81       	ldd	r25, Y+6	; 0x06
    2162:	00 97       	sbiw	r24, 0x00	; 0
    2164:	69 f7       	brne	.-38     	; 0x2140 <EEPROM_voidWritePage+0x10c>
    2166:	14 c0       	rjmp	.+40     	; 0x2190 <EEPROM_voidWritePage+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2168:	6f 81       	ldd	r22, Y+7	; 0x07
    216a:	78 85       	ldd	r23, Y+8	; 0x08
    216c:	89 85       	ldd	r24, Y+9	; 0x09
    216e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	9e 83       	std	Y+6, r25	; 0x06
    217a:	8d 83       	std	Y+5, r24	; 0x05
    217c:	8d 81       	ldd	r24, Y+5	; 0x05
    217e:	9e 81       	ldd	r25, Y+6	; 0x06
    2180:	9a 83       	std	Y+2, r25	; 0x02
    2182:	89 83       	std	Y+1, r24	; 0x01
    2184:	89 81       	ldd	r24, Y+1	; 0x01
    2186:	9a 81       	ldd	r25, Y+2	; 0x02
    2188:	01 97       	sbiw	r24, 0x01	; 1
    218a:	f1 f7       	brne	.-4      	; 0x2188 <EEPROM_voidWritePage+0x154>
    218c:	9a 83       	std	Y+2, r25	; 0x02
    218e:	89 83       	std	Y+1, r24	; 0x01
		}
		else
		{
			//return Error State
		}
}
    2190:	65 96       	adiw	r28, 0x15	; 21
    2192:	0f b6       	in	r0, 0x3f	; 63
    2194:	f8 94       	cli
    2196:	de bf       	out	0x3e, r29	; 62
    2198:	0f be       	out	0x3f, r0	; 63
    219a:	cd bf       	out	0x3d, r28	; 61
    219c:	cf 91       	pop	r28
    219e:	df 91       	pop	r29
    21a0:	08 95       	ret

000021a2 <EEPROM_voidReadPage>:

void EEPROM_voidReadPage (u16 copy_u16BaseAdd, u8 copy_u8DataLength,u8 *copy_pu8DataPassOutArray){
    21a2:	df 93       	push	r29
    21a4:	cf 93       	push	r28
    21a6:	cd b7       	in	r28, 0x3d	; 61
    21a8:	de b7       	in	r29, 0x3e	; 62
    21aa:	65 97       	sbiw	r28, 0x15	; 21
    21ac:	0f b6       	in	r0, 0x3f	; 63
    21ae:	f8 94       	cli
    21b0:	de bf       	out	0x3e, r29	; 62
    21b2:	0f be       	out	0x3f, r0	; 63
    21b4:	cd bf       	out	0x3d, r28	; 61
    21b6:	9a 8b       	std	Y+18, r25	; 0x12
    21b8:	89 8b       	std	Y+17, r24	; 0x11
    21ba:	6b 8b       	std	Y+19, r22	; 0x13
    21bc:	5d 8b       	std	Y+21, r21	; 0x15
    21be:	4c 8b       	std	Y+20, r20	; 0x14
	if((copy_pu8DataPassOutArray != NULL) && (copy_u8DataLength <= 16))
    21c0:	8c 89       	ldd	r24, Y+20	; 0x14
    21c2:	9d 89       	ldd	r25, Y+21	; 0x15
    21c4:	00 97       	sbiw	r24, 0x00	; 0
    21c6:	09 f4       	brne	.+2      	; 0x21ca <EEPROM_voidReadPage+0x28>
    21c8:	ac c0       	rjmp	.+344    	; 0x2322 <EEPROM_voidReadPage+0x180>
    21ca:	8b 89       	ldd	r24, Y+19	; 0x13
    21cc:	81 31       	cpi	r24, 0x11	; 17
    21ce:	08 f0       	brcs	.+2      	; 0x21d2 <EEPROM_voidReadPage+0x30>
    21d0:	a8 c0       	rjmp	.+336    	; 0x2322 <EEPROM_voidReadPage+0x180>
		{
			u8 local_u8Counter;
			u8 local_u8DeviceAdd = (copy_u16BaseAdd >> 8) | EEPROM_FIXED_ADDRESS;
    21d2:	89 89       	ldd	r24, Y+17	; 0x11
    21d4:	9a 89       	ldd	r25, Y+18	; 0x12
    21d6:	89 2f       	mov	r24, r25
    21d8:	99 27       	eor	r25, r25
    21da:	80 65       	ori	r24, 0x50	; 80
    21dc:	8f 87       	std	Y+15, r24	; 0x0f

			// Send start condition
			TWI_voidSendStartCondition();
    21de:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <TWI_voidSendStartCondition>

			// Send slave address with write operation (device address)
			TWI_voidSendSlaveAddWithWrite(local_u8DeviceAdd);
    21e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    21e4:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <TWI_voidSendSlaveAddWithWrite>

			// Send word address
			TWI_voidTransmitMasterDataByte((u8)copy_u16BaseAdd);
    21e8:	89 89       	ldd	r24, Y+17	; 0x11
    21ea:	0e 94 76 1f 	call	0x3eec	; 0x3eec <TWI_voidTransmitMasterDataByte>

			// Send repeated start condition in order to switch i2c operation (W >> R)
			TWI_voidSendRepStartCondition();
    21ee:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <TWI_voidSendRepStartCondition>

			// Send slave address with read operation (device address)
			TWI_voidSendSlaveAddWithRead(local_u8DeviceAdd);
    21f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    21f4:	0e 94 40 1f 	call	0x3e80	; 0x3e80 <TWI_voidSendSlaveAddWithRead>

			for(local_u8Counter=0 ; local_u8Counter<(copy_u8DataLength-1) ; local_u8Counter++)
    21f8:	18 8a       	std	Y+16, r1	; 0x10
    21fa:	0c c0       	rjmp	.+24     	; 0x2214 <EEPROM_voidReadPage+0x72>
			{
				// Read byte data and respond with ACK
				TWI_voidReceiveMasterDataByteWithACK(&copy_pu8DataPassOutArray[local_u8Counter]);
    21fc:	88 89       	ldd	r24, Y+16	; 0x10
    21fe:	28 2f       	mov	r18, r24
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	8c 89       	ldd	r24, Y+20	; 0x14
    2204:	9d 89       	ldd	r25, Y+21	; 0x15
    2206:	82 0f       	add	r24, r18
    2208:	93 1f       	adc	r25, r19
    220a:	0e 94 9a 1f 	call	0x3f34	; 0x3f34 <TWI_voidReceiveMasterDataByteWithACK>
			TWI_voidSendRepStartCondition();

			// Send slave address with read operation (device address)
			TWI_voidSendSlaveAddWithRead(local_u8DeviceAdd);

			for(local_u8Counter=0 ; local_u8Counter<(copy_u8DataLength-1) ; local_u8Counter++)
    220e:	88 89       	ldd	r24, Y+16	; 0x10
    2210:	8f 5f       	subi	r24, 0xFF	; 255
    2212:	88 8b       	std	Y+16, r24	; 0x10
    2214:	88 89       	ldd	r24, Y+16	; 0x10
    2216:	28 2f       	mov	r18, r24
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	8b 89       	ldd	r24, Y+19	; 0x13
    221c:	88 2f       	mov	r24, r24
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	01 97       	sbiw	r24, 0x01	; 1
    2222:	28 17       	cp	r18, r24
    2224:	39 07       	cpc	r19, r25
    2226:	54 f3       	brlt	.-44     	; 0x21fc <EEPROM_voidReadPage+0x5a>
				// Read byte data and respond with ACK
				TWI_voidReceiveMasterDataByteWithACK(&copy_pu8DataPassOutArray[local_u8Counter]);
			}

			// Read byte data and respond without ACK
			TWI_voidReceiveMasterDataByteWithoutACK(&copy_pu8DataPassOutArray[local_u8Counter]);
    2228:	88 89       	ldd	r24, Y+16	; 0x10
    222a:	28 2f       	mov	r18, r24
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	8c 89       	ldd	r24, Y+20	; 0x14
    2230:	9d 89       	ldd	r25, Y+21	; 0x15
    2232:	82 0f       	add	r24, r18
    2234:	93 1f       	adc	r25, r19
    2236:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <TWI_voidReceiveMasterDataByteWithoutACK>

			// Send stop condition
			TWI_voidSendStopCondition();
    223a:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <TWI_voidSendStopCondition>
    223e:	80 e0       	ldi	r24, 0x00	; 0
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	a0 ea       	ldi	r26, 0xA0	; 160
    2244:	b0 e4       	ldi	r27, 0x40	; 64
    2246:	8b 87       	std	Y+11, r24	; 0x0b
    2248:	9c 87       	std	Y+12, r25	; 0x0c
    224a:	ad 87       	std	Y+13, r26	; 0x0d
    224c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    224e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2250:	7c 85       	ldd	r23, Y+12	; 0x0c
    2252:	8d 85       	ldd	r24, Y+13	; 0x0d
    2254:	9e 85       	ldd	r25, Y+14	; 0x0e
    2256:	20 e0       	ldi	r18, 0x00	; 0
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	4a e7       	ldi	r20, 0x7A	; 122
    225c:	55 e4       	ldi	r21, 0x45	; 69
    225e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	8f 83       	std	Y+7, r24	; 0x07
    2268:	98 87       	std	Y+8, r25	; 0x08
    226a:	a9 87       	std	Y+9, r26	; 0x09
    226c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    226e:	6f 81       	ldd	r22, Y+7	; 0x07
    2270:	78 85       	ldd	r23, Y+8	; 0x08
    2272:	89 85       	ldd	r24, Y+9	; 0x09
    2274:	9a 85       	ldd	r25, Y+10	; 0x0a
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	40 e8       	ldi	r20, 0x80	; 128
    227c:	5f e3       	ldi	r21, 0x3F	; 63
    227e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2282:	88 23       	and	r24, r24
    2284:	2c f4       	brge	.+10     	; 0x2290 <EEPROM_voidReadPage+0xee>
		__ticks = 1;
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	9e 83       	std	Y+6, r25	; 0x06
    228c:	8d 83       	std	Y+5, r24	; 0x05
    228e:	3f c0       	rjmp	.+126    	; 0x230e <EEPROM_voidReadPage+0x16c>
	else if (__tmp > 65535)
    2290:	6f 81       	ldd	r22, Y+7	; 0x07
    2292:	78 85       	ldd	r23, Y+8	; 0x08
    2294:	89 85       	ldd	r24, Y+9	; 0x09
    2296:	9a 85       	ldd	r25, Y+10	; 0x0a
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	3f ef       	ldi	r19, 0xFF	; 255
    229c:	4f e7       	ldi	r20, 0x7F	; 127
    229e:	57 e4       	ldi	r21, 0x47	; 71
    22a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22a4:	18 16       	cp	r1, r24
    22a6:	4c f5       	brge	.+82     	; 0x22fa <EEPROM_voidReadPage+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    22aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	40 e2       	ldi	r20, 0x20	; 32
    22b6:	51 e4       	ldi	r21, 0x41	; 65
    22b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22bc:	dc 01       	movw	r26, r24
    22be:	cb 01       	movw	r24, r22
    22c0:	bc 01       	movw	r22, r24
    22c2:	cd 01       	movw	r24, r26
    22c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	9e 83       	std	Y+6, r25	; 0x06
    22ce:	8d 83       	std	Y+5, r24	; 0x05
    22d0:	0f c0       	rjmp	.+30     	; 0x22f0 <EEPROM_voidReadPage+0x14e>
    22d2:	80 e9       	ldi	r24, 0x90	; 144
    22d4:	91 e0       	ldi	r25, 0x01	; 1
    22d6:	9c 83       	std	Y+4, r25	; 0x04
    22d8:	8b 83       	std	Y+3, r24	; 0x03
    22da:	8b 81       	ldd	r24, Y+3	; 0x03
    22dc:	9c 81       	ldd	r25, Y+4	; 0x04
    22de:	01 97       	sbiw	r24, 0x01	; 1
    22e0:	f1 f7       	brne	.-4      	; 0x22de <EEPROM_voidReadPage+0x13c>
    22e2:	9c 83       	std	Y+4, r25	; 0x04
    22e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e6:	8d 81       	ldd	r24, Y+5	; 0x05
    22e8:	9e 81       	ldd	r25, Y+6	; 0x06
    22ea:	01 97       	sbiw	r24, 0x01	; 1
    22ec:	9e 83       	std	Y+6, r25	; 0x06
    22ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22f0:	8d 81       	ldd	r24, Y+5	; 0x05
    22f2:	9e 81       	ldd	r25, Y+6	; 0x06
    22f4:	00 97       	sbiw	r24, 0x00	; 0
    22f6:	69 f7       	brne	.-38     	; 0x22d2 <EEPROM_voidReadPage+0x130>
    22f8:	14 c0       	rjmp	.+40     	; 0x2322 <EEPROM_voidReadPage+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22fa:	6f 81       	ldd	r22, Y+7	; 0x07
    22fc:	78 85       	ldd	r23, Y+8	; 0x08
    22fe:	89 85       	ldd	r24, Y+9	; 0x09
    2300:	9a 85       	ldd	r25, Y+10	; 0x0a
    2302:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	9e 83       	std	Y+6, r25	; 0x06
    230c:	8d 83       	std	Y+5, r24	; 0x05
    230e:	8d 81       	ldd	r24, Y+5	; 0x05
    2310:	9e 81       	ldd	r25, Y+6	; 0x06
    2312:	9a 83       	std	Y+2, r25	; 0x02
    2314:	89 83       	std	Y+1, r24	; 0x01
    2316:	89 81       	ldd	r24, Y+1	; 0x01
    2318:	9a 81       	ldd	r25, Y+2	; 0x02
    231a:	01 97       	sbiw	r24, 0x01	; 1
    231c:	f1 f7       	brne	.-4      	; 0x231a <EEPROM_voidReadPage+0x178>
    231e:	9a 83       	std	Y+2, r25	; 0x02
    2320:	89 83       	std	Y+1, r24	; 0x01
		}
		else
		{
			//return Error States
		}
}
    2322:	65 96       	adiw	r28, 0x15	; 21
    2324:	0f b6       	in	r0, 0x3f	; 63
    2326:	f8 94       	cli
    2328:	de bf       	out	0x3e, r29	; 62
    232a:	0f be       	out	0x3f, r0	; 63
    232c:	cd bf       	out	0x3d, r28	; 61
    232e:	cf 91       	pop	r28
    2330:	df 91       	pop	r29
    2332:	08 95       	ret

00002334 <EXTI_voidInit>:

static void (*PRV_pFunCallBackINT0)(void) = NULL;
static void (*PRV_pFunCallBackINT1)(void) = NULL;
static void (*PRV_pFunCallBackINT2)(void) = NULL;

void EXTI_voidInit(EXTI_intSrc_t copy_tIntSource,EXTI_intSenceControl_t copy_tIntSenceControl){
    2334:	df 93       	push	r29
    2336:	cf 93       	push	r28
    2338:	cd b7       	in	r28, 0x3d	; 61
    233a:	de b7       	in	r29, 0x3e	; 62
    233c:	2a 97       	sbiw	r28, 0x0a	; 10
    233e:	0f b6       	in	r0, 0x3f	; 63
    2340:	f8 94       	cli
    2342:	de bf       	out	0x3e, r29	; 62
    2344:	0f be       	out	0x3f, r0	; 63
    2346:	cd bf       	out	0x3d, r28	; 61
    2348:	89 83       	std	Y+1, r24	; 0x01
    234a:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_tIntSource){
    234c:	89 81       	ldd	r24, Y+1	; 0x01
    234e:	28 2f       	mov	r18, r24
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	3a 87       	std	Y+10, r19	; 0x0a
    2354:	29 87       	std	Y+9, r18	; 0x09
    2356:	89 85       	ldd	r24, Y+9	; 0x09
    2358:	9a 85       	ldd	r25, Y+10	; 0x0a
    235a:	81 30       	cpi	r24, 0x01	; 1
    235c:	91 05       	cpc	r25, r1
    235e:	09 f4       	brne	.+2      	; 0x2362 <EXTI_voidInit+0x2e>
    2360:	66 c0       	rjmp	.+204    	; 0x242e <EXTI_voidInit+0xfa>
    2362:	29 85       	ldd	r18, Y+9	; 0x09
    2364:	3a 85       	ldd	r19, Y+10	; 0x0a
    2366:	22 30       	cpi	r18, 0x02	; 2
    2368:	31 05       	cpc	r19, r1
    236a:	09 f4       	brne	.+2      	; 0x236e <EXTI_voidInit+0x3a>
    236c:	bb c0       	rjmp	.+374    	; 0x24e4 <EXTI_voidInit+0x1b0>
    236e:	89 85       	ldd	r24, Y+9	; 0x09
    2370:	9a 85       	ldd	r25, Y+10	; 0x0a
    2372:	00 97       	sbiw	r24, 0x00	; 0
    2374:	09 f0       	breq	.+2      	; 0x2378 <EXTI_voidInit+0x44>
    2376:	d4 c0       	rjmp	.+424    	; 0x2520 <EXTI_voidInit+0x1ec>
	case EXTI_INT0:
		switch(copy_tIntSenceControl)
    2378:	8a 81       	ldd	r24, Y+2	; 0x02
    237a:	28 2f       	mov	r18, r24
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	38 87       	std	Y+8, r19	; 0x08
    2380:	2f 83       	std	Y+7, r18	; 0x07
    2382:	8f 81       	ldd	r24, Y+7	; 0x07
    2384:	98 85       	ldd	r25, Y+8	; 0x08
    2386:	81 30       	cpi	r24, 0x01	; 1
    2388:	91 05       	cpc	r25, r1
    238a:	21 f1       	breq	.+72     	; 0x23d4 <EXTI_voidInit+0xa0>
    238c:	2f 81       	ldd	r18, Y+7	; 0x07
    238e:	38 85       	ldd	r19, Y+8	; 0x08
    2390:	22 30       	cpi	r18, 0x02	; 2
    2392:	31 05       	cpc	r19, r1
    2394:	2c f4       	brge	.+10     	; 0x23a0 <EXTI_voidInit+0x6c>
    2396:	8f 81       	ldd	r24, Y+7	; 0x07
    2398:	98 85       	ldd	r25, Y+8	; 0x08
    239a:	00 97       	sbiw	r24, 0x00	; 0
    239c:	61 f0       	breq	.+24     	; 0x23b6 <EXTI_voidInit+0x82>
    239e:	c0 c0       	rjmp	.+384    	; 0x2520 <EXTI_voidInit+0x1ec>
    23a0:	2f 81       	ldd	r18, Y+7	; 0x07
    23a2:	38 85       	ldd	r19, Y+8	; 0x08
    23a4:	22 30       	cpi	r18, 0x02	; 2
    23a6:	31 05       	cpc	r19, r1
    23a8:	21 f1       	breq	.+72     	; 0x23f2 <EXTI_voidInit+0xbe>
    23aa:	8f 81       	ldd	r24, Y+7	; 0x07
    23ac:	98 85       	ldd	r25, Y+8	; 0x08
    23ae:	83 30       	cpi	r24, 0x03	; 3
    23b0:	91 05       	cpc	r25, r1
    23b2:	71 f1       	breq	.+92     	; 0x2410 <EXTI_voidInit+0xdc>
    23b4:	b5 c0       	rjmp	.+362    	; 0x2520 <EXTI_voidInit+0x1ec>
		{
		case EXTI_RISING_EDGE:
			SET_BIT(MCUCR_REG,ISC00);
    23b6:	a5 e5       	ldi	r26, 0x55	; 85
    23b8:	b0 e0       	ldi	r27, 0x00	; 0
    23ba:	e5 e5       	ldi	r30, 0x55	; 85
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	80 81       	ld	r24, Z
    23c0:	81 60       	ori	r24, 0x01	; 1
    23c2:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG,ISC01);
    23c4:	a5 e5       	ldi	r26, 0x55	; 85
    23c6:	b0 e0       	ldi	r27, 0x00	; 0
    23c8:	e5 e5       	ldi	r30, 0x55	; 85
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	80 81       	ld	r24, Z
    23ce:	82 60       	ori	r24, 0x02	; 2
    23d0:	8c 93       	st	X, r24
    23d2:	a6 c0       	rjmp	.+332    	; 0x2520 <EXTI_voidInit+0x1ec>
			break;
		case EXTI_FALLING_EDGE:
			CLR_BIT(MCUCR_REG,ISC00);
    23d4:	a5 e5       	ldi	r26, 0x55	; 85
    23d6:	b0 e0       	ldi	r27, 0x00	; 0
    23d8:	e5 e5       	ldi	r30, 0x55	; 85
    23da:	f0 e0       	ldi	r31, 0x00	; 0
    23dc:	80 81       	ld	r24, Z
    23de:	8e 7f       	andi	r24, 0xFE	; 254
    23e0:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG,ISC01);
    23e2:	a5 e5       	ldi	r26, 0x55	; 85
    23e4:	b0 e0       	ldi	r27, 0x00	; 0
    23e6:	e5 e5       	ldi	r30, 0x55	; 85
    23e8:	f0 e0       	ldi	r31, 0x00	; 0
    23ea:	80 81       	ld	r24, Z
    23ec:	82 60       	ori	r24, 0x02	; 2
    23ee:	8c 93       	st	X, r24
    23f0:	97 c0       	rjmp	.+302    	; 0x2520 <EXTI_voidInit+0x1ec>
			break;
		case EXTI_LOW_LEVEL:
			CLR_BIT(MCUCR_REG,ISC00);
    23f2:	a5 e5       	ldi	r26, 0x55	; 85
    23f4:	b0 e0       	ldi	r27, 0x00	; 0
    23f6:	e5 e5       	ldi	r30, 0x55	; 85
    23f8:	f0 e0       	ldi	r31, 0x00	; 0
    23fa:	80 81       	ld	r24, Z
    23fc:	8e 7f       	andi	r24, 0xFE	; 254
    23fe:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG,ISC01);
    2400:	a5 e5       	ldi	r26, 0x55	; 85
    2402:	b0 e0       	ldi	r27, 0x00	; 0
    2404:	e5 e5       	ldi	r30, 0x55	; 85
    2406:	f0 e0       	ldi	r31, 0x00	; 0
    2408:	80 81       	ld	r24, Z
    240a:	8d 7f       	andi	r24, 0xFD	; 253
    240c:	8c 93       	st	X, r24
    240e:	88 c0       	rjmp	.+272    	; 0x2520 <EXTI_voidInit+0x1ec>
			break;
		case EXTI_ANY_LOGICAL_CHANGE:
			SET_BIT(MCUCR_REG,ISC00);
    2410:	a5 e5       	ldi	r26, 0x55	; 85
    2412:	b0 e0       	ldi	r27, 0x00	; 0
    2414:	e5 e5       	ldi	r30, 0x55	; 85
    2416:	f0 e0       	ldi	r31, 0x00	; 0
    2418:	80 81       	ld	r24, Z
    241a:	81 60       	ori	r24, 0x01	; 1
    241c:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG,ISC01);
    241e:	a5 e5       	ldi	r26, 0x55	; 85
    2420:	b0 e0       	ldi	r27, 0x00	; 0
    2422:	e5 e5       	ldi	r30, 0x55	; 85
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	80 81       	ld	r24, Z
    2428:	8d 7f       	andi	r24, 0xFD	; 253
    242a:	8c 93       	st	X, r24
    242c:	79 c0       	rjmp	.+242    	; 0x2520 <EXTI_voidInit+0x1ec>
			break;
		}

		break;
		case EXTI_INT1:
			switch(copy_tIntSenceControl)
    242e:	8a 81       	ldd	r24, Y+2	; 0x02
    2430:	28 2f       	mov	r18, r24
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	3e 83       	std	Y+6, r19	; 0x06
    2436:	2d 83       	std	Y+5, r18	; 0x05
    2438:	8d 81       	ldd	r24, Y+5	; 0x05
    243a:	9e 81       	ldd	r25, Y+6	; 0x06
    243c:	81 30       	cpi	r24, 0x01	; 1
    243e:	91 05       	cpc	r25, r1
    2440:	21 f1       	breq	.+72     	; 0x248a <EXTI_voidInit+0x156>
    2442:	2d 81       	ldd	r18, Y+5	; 0x05
    2444:	3e 81       	ldd	r19, Y+6	; 0x06
    2446:	22 30       	cpi	r18, 0x02	; 2
    2448:	31 05       	cpc	r19, r1
    244a:	2c f4       	brge	.+10     	; 0x2456 <EXTI_voidInit+0x122>
    244c:	8d 81       	ldd	r24, Y+5	; 0x05
    244e:	9e 81       	ldd	r25, Y+6	; 0x06
    2450:	00 97       	sbiw	r24, 0x00	; 0
    2452:	61 f0       	breq	.+24     	; 0x246c <EXTI_voidInit+0x138>
    2454:	65 c0       	rjmp	.+202    	; 0x2520 <EXTI_voidInit+0x1ec>
    2456:	2d 81       	ldd	r18, Y+5	; 0x05
    2458:	3e 81       	ldd	r19, Y+6	; 0x06
    245a:	22 30       	cpi	r18, 0x02	; 2
    245c:	31 05       	cpc	r19, r1
    245e:	21 f1       	breq	.+72     	; 0x24a8 <EXTI_voidInit+0x174>
    2460:	8d 81       	ldd	r24, Y+5	; 0x05
    2462:	9e 81       	ldd	r25, Y+6	; 0x06
    2464:	83 30       	cpi	r24, 0x03	; 3
    2466:	91 05       	cpc	r25, r1
    2468:	71 f1       	breq	.+92     	; 0x24c6 <EXTI_voidInit+0x192>
    246a:	5a c0       	rjmp	.+180    	; 0x2520 <EXTI_voidInit+0x1ec>
			{
			case EXTI_RISING_EDGE:
				SET_BIT(MCUCR_REG,ISC10);
    246c:	a5 e5       	ldi	r26, 0x55	; 85
    246e:	b0 e0       	ldi	r27, 0x00	; 0
    2470:	e5 e5       	ldi	r30, 0x55	; 85
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	80 81       	ld	r24, Z
    2476:	84 60       	ori	r24, 0x04	; 4
    2478:	8c 93       	st	X, r24
				SET_BIT(MCUCR_REG,ISC11);
    247a:	a5 e5       	ldi	r26, 0x55	; 85
    247c:	b0 e0       	ldi	r27, 0x00	; 0
    247e:	e5 e5       	ldi	r30, 0x55	; 85
    2480:	f0 e0       	ldi	r31, 0x00	; 0
    2482:	80 81       	ld	r24, Z
    2484:	88 60       	ori	r24, 0x08	; 8
    2486:	8c 93       	st	X, r24
    2488:	4b c0       	rjmp	.+150    	; 0x2520 <EXTI_voidInit+0x1ec>
				break;
			case EXTI_FALLING_EDGE:
				CLR_BIT(MCUCR_REG,ISC10);
    248a:	a5 e5       	ldi	r26, 0x55	; 85
    248c:	b0 e0       	ldi	r27, 0x00	; 0
    248e:	e5 e5       	ldi	r30, 0x55	; 85
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	80 81       	ld	r24, Z
    2494:	8b 7f       	andi	r24, 0xFB	; 251
    2496:	8c 93       	st	X, r24
				SET_BIT(MCUCR_REG,ISC11);
    2498:	a5 e5       	ldi	r26, 0x55	; 85
    249a:	b0 e0       	ldi	r27, 0x00	; 0
    249c:	e5 e5       	ldi	r30, 0x55	; 85
    249e:	f0 e0       	ldi	r31, 0x00	; 0
    24a0:	80 81       	ld	r24, Z
    24a2:	88 60       	ori	r24, 0x08	; 8
    24a4:	8c 93       	st	X, r24
    24a6:	3c c0       	rjmp	.+120    	; 0x2520 <EXTI_voidInit+0x1ec>
				break;
			case EXTI_LOW_LEVEL:
				CLR_BIT(MCUCR_REG,ISC10);
    24a8:	a5 e5       	ldi	r26, 0x55	; 85
    24aa:	b0 e0       	ldi	r27, 0x00	; 0
    24ac:	e5 e5       	ldi	r30, 0x55	; 85
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	80 81       	ld	r24, Z
    24b2:	8b 7f       	andi	r24, 0xFB	; 251
    24b4:	8c 93       	st	X, r24
				CLR_BIT(MCUCR_REG,ISC11);
    24b6:	a5 e5       	ldi	r26, 0x55	; 85
    24b8:	b0 e0       	ldi	r27, 0x00	; 0
    24ba:	e5 e5       	ldi	r30, 0x55	; 85
    24bc:	f0 e0       	ldi	r31, 0x00	; 0
    24be:	80 81       	ld	r24, Z
    24c0:	87 7f       	andi	r24, 0xF7	; 247
    24c2:	8c 93       	st	X, r24
    24c4:	2d c0       	rjmp	.+90     	; 0x2520 <EXTI_voidInit+0x1ec>
				break;
			case EXTI_ANY_LOGICAL_CHANGE:
				SET_BIT(MCUCR_REG,ISC10);
    24c6:	a5 e5       	ldi	r26, 0x55	; 85
    24c8:	b0 e0       	ldi	r27, 0x00	; 0
    24ca:	e5 e5       	ldi	r30, 0x55	; 85
    24cc:	f0 e0       	ldi	r31, 0x00	; 0
    24ce:	80 81       	ld	r24, Z
    24d0:	84 60       	ori	r24, 0x04	; 4
    24d2:	8c 93       	st	X, r24
				CLR_BIT(MCUCR_REG,ISC11);
    24d4:	a5 e5       	ldi	r26, 0x55	; 85
    24d6:	b0 e0       	ldi	r27, 0x00	; 0
    24d8:	e5 e5       	ldi	r30, 0x55	; 85
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	80 81       	ld	r24, Z
    24de:	87 7f       	andi	r24, 0xF7	; 247
    24e0:	8c 93       	st	X, r24
    24e2:	1e c0       	rjmp	.+60     	; 0x2520 <EXTI_voidInit+0x1ec>
				break;

          }
			break;
			case EXTI_INT2:
				switch(copy_tIntSenceControl)
    24e4:	8a 81       	ldd	r24, Y+2	; 0x02
    24e6:	28 2f       	mov	r18, r24
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	3c 83       	std	Y+4, r19	; 0x04
    24ec:	2b 83       	std	Y+3, r18	; 0x03
    24ee:	8b 81       	ldd	r24, Y+3	; 0x03
    24f0:	9c 81       	ldd	r25, Y+4	; 0x04
    24f2:	00 97       	sbiw	r24, 0x00	; 0
    24f4:	31 f0       	breq	.+12     	; 0x2502 <EXTI_voidInit+0x1ce>
    24f6:	2b 81       	ldd	r18, Y+3	; 0x03
    24f8:	3c 81       	ldd	r19, Y+4	; 0x04
    24fa:	21 30       	cpi	r18, 0x01	; 1
    24fc:	31 05       	cpc	r19, r1
    24fe:	49 f0       	breq	.+18     	; 0x2512 <EXTI_voidInit+0x1de>
    2500:	0f c0       	rjmp	.+30     	; 0x2520 <EXTI_voidInit+0x1ec>
				{
				case EXTI_RISING_EDGE:
					SET_BIT(MCUCSR_REG,ISC2);
    2502:	a4 e5       	ldi	r26, 0x54	; 84
    2504:	b0 e0       	ldi	r27, 0x00	; 0
    2506:	e4 e5       	ldi	r30, 0x54	; 84
    2508:	f0 e0       	ldi	r31, 0x00	; 0
    250a:	80 81       	ld	r24, Z
    250c:	80 64       	ori	r24, 0x40	; 64
    250e:	8c 93       	st	X, r24
    2510:	07 c0       	rjmp	.+14     	; 0x2520 <EXTI_voidInit+0x1ec>
					break;
				case EXTI_FALLING_EDGE:
					CLR_BIT(MCUCSR_REG,ISC2);
    2512:	a4 e5       	ldi	r26, 0x54	; 84
    2514:	b0 e0       	ldi	r27, 0x00	; 0
    2516:	e4 e5       	ldi	r30, 0x54	; 84
    2518:	f0 e0       	ldi	r31, 0x00	; 0
    251a:	80 81       	ld	r24, Z
    251c:	8f 7b       	andi	r24, 0xBF	; 191
    251e:	8c 93       	st	X, r24
					//dont make anything
					break;

	}
}
}
    2520:	2a 96       	adiw	r28, 0x0a	; 10
    2522:	0f b6       	in	r0, 0x3f	; 63
    2524:	f8 94       	cli
    2526:	de bf       	out	0x3e, r29	; 62
    2528:	0f be       	out	0x3f, r0	; 63
    252a:	cd bf       	out	0x3d, r28	; 61
    252c:	cf 91       	pop	r28
    252e:	df 91       	pop	r29
    2530:	08 95       	ret

00002532 <EXTI_voidEnable>:
void EXTI_voidEnable(EXTI_intSrc_t copy_tIntSource){
    2532:	df 93       	push	r29
    2534:	cf 93       	push	r28
    2536:	00 d0       	rcall	.+0      	; 0x2538 <EXTI_voidEnable+0x6>
    2538:	0f 92       	push	r0
    253a:	cd b7       	in	r28, 0x3d	; 61
    253c:	de b7       	in	r29, 0x3e	; 62
    253e:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_tIntSource){
    2540:	89 81       	ldd	r24, Y+1	; 0x01
    2542:	28 2f       	mov	r18, r24
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	3b 83       	std	Y+3, r19	; 0x03
    2548:	2a 83       	std	Y+2, r18	; 0x02
    254a:	8a 81       	ldd	r24, Y+2	; 0x02
    254c:	9b 81       	ldd	r25, Y+3	; 0x03
    254e:	81 30       	cpi	r24, 0x01	; 1
    2550:	91 05       	cpc	r25, r1
    2552:	89 f0       	breq	.+34     	; 0x2576 <EXTI_voidEnable+0x44>
    2554:	2a 81       	ldd	r18, Y+2	; 0x02
    2556:	3b 81       	ldd	r19, Y+3	; 0x03
    2558:	22 30       	cpi	r18, 0x02	; 2
    255a:	31 05       	cpc	r19, r1
    255c:	a1 f0       	breq	.+40     	; 0x2586 <EXTI_voidEnable+0x54>
    255e:	8a 81       	ldd	r24, Y+2	; 0x02
    2560:	9b 81       	ldd	r25, Y+3	; 0x03
    2562:	00 97       	sbiw	r24, 0x00	; 0
    2564:	b9 f4       	brne	.+46     	; 0x2594 <EXTI_voidEnable+0x62>
	case EXTI_INT0: SET_BIT(GICR_REG,INT0);
    2566:	ab e5       	ldi	r26, 0x5B	; 91
    2568:	b0 e0       	ldi	r27, 0x00	; 0
    256a:	eb e5       	ldi	r30, 0x5B	; 91
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
    2570:	80 64       	ori	r24, 0x40	; 64
    2572:	8c 93       	st	X, r24
    2574:	0f c0       	rjmp	.+30     	; 0x2594 <EXTI_voidEnable+0x62>
		break;
	case EXTI_INT1: SET_BIT(GICR_REG,INT1);
    2576:	ab e5       	ldi	r26, 0x5B	; 91
    2578:	b0 e0       	ldi	r27, 0x00	; 0
    257a:	eb e5       	ldi	r30, 0x5B	; 91
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	80 81       	ld	r24, Z
    2580:	80 68       	ori	r24, 0x80	; 128
    2582:	8c 93       	st	X, r24
    2584:	07 c0       	rjmp	.+14     	; 0x2594 <EXTI_voidEnable+0x62>
		break;
	case EXTI_INT2: SET_BIT(GICR_REG,INT2);
    2586:	ab e5       	ldi	r26, 0x5B	; 91
    2588:	b0 e0       	ldi	r27, 0x00	; 0
    258a:	eb e5       	ldi	r30, 0x5B	; 91
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	80 81       	ld	r24, Z
    2590:	80 62       	ori	r24, 0x20	; 32
    2592:	8c 93       	st	X, r24
		break;
	}
}
    2594:	0f 90       	pop	r0
    2596:	0f 90       	pop	r0
    2598:	0f 90       	pop	r0
    259a:	cf 91       	pop	r28
    259c:	df 91       	pop	r29
    259e:	08 95       	ret

000025a0 <EXTI_voidDisable>:
void EXTI_voidDisable(EXTI_intSrc_t copy_tIntSource){
    25a0:	df 93       	push	r29
    25a2:	cf 93       	push	r28
    25a4:	00 d0       	rcall	.+0      	; 0x25a6 <EXTI_voidDisable+0x6>
    25a6:	0f 92       	push	r0
    25a8:	cd b7       	in	r28, 0x3d	; 61
    25aa:	de b7       	in	r29, 0x3e	; 62
    25ac:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_tIntSource){
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
    25b0:	28 2f       	mov	r18, r24
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	3b 83       	std	Y+3, r19	; 0x03
    25b6:	2a 83       	std	Y+2, r18	; 0x02
    25b8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ba:	9b 81       	ldd	r25, Y+3	; 0x03
    25bc:	81 30       	cpi	r24, 0x01	; 1
    25be:	91 05       	cpc	r25, r1
    25c0:	89 f0       	breq	.+34     	; 0x25e4 <EXTI_voidDisable+0x44>
    25c2:	2a 81       	ldd	r18, Y+2	; 0x02
    25c4:	3b 81       	ldd	r19, Y+3	; 0x03
    25c6:	22 30       	cpi	r18, 0x02	; 2
    25c8:	31 05       	cpc	r19, r1
    25ca:	a1 f0       	breq	.+40     	; 0x25f4 <EXTI_voidDisable+0x54>
    25cc:	8a 81       	ldd	r24, Y+2	; 0x02
    25ce:	9b 81       	ldd	r25, Y+3	; 0x03
    25d0:	00 97       	sbiw	r24, 0x00	; 0
    25d2:	b9 f4       	brne	.+46     	; 0x2602 <EXTI_voidDisable+0x62>
	case EXTI_INT0: CLR_BIT(GICR_REG,INT0);
    25d4:	ab e5       	ldi	r26, 0x5B	; 91
    25d6:	b0 e0       	ldi	r27, 0x00	; 0
    25d8:	eb e5       	ldi	r30, 0x5B	; 91
    25da:	f0 e0       	ldi	r31, 0x00	; 0
    25dc:	80 81       	ld	r24, Z
    25de:	8f 7b       	andi	r24, 0xBF	; 191
    25e0:	8c 93       	st	X, r24
    25e2:	0f c0       	rjmp	.+30     	; 0x2602 <EXTI_voidDisable+0x62>
		break;
	case EXTI_INT1: CLR_BIT(GICR_REG,INT1);
    25e4:	ab e5       	ldi	r26, 0x5B	; 91
    25e6:	b0 e0       	ldi	r27, 0x00	; 0
    25e8:	eb e5       	ldi	r30, 0x5B	; 91
    25ea:	f0 e0       	ldi	r31, 0x00	; 0
    25ec:	80 81       	ld	r24, Z
    25ee:	8f 77       	andi	r24, 0x7F	; 127
    25f0:	8c 93       	st	X, r24
    25f2:	07 c0       	rjmp	.+14     	; 0x2602 <EXTI_voidDisable+0x62>
		break;
	case EXTI_INT2: CLR_BIT(GICR_REG,INT2);
    25f4:	ab e5       	ldi	r26, 0x5B	; 91
    25f6:	b0 e0       	ldi	r27, 0x00	; 0
    25f8:	eb e5       	ldi	r30, 0x5B	; 91
    25fa:	f0 e0       	ldi	r31, 0x00	; 0
    25fc:	80 81       	ld	r24, Z
    25fe:	8f 7d       	andi	r24, 0xDF	; 223
    2600:	8c 93       	st	X, r24
		break;
	}
}
    2602:	0f 90       	pop	r0
    2604:	0f 90       	pop	r0
    2606:	0f 90       	pop	r0
    2608:	cf 91       	pop	r28
    260a:	df 91       	pop	r29
    260c:	08 95       	ret

0000260e <EXTI_voidSetCallBackINT0>:
void EXTI_voidSetCallBackINT0(void (* copy_pFunAction)(void)){
    260e:	df 93       	push	r29
    2610:	cf 93       	push	r28
    2612:	00 d0       	rcall	.+0      	; 0x2614 <EXTI_voidSetCallBackINT0+0x6>
    2614:	cd b7       	in	r28, 0x3d	; 61
    2616:	de b7       	in	r29, 0x3e	; 62
    2618:	9a 83       	std	Y+2, r25	; 0x02
    261a:	89 83       	std	Y+1, r24	; 0x01
	if(copy_pFunAction !=NULL){
    261c:	89 81       	ldd	r24, Y+1	; 0x01
    261e:	9a 81       	ldd	r25, Y+2	; 0x02
    2620:	00 97       	sbiw	r24, 0x00	; 0
    2622:	31 f0       	breq	.+12     	; 0x2630 <EXTI_voidSetCallBackINT0+0x22>
		PRV_pFunCallBackINT0=copy_pFunAction;
    2624:	89 81       	ldd	r24, Y+1	; 0x01
    2626:	9a 81       	ldd	r25, Y+2	; 0x02
    2628:	90 93 89 02 	sts	0x0289, r25
    262c:	80 93 88 02 	sts	0x0288, r24
	}
	else{
		//retrun error
	}

}
    2630:	0f 90       	pop	r0
    2632:	0f 90       	pop	r0
    2634:	cf 91       	pop	r28
    2636:	df 91       	pop	r29
    2638:	08 95       	ret

0000263a <EXTI_voidSetCallBackINT1>:

void EXTI_voidSetCallBackINT1(void (* copy_pFunAction)(void)){
    263a:	df 93       	push	r29
    263c:	cf 93       	push	r28
    263e:	00 d0       	rcall	.+0      	; 0x2640 <EXTI_voidSetCallBackINT1+0x6>
    2640:	cd b7       	in	r28, 0x3d	; 61
    2642:	de b7       	in	r29, 0x3e	; 62
    2644:	9a 83       	std	Y+2, r25	; 0x02
    2646:	89 83       	std	Y+1, r24	; 0x01
	if(copy_pFunAction !=NULL){
    2648:	89 81       	ldd	r24, Y+1	; 0x01
    264a:	9a 81       	ldd	r25, Y+2	; 0x02
    264c:	00 97       	sbiw	r24, 0x00	; 0
    264e:	31 f0       	breq	.+12     	; 0x265c <EXTI_voidSetCallBackINT1+0x22>
		PRV_pFunCallBackINT1=copy_pFunAction;
    2650:	89 81       	ldd	r24, Y+1	; 0x01
    2652:	9a 81       	ldd	r25, Y+2	; 0x02
    2654:	90 93 8b 02 	sts	0x028B, r25
    2658:	80 93 8a 02 	sts	0x028A, r24
	}
	else{
		//retrun error
	}

}
    265c:	0f 90       	pop	r0
    265e:	0f 90       	pop	r0
    2660:	cf 91       	pop	r28
    2662:	df 91       	pop	r29
    2664:	08 95       	ret

00002666 <EXTI_voidSetCallBackINT2>:

void EXTI_voidSetCallBackINT2(void (* copy_pFunAction)(void)){
    2666:	df 93       	push	r29
    2668:	cf 93       	push	r28
    266a:	00 d0       	rcall	.+0      	; 0x266c <EXTI_voidSetCallBackINT2+0x6>
    266c:	cd b7       	in	r28, 0x3d	; 61
    266e:	de b7       	in	r29, 0x3e	; 62
    2670:	9a 83       	std	Y+2, r25	; 0x02
    2672:	89 83       	std	Y+1, r24	; 0x01
	if(copy_pFunAction !=NULL){
    2674:	89 81       	ldd	r24, Y+1	; 0x01
    2676:	9a 81       	ldd	r25, Y+2	; 0x02
    2678:	00 97       	sbiw	r24, 0x00	; 0
    267a:	31 f0       	breq	.+12     	; 0x2688 <EXTI_voidSetCallBackINT2+0x22>
		PRV_pFunCallBackINT2=copy_pFunAction;
    267c:	89 81       	ldd	r24, Y+1	; 0x01
    267e:	9a 81       	ldd	r25, Y+2	; 0x02
    2680:	90 93 8d 02 	sts	0x028D, r25
    2684:	80 93 8c 02 	sts	0x028C, r24
	}
	else{
		//retrun error
	}

}
    2688:	0f 90       	pop	r0
    268a:	0f 90       	pop	r0
    268c:	cf 91       	pop	r28
    268e:	df 91       	pop	r29
    2690:	08 95       	ret

00002692 <__vector_1>:

void __vector_1(void) __attribute((signal));
void __vector_1(void){
    2692:	1f 92       	push	r1
    2694:	0f 92       	push	r0
    2696:	0f b6       	in	r0, 0x3f	; 63
    2698:	0f 92       	push	r0
    269a:	11 24       	eor	r1, r1
    269c:	2f 93       	push	r18
    269e:	3f 93       	push	r19
    26a0:	4f 93       	push	r20
    26a2:	5f 93       	push	r21
    26a4:	6f 93       	push	r22
    26a6:	7f 93       	push	r23
    26a8:	8f 93       	push	r24
    26aa:	9f 93       	push	r25
    26ac:	af 93       	push	r26
    26ae:	bf 93       	push	r27
    26b0:	ef 93       	push	r30
    26b2:	ff 93       	push	r31
    26b4:	df 93       	push	r29
    26b6:	cf 93       	push	r28
    26b8:	cd b7       	in	r28, 0x3d	; 61
    26ba:	de b7       	in	r29, 0x3e	; 62
	if(PRV_pFunCallBackINT0 !=NULL){
    26bc:	80 91 88 02 	lds	r24, 0x0288
    26c0:	90 91 89 02 	lds	r25, 0x0289
    26c4:	00 97       	sbiw	r24, 0x00	; 0
    26c6:	29 f0       	breq	.+10     	; 0x26d2 <__vector_1+0x40>
		PRV_pFunCallBackINT0();
    26c8:	e0 91 88 02 	lds	r30, 0x0288
    26cc:	f0 91 89 02 	lds	r31, 0x0289
    26d0:	09 95       	icall
	}
}
    26d2:	cf 91       	pop	r28
    26d4:	df 91       	pop	r29
    26d6:	ff 91       	pop	r31
    26d8:	ef 91       	pop	r30
    26da:	bf 91       	pop	r27
    26dc:	af 91       	pop	r26
    26de:	9f 91       	pop	r25
    26e0:	8f 91       	pop	r24
    26e2:	7f 91       	pop	r23
    26e4:	6f 91       	pop	r22
    26e6:	5f 91       	pop	r21
    26e8:	4f 91       	pop	r20
    26ea:	3f 91       	pop	r19
    26ec:	2f 91       	pop	r18
    26ee:	0f 90       	pop	r0
    26f0:	0f be       	out	0x3f, r0	; 63
    26f2:	0f 90       	pop	r0
    26f4:	1f 90       	pop	r1
    26f6:	18 95       	reti

000026f8 <__vector_2>:

void __vector_2(void) __attribute((signal));
void __vector_2(void){
    26f8:	1f 92       	push	r1
    26fa:	0f 92       	push	r0
    26fc:	0f b6       	in	r0, 0x3f	; 63
    26fe:	0f 92       	push	r0
    2700:	11 24       	eor	r1, r1
    2702:	2f 93       	push	r18
    2704:	3f 93       	push	r19
    2706:	4f 93       	push	r20
    2708:	5f 93       	push	r21
    270a:	6f 93       	push	r22
    270c:	7f 93       	push	r23
    270e:	8f 93       	push	r24
    2710:	9f 93       	push	r25
    2712:	af 93       	push	r26
    2714:	bf 93       	push	r27
    2716:	ef 93       	push	r30
    2718:	ff 93       	push	r31
    271a:	df 93       	push	r29
    271c:	cf 93       	push	r28
    271e:	cd b7       	in	r28, 0x3d	; 61
    2720:	de b7       	in	r29, 0x3e	; 62
	if(PRV_pFunCallBackINT1 !=NULL){
    2722:	80 91 8a 02 	lds	r24, 0x028A
    2726:	90 91 8b 02 	lds	r25, 0x028B
    272a:	00 97       	sbiw	r24, 0x00	; 0
    272c:	29 f0       	breq	.+10     	; 0x2738 <__vector_2+0x40>
		PRV_pFunCallBackINT1();
    272e:	e0 91 8a 02 	lds	r30, 0x028A
    2732:	f0 91 8b 02 	lds	r31, 0x028B
    2736:	09 95       	icall
	}
}
    2738:	cf 91       	pop	r28
    273a:	df 91       	pop	r29
    273c:	ff 91       	pop	r31
    273e:	ef 91       	pop	r30
    2740:	bf 91       	pop	r27
    2742:	af 91       	pop	r26
    2744:	9f 91       	pop	r25
    2746:	8f 91       	pop	r24
    2748:	7f 91       	pop	r23
    274a:	6f 91       	pop	r22
    274c:	5f 91       	pop	r21
    274e:	4f 91       	pop	r20
    2750:	3f 91       	pop	r19
    2752:	2f 91       	pop	r18
    2754:	0f 90       	pop	r0
    2756:	0f be       	out	0x3f, r0	; 63
    2758:	0f 90       	pop	r0
    275a:	1f 90       	pop	r1
    275c:	18 95       	reti

0000275e <__vector_3>:

void __vector_3(void) __attribute((signal));
void __vector_3(void){
    275e:	1f 92       	push	r1
    2760:	0f 92       	push	r0
    2762:	0f b6       	in	r0, 0x3f	; 63
    2764:	0f 92       	push	r0
    2766:	11 24       	eor	r1, r1
    2768:	2f 93       	push	r18
    276a:	3f 93       	push	r19
    276c:	4f 93       	push	r20
    276e:	5f 93       	push	r21
    2770:	6f 93       	push	r22
    2772:	7f 93       	push	r23
    2774:	8f 93       	push	r24
    2776:	9f 93       	push	r25
    2778:	af 93       	push	r26
    277a:	bf 93       	push	r27
    277c:	ef 93       	push	r30
    277e:	ff 93       	push	r31
    2780:	df 93       	push	r29
    2782:	cf 93       	push	r28
    2784:	cd b7       	in	r28, 0x3d	; 61
    2786:	de b7       	in	r29, 0x3e	; 62
	if(PRV_pFunCallBackINT2 !=NULL){
    2788:	80 91 8c 02 	lds	r24, 0x028C
    278c:	90 91 8d 02 	lds	r25, 0x028D
    2790:	00 97       	sbiw	r24, 0x00	; 0
    2792:	29 f0       	breq	.+10     	; 0x279e <__vector_3+0x40>
		PRV_pFunCallBackINT2();
    2794:	e0 91 8c 02 	lds	r30, 0x028C
    2798:	f0 91 8d 02 	lds	r31, 0x028D
    279c:	09 95       	icall
	}
}
    279e:	cf 91       	pop	r28
    27a0:	df 91       	pop	r29
    27a2:	ff 91       	pop	r31
    27a4:	ef 91       	pop	r30
    27a6:	bf 91       	pop	r27
    27a8:	af 91       	pop	r26
    27aa:	9f 91       	pop	r25
    27ac:	8f 91       	pop	r24
    27ae:	7f 91       	pop	r23
    27b0:	6f 91       	pop	r22
    27b2:	5f 91       	pop	r21
    27b4:	4f 91       	pop	r20
    27b6:	3f 91       	pop	r19
    27b8:	2f 91       	pop	r18
    27ba:	0f 90       	pop	r0
    27bc:	0f be       	out	0x3f, r0	; 63
    27be:	0f 90       	pop	r0
    27c0:	1f 90       	pop	r1
    27c2:	18 95       	reti

000027c4 <GI_voidEnable>:
#include "BIT_MATH.h"
#include "STD_TYPES.h"
#include "GI_interface.h"
#include "GI_register.h"

void GI_voidEnable(){
    27c4:	df 93       	push	r29
    27c6:	cf 93       	push	r28
    27c8:	cd b7       	in	r28, 0x3d	; 61
    27ca:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG,I);
    27cc:	af e5       	ldi	r26, 0x5F	; 95
    27ce:	b0 e0       	ldi	r27, 0x00	; 0
    27d0:	ef e5       	ldi	r30, 0x5F	; 95
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
    27d4:	80 81       	ld	r24, Z
    27d6:	80 68       	ori	r24, 0x80	; 128
    27d8:	8c 93       	st	X, r24

}
    27da:	cf 91       	pop	r28
    27dc:	df 91       	pop	r29
    27de:	08 95       	ret

000027e0 <GI_voidDisable>:
void GI_voidDisable(){
    27e0:	df 93       	push	r29
    27e2:	cf 93       	push	r28
    27e4:	cd b7       	in	r28, 0x3d	; 61
    27e6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG_REG,I);
    27e8:	af e5       	ldi	r26, 0x5F	; 95
    27ea:	b0 e0       	ldi	r27, 0x00	; 0
    27ec:	ef e5       	ldi	r30, 0x5F	; 95
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	80 81       	ld	r24, Z
    27f2:	8f 77       	andi	r24, 0x7F	; 127
    27f4:	8c 93       	st	X, r24
}
    27f6:	cf 91       	pop	r28
    27f8:	df 91       	pop	r29
    27fa:	08 95       	ret

000027fc <KPD_voidInit>:
#include"DIO_interface.h"
#include"KPD_interface.h"
#include"KPD_config.h"


void KPD_voidInit(){
    27fc:	df 93       	push	r29
    27fe:	cf 93       	push	r28
    2800:	cd b7       	in	r28, 0x3d	; 61
    2802:	de b7       	in	r29, 0x3e	; 62
	//ROW INPUT
	DIO_voidSetPinDirection(KPD_ROW0_PORT,KPD_ROW0_PIN,DIO_PIN_INPUT);
    2804:	82 e0       	ldi	r24, 0x02	; 2
    2806:	63 e0       	ldi	r22, 0x03	; 3
    2808:	40 e0       	ldi	r20, 0x00	; 0
    280a:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW1_PORT,KPD_ROW1_PIN,DIO_PIN_INPUT);
    280e:	82 e0       	ldi	r24, 0x02	; 2
    2810:	64 e0       	ldi	r22, 0x04	; 4
    2812:	40 e0       	ldi	r20, 0x00	; 0
    2814:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW2_PORT,KPD_ROW2_PIN,DIO_PIN_INPUT);
    2818:	82 e0       	ldi	r24, 0x02	; 2
    281a:	65 e0       	ldi	r22, 0x05	; 5
    281c:	40 e0       	ldi	r20, 0x00	; 0
    281e:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW3_PORT,KPD_ROW3_PIN,DIO_PIN_INPUT);
    2822:	82 e0       	ldi	r24, 0x02	; 2
    2824:	66 e0       	ldi	r22, 0x06	; 6
    2826:	40 e0       	ldi	r20, 0x00	; 0
    2828:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>

	//active internal pull up resistor
	DIO_voidActivePinInPllUpResistor(KPD_ROW0_PORT,KPD_ROW0_PIN);
    282c:	82 e0       	ldi	r24, 0x02	; 2
    282e:	63 e0       	ldi	r22, 0x03	; 3
    2830:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <DIO_voidActivePinInPllUpResistor>
	DIO_voidActivePinInPllUpResistor(KPD_ROW1_PORT,KPD_ROW1_PIN);
    2834:	82 e0       	ldi	r24, 0x02	; 2
    2836:	64 e0       	ldi	r22, 0x04	; 4
    2838:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <DIO_voidActivePinInPllUpResistor>
	DIO_voidActivePinInPllUpResistor(KPD_ROW2_PORT,KPD_ROW2_PIN);
    283c:	82 e0       	ldi	r24, 0x02	; 2
    283e:	65 e0       	ldi	r22, 0x05	; 5
    2840:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <DIO_voidActivePinInPllUpResistor>
	DIO_voidActivePinInPllUpResistor(KPD_ROW3_PORT,KPD_ROW3_PIN);
    2844:	82 e0       	ldi	r24, 0x02	; 2
    2846:	66 e0       	ldi	r22, 0x06	; 6
    2848:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <DIO_voidActivePinInPllUpResistor>

	//COLUMN OUTPUT
	DIO_voidSetPinDirection(KPD_COL0_PORT,KPD_COL0_PIN,DIO_PIN_OUTPUT);
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	64 e0       	ldi	r22, 0x04	; 4
    2850:	41 e0       	ldi	r20, 0x01	; 1
    2852:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_COL1_PORT,KPD_COL1_PIN,DIO_PIN_OUTPUT);
    2856:	81 e0       	ldi	r24, 0x01	; 1
    2858:	65 e0       	ldi	r22, 0x05	; 5
    285a:	41 e0       	ldi	r20, 0x01	; 1
    285c:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_COL2_PORT,KPD_COL2_PIN,DIO_PIN_OUTPUT);
    2860:	81 e0       	ldi	r24, 0x01	; 1
    2862:	66 e0       	ldi	r22, 0x06	; 6
    2864:	41 e0       	ldi	r20, 0x01	; 1
    2866:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_COL3_PORT,KPD_COL3_PIN,DIO_PIN_OUTPUT);
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	67 e0       	ldi	r22, 0x07	; 7
    286e:	41 e0       	ldi	r20, 0x01	; 1
    2870:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>

	//COLUMN HIGH
	DIO_voidSetPinValue(KPD_COL0_PORT,KPD_COL0_PIN,DIO_PIN_HIGH);
    2874:	81 e0       	ldi	r24, 0x01	; 1
    2876:	64 e0       	ldi	r22, 0x04	; 4
    2878:	41 e0       	ldi	r20, 0x01	; 1
    287a:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_COL1_PORT,KPD_COL1_PIN,DIO_PIN_HIGH);
    287e:	81 e0       	ldi	r24, 0x01	; 1
    2880:	65 e0       	ldi	r22, 0x05	; 5
    2882:	41 e0       	ldi	r20, 0x01	; 1
    2884:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_COL2_PORT,KPD_COL2_PIN,DIO_PIN_HIGH);
    2888:	81 e0       	ldi	r24, 0x01	; 1
    288a:	66 e0       	ldi	r22, 0x06	; 6
    288c:	41 e0       	ldi	r20, 0x01	; 1
    288e:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_COL3_PORT,KPD_COL3_PIN,DIO_PIN_HIGH);
    2892:	81 e0       	ldi	r24, 0x01	; 1
    2894:	67 e0       	ldi	r22, 0x07	; 7
    2896:	41 e0       	ldi	r20, 0x01	; 1
    2898:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>

}
    289c:	cf 91       	pop	r28
    289e:	df 91       	pop	r29
    28a0:	08 95       	ret

000028a2 <KPD_voidGetValue>:
void KPD_voidGetValue(u8* copy_Pu8ReturnedValue){
    28a2:	df 93       	push	r29
    28a4:	cf 93       	push	r28
    28a6:	cd b7       	in	r28, 0x3d	; 61
    28a8:	de b7       	in	r29, 0x3e	; 62
    28aa:	aa 97       	sbiw	r28, 0x2a	; 42
    28ac:	0f b6       	in	r0, 0x3f	; 63
    28ae:	f8 94       	cli
    28b0:	de bf       	out	0x3e, r29	; 62
    28b2:	0f be       	out	0x3f, r0	; 63
    28b4:	cd bf       	out	0x3d, r28	; 61
    28b6:	9d a3       	std	Y+37, r25	; 0x25
    28b8:	8c a3       	std	Y+36, r24	; 0x24
	if(copy_Pu8ReturnedValue != NULL){
    28ba:	8c a1       	ldd	r24, Y+36	; 0x24
    28bc:	9d a1       	ldd	r25, Y+37	; 0x25
    28be:	00 97       	sbiw	r24, 0x00	; 0
    28c0:	09 f4       	brne	.+2      	; 0x28c4 <KPD_voidGetValue+0x22>
    28c2:	d9 c0       	rjmp	.+434    	; 0x2a76 <KPD_voidGetValue+0x1d4>
		* copy_Pu8ReturnedValue=KPD_NOT_PRESSED;//keypad nor pressed
    28c4:	ec a1       	ldd	r30, Y+36	; 0x24
    28c6:	fd a1       	ldd	r31, Y+37	; 0x25
    28c8:	8f ef       	ldi	r24, 0xFF	; 255
    28ca:	80 83       	st	Z, r24

		u8 local_u8ColsCounter;
		u8 local_u8RowsCounter;
		u8 local_u8PinState;

		u8 local_u8ColsPorts[4] ={KPD_COL0_PORT ,KPD_COL1_PORT ,KPD_COL2_PORT ,KPD_COL3_PORT};
    28cc:	81 e0       	ldi	r24, 0x01	; 1
    28ce:	8c 83       	std	Y+4, r24	; 0x04
    28d0:	81 e0       	ldi	r24, 0x01	; 1
    28d2:	8d 83       	std	Y+5, r24	; 0x05
    28d4:	81 e0       	ldi	r24, 0x01	; 1
    28d6:	8e 83       	std	Y+6, r24	; 0x06
    28d8:	81 e0       	ldi	r24, 0x01	; 1
    28da:	8f 83       	std	Y+7, r24	; 0x07
		u8 local_u8ColsPins[4] ={KPD_COL0_PIN ,KPD_COL1_PIN ,KPD_COL2_PIN ,KPD_COL3_PIN};
    28dc:	84 e0       	ldi	r24, 0x04	; 4
    28de:	88 87       	std	Y+8, r24	; 0x08
    28e0:	85 e0       	ldi	r24, 0x05	; 5
    28e2:	89 87       	std	Y+9, r24	; 0x09
    28e4:	86 e0       	ldi	r24, 0x06	; 6
    28e6:	8a 87       	std	Y+10, r24	; 0x0a
    28e8:	87 e0       	ldi	r24, 0x07	; 7
    28ea:	8b 87       	std	Y+11, r24	; 0x0b
		u8 local_u8RowsPorts[4] ={KPD_ROW0_PORT ,KPD_ROW1_PORT ,KPD_ROW2_PORT ,KPD_ROW3_PORT};
    28ec:	82 e0       	ldi	r24, 0x02	; 2
    28ee:	8c 87       	std	Y+12, r24	; 0x0c
    28f0:	82 e0       	ldi	r24, 0x02	; 2
    28f2:	8d 87       	std	Y+13, r24	; 0x0d
    28f4:	82 e0       	ldi	r24, 0x02	; 2
    28f6:	8e 87       	std	Y+14, r24	; 0x0e
    28f8:	82 e0       	ldi	r24, 0x02	; 2
    28fa:	8f 87       	std	Y+15, r24	; 0x0f
		u8 local_u8RowsPins[4] ={KPD_ROW0_PIN ,KPD_ROW1_PIN ,KPD_ROW2_PIN ,KPD_ROW3_PIN};
    28fc:	83 e0       	ldi	r24, 0x03	; 3
    28fe:	88 8b       	std	Y+16, r24	; 0x10
    2900:	84 e0       	ldi	r24, 0x04	; 4
    2902:	89 8b       	std	Y+17, r24	; 0x11
    2904:	85 e0       	ldi	r24, 0x05	; 5
    2906:	8a 8b       	std	Y+18, r24	; 0x12
    2908:	86 e0       	ldi	r24, 0x06	; 6
    290a:	8b 8b       	std	Y+19, r24	; 0x13
		u8 local_u8KpdChars[4][4]=KPD_KEYS;
    290c:	ce 01       	movw	r24, r28
    290e:	44 96       	adiw	r24, 0x14	; 20
    2910:	9f a3       	std	Y+39, r25	; 0x27
    2912:	8e a3       	std	Y+38, r24	; 0x26
    2914:	e8 e7       	ldi	r30, 0x78	; 120
    2916:	f2 e0       	ldi	r31, 0x02	; 2
    2918:	f9 a7       	std	Y+41, r31	; 0x29
    291a:	e8 a7       	std	Y+40, r30	; 0x28
    291c:	f0 e1       	ldi	r31, 0x10	; 16
    291e:	fa a7       	std	Y+42, r31	; 0x2a
    2920:	e8 a5       	ldd	r30, Y+40	; 0x28
    2922:	f9 a5       	ldd	r31, Y+41	; 0x29
    2924:	00 80       	ld	r0, Z
    2926:	88 a5       	ldd	r24, Y+40	; 0x28
    2928:	99 a5       	ldd	r25, Y+41	; 0x29
    292a:	01 96       	adiw	r24, 0x01	; 1
    292c:	99 a7       	std	Y+41, r25	; 0x29
    292e:	88 a7       	std	Y+40, r24	; 0x28
    2930:	ee a1       	ldd	r30, Y+38	; 0x26
    2932:	ff a1       	ldd	r31, Y+39	; 0x27
    2934:	00 82       	st	Z, r0
    2936:	8e a1       	ldd	r24, Y+38	; 0x26
    2938:	9f a1       	ldd	r25, Y+39	; 0x27
    293a:	01 96       	adiw	r24, 0x01	; 1
    293c:	9f a3       	std	Y+39, r25	; 0x27
    293e:	8e a3       	std	Y+38, r24	; 0x26
    2940:	9a a5       	ldd	r25, Y+42	; 0x2a
    2942:	91 50       	subi	r25, 0x01	; 1
    2944:	9a a7       	std	Y+42, r25	; 0x2a
    2946:	ea a5       	ldd	r30, Y+42	; 0x2a
    2948:	ee 23       	and	r30, r30
    294a:	51 f7       	brne	.-44     	; 0x2920 <KPD_voidGetValue+0x7e>

		for(local_u8ColsCounter=0 ; local_u8ColsCounter<4 ;local_u8ColsCounter++)
    294c:	1a 82       	std	Y+2, r1	; 0x02
    294e:	8f c0       	rjmp	.+286    	; 0x2a6e <KPD_voidGetValue+0x1cc>
		{
			DIO_voidSetPinValue(local_u8ColsPorts[local_u8ColsCounter],local_u8ColsPins[local_u8ColsCounter],DIO_PIN_LOW);
    2950:	8a 81       	ldd	r24, Y+2	; 0x02
    2952:	28 2f       	mov	r18, r24
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	ce 01       	movw	r24, r28
    2958:	04 96       	adiw	r24, 0x04	; 4
    295a:	fc 01       	movw	r30, r24
    295c:	e2 0f       	add	r30, r18
    295e:	f3 1f       	adc	r31, r19
    2960:	40 81       	ld	r20, Z
    2962:	8a 81       	ldd	r24, Y+2	; 0x02
    2964:	28 2f       	mov	r18, r24
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	ce 01       	movw	r24, r28
    296a:	08 96       	adiw	r24, 0x08	; 8
    296c:	fc 01       	movw	r30, r24
    296e:	e2 0f       	add	r30, r18
    2970:	f3 1f       	adc	r31, r19
    2972:	90 81       	ld	r25, Z
    2974:	84 2f       	mov	r24, r20
    2976:	69 2f       	mov	r22, r25
    2978:	40 e0       	ldi	r20, 0x00	; 0
    297a:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>

			for(local_u8RowsCounter=0 ; local_u8RowsCounter<4 ;local_u8RowsCounter++){
    297e:	19 82       	std	Y+1, r1	; 0x01
    2980:	55 c0       	rjmp	.+170    	; 0x2a2c <KPD_voidGetValue+0x18a>

				DIO_voidGetPinValue(local_u8RowsPorts[local_u8RowsCounter],local_u8RowsPins[local_u8RowsCounter],&local_u8PinState);
    2982:	89 81       	ldd	r24, Y+1	; 0x01
    2984:	28 2f       	mov	r18, r24
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	ce 01       	movw	r24, r28
    298a:	0c 96       	adiw	r24, 0x0c	; 12
    298c:	fc 01       	movw	r30, r24
    298e:	e2 0f       	add	r30, r18
    2990:	f3 1f       	adc	r31, r19
    2992:	40 81       	ld	r20, Z
    2994:	89 81       	ldd	r24, Y+1	; 0x01
    2996:	28 2f       	mov	r18, r24
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	ce 01       	movw	r24, r28
    299c:	40 96       	adiw	r24, 0x10	; 16
    299e:	fc 01       	movw	r30, r24
    29a0:	e2 0f       	add	r30, r18
    29a2:	f3 1f       	adc	r31, r19
    29a4:	90 81       	ld	r25, Z
    29a6:	9e 01       	movw	r18, r28
    29a8:	2d 5f       	subi	r18, 0xFD	; 253
    29aa:	3f 4f       	sbci	r19, 0xFF	; 255
    29ac:	84 2f       	mov	r24, r20
    29ae:	69 2f       	mov	r22, r25
    29b0:	a9 01       	movw	r20, r18
    29b2:	0e 94 cc 0b 	call	0x1798	; 0x1798 <DIO_voidGetPinValue>

				if(local_u8PinState==0){
    29b6:	8b 81       	ldd	r24, Y+3	; 0x03
    29b8:	88 23       	and	r24, r24
    29ba:	a9 f5       	brne	.+106    	; 0x2a26 <KPD_voidGetValue+0x184>
    29bc:	1a c0       	rjmp	.+52     	; 0x29f2 <KPD_voidGetValue+0x150>

					while(local_u8PinState==0){
					DIO_voidGetPinValue(local_u8RowsPorts[local_u8RowsCounter],local_u8RowsPins[local_u8RowsCounter],&local_u8PinState);
    29be:	89 81       	ldd	r24, Y+1	; 0x01
    29c0:	28 2f       	mov	r18, r24
    29c2:	30 e0       	ldi	r19, 0x00	; 0
    29c4:	ce 01       	movw	r24, r28
    29c6:	0c 96       	adiw	r24, 0x0c	; 12
    29c8:	fc 01       	movw	r30, r24
    29ca:	e2 0f       	add	r30, r18
    29cc:	f3 1f       	adc	r31, r19
    29ce:	40 81       	ld	r20, Z
    29d0:	89 81       	ldd	r24, Y+1	; 0x01
    29d2:	28 2f       	mov	r18, r24
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	ce 01       	movw	r24, r28
    29d8:	40 96       	adiw	r24, 0x10	; 16
    29da:	fc 01       	movw	r30, r24
    29dc:	e2 0f       	add	r30, r18
    29de:	f3 1f       	adc	r31, r19
    29e0:	90 81       	ld	r25, Z
    29e2:	9e 01       	movw	r18, r28
    29e4:	2d 5f       	subi	r18, 0xFD	; 253
    29e6:	3f 4f       	sbci	r19, 0xFF	; 255
    29e8:	84 2f       	mov	r24, r20
    29ea:	69 2f       	mov	r22, r25
    29ec:	a9 01       	movw	r20, r18
    29ee:	0e 94 cc 0b 	call	0x1798	; 0x1798 <DIO_voidGetPinValue>

				DIO_voidGetPinValue(local_u8RowsPorts[local_u8RowsCounter],local_u8RowsPins[local_u8RowsCounter],&local_u8PinState);

				if(local_u8PinState==0){

					while(local_u8PinState==0){
    29f2:	8b 81       	ldd	r24, Y+3	; 0x03
    29f4:	88 23       	and	r24, r24
    29f6:	19 f3       	breq	.-58     	; 0x29be <KPD_voidGetValue+0x11c>
					DIO_voidGetPinValue(local_u8RowsPorts[local_u8RowsCounter],local_u8RowsPins[local_u8RowsCounter],&local_u8PinState);
							 }

						*copy_Pu8ReturnedValue=local_u8KpdChars[local_u8RowsCounter][local_u8ColsCounter];
    29f8:	89 81       	ldd	r24, Y+1	; 0x01
    29fa:	28 2f       	mov	r18, r24
    29fc:	30 e0       	ldi	r19, 0x00	; 0
    29fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2a00:	48 2f       	mov	r20, r24
    2a02:	50 e0       	ldi	r21, 0x00	; 0
    2a04:	22 0f       	add	r18, r18
    2a06:	33 1f       	adc	r19, r19
    2a08:	22 0f       	add	r18, r18
    2a0a:	33 1f       	adc	r19, r19
    2a0c:	ce 01       	movw	r24, r28
    2a0e:	01 96       	adiw	r24, 0x01	; 1
    2a10:	82 0f       	add	r24, r18
    2a12:	93 1f       	adc	r25, r19
    2a14:	84 0f       	add	r24, r20
    2a16:	95 1f       	adc	r25, r21
    2a18:	fc 01       	movw	r30, r24
    2a1a:	73 96       	adiw	r30, 0x13	; 19
    2a1c:	80 81       	ld	r24, Z
    2a1e:	ec a1       	ldd	r30, Y+36	; 0x24
    2a20:	fd a1       	ldd	r31, Y+37	; 0x25
    2a22:	80 83       	st	Z, r24
    2a24:	07 c0       	rjmp	.+14     	; 0x2a34 <KPD_voidGetValue+0x192>

		for(local_u8ColsCounter=0 ; local_u8ColsCounter<4 ;local_u8ColsCounter++)
		{
			DIO_voidSetPinValue(local_u8ColsPorts[local_u8ColsCounter],local_u8ColsPins[local_u8ColsCounter],DIO_PIN_LOW);

			for(local_u8RowsCounter=0 ; local_u8RowsCounter<4 ;local_u8RowsCounter++){
    2a26:	89 81       	ldd	r24, Y+1	; 0x01
    2a28:	8f 5f       	subi	r24, 0xFF	; 255
    2a2a:	89 83       	std	Y+1, r24	; 0x01
    2a2c:	89 81       	ldd	r24, Y+1	; 0x01
    2a2e:	84 30       	cpi	r24, 0x04	; 4
    2a30:	08 f4       	brcc	.+2      	; 0x2a34 <KPD_voidGetValue+0x192>
    2a32:	a7 cf       	rjmp	.-178    	; 0x2982 <KPD_voidGetValue+0xe0>
						*copy_Pu8ReturnedValue=local_u8KpdChars[local_u8RowsCounter][local_u8ColsCounter];
							break;
					}
				}

			if(local_u8RowsCounter<4)  //34an atl3 mn al loop al kebera fe 7alh al break al ola
    2a34:	89 81       	ldd	r24, Y+1	; 0x01
    2a36:	84 30       	cpi	r24, 0x04	; 4
    2a38:	f0 f0       	brcs	.+60     	; 0x2a76 <KPD_voidGetValue+0x1d4>
			{
				break;
			}
			DIO_voidSetPinValue(local_u8ColsPorts[local_u8ColsCounter],local_u8ColsPins[local_u8ColsCounter],DIO_PIN_HIGH);
    2a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3c:	28 2f       	mov	r18, r24
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	ce 01       	movw	r24, r28
    2a42:	04 96       	adiw	r24, 0x04	; 4
    2a44:	fc 01       	movw	r30, r24
    2a46:	e2 0f       	add	r30, r18
    2a48:	f3 1f       	adc	r31, r19
    2a4a:	40 81       	ld	r20, Z
    2a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a4e:	28 2f       	mov	r18, r24
    2a50:	30 e0       	ldi	r19, 0x00	; 0
    2a52:	ce 01       	movw	r24, r28
    2a54:	08 96       	adiw	r24, 0x08	; 8
    2a56:	fc 01       	movw	r30, r24
    2a58:	e2 0f       	add	r30, r18
    2a5a:	f3 1f       	adc	r31, r19
    2a5c:	90 81       	ld	r25, Z
    2a5e:	84 2f       	mov	r24, r20
    2a60:	69 2f       	mov	r22, r25
    2a62:	41 e0       	ldi	r20, 0x01	; 1
    2a64:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
		u8 local_u8ColsPins[4] ={KPD_COL0_PIN ,KPD_COL1_PIN ,KPD_COL2_PIN ,KPD_COL3_PIN};
		u8 local_u8RowsPorts[4] ={KPD_ROW0_PORT ,KPD_ROW1_PORT ,KPD_ROW2_PORT ,KPD_ROW3_PORT};
		u8 local_u8RowsPins[4] ={KPD_ROW0_PIN ,KPD_ROW1_PIN ,KPD_ROW2_PIN ,KPD_ROW3_PIN};
		u8 local_u8KpdChars[4][4]=KPD_KEYS;

		for(local_u8ColsCounter=0 ; local_u8ColsCounter<4 ;local_u8ColsCounter++)
    2a68:	8a 81       	ldd	r24, Y+2	; 0x02
    2a6a:	8f 5f       	subi	r24, 0xFF	; 255
    2a6c:	8a 83       	std	Y+2, r24	; 0x02
    2a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a70:	84 30       	cpi	r24, 0x04	; 4
    2a72:	08 f4       	brcc	.+2      	; 0x2a76 <KPD_voidGetValue+0x1d4>
    2a74:	6d cf       	rjmp	.-294    	; 0x2950 <KPD_voidGetValue+0xae>
	}
	else{
		//return error
	}

}
    2a76:	aa 96       	adiw	r28, 0x2a	; 42
    2a78:	0f b6       	in	r0, 0x3f	; 63
    2a7a:	f8 94       	cli
    2a7c:	de bf       	out	0x3e, r29	; 62
    2a7e:	0f be       	out	0x3f, r0	; 63
    2a80:	cd bf       	out	0x3d, r28	; 61
    2a82:	cf 91       	pop	r28
    2a84:	df 91       	pop	r29
    2a86:	08 95       	ret

00002a88 <LCD_voidInit>:
#include"DIO_interface.h"
#include"LCD_interface.h"
#include"LCD_config.h"
#include"LCD_private.h"

void LCD_voidInit(){
    2a88:	df 93       	push	r29
    2a8a:	cf 93       	push	r28
    2a8c:	cd b7       	in	r28, 0x3d	; 61
    2a8e:	de b7       	in	r29, 0x3e	; 62
    2a90:	e8 97       	sbiw	r28, 0x38	; 56
    2a92:	0f b6       	in	r0, 0x3f	; 63
    2a94:	f8 94       	cli
    2a96:	de bf       	out	0x3e, r29	; 62
    2a98:	0f be       	out	0x3f, r0	; 63
    2a9a:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinDirection(LCD_D4_PORT,LCD_D4_PIN,DIO_PIN_OUTPUT);
    2a9c:	80 e0       	ldi	r24, 0x00	; 0
    2a9e:	64 e0       	ldi	r22, 0x04	; 4
    2aa0:	41 e0       	ldi	r20, 0x01	; 1
    2aa2:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_D5_PORT,LCD_D5_PIN,DIO_PIN_OUTPUT);
    2aa6:	80 e0       	ldi	r24, 0x00	; 0
    2aa8:	65 e0       	ldi	r22, 0x05	; 5
    2aaa:	41 e0       	ldi	r20, 0x01	; 1
    2aac:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_D6_PORT,LCD_D6_PIN,DIO_PIN_OUTPUT);
    2ab0:	80 e0       	ldi	r24, 0x00	; 0
    2ab2:	66 e0       	ldi	r22, 0x06	; 6
    2ab4:	41 e0       	ldi	r20, 0x01	; 1
    2ab6:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_D7_PORT,LCD_D7_PIN,DIO_PIN_OUTPUT);
    2aba:	80 e0       	ldi	r24, 0x00	; 0
    2abc:	67 e0       	ldi	r22, 0x07	; 7
    2abe:	41 e0       	ldi	r20, 0x01	; 1
    2ac0:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_OUTPUT);
    2ac4:	80 e0       	ldi	r24, 0x00	; 0
    2ac6:	62 e0       	ldi	r22, 0x02	; 2
    2ac8:	41 e0       	ldi	r20, 0x01	; 1
    2aca:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_OUTPUT);
    2ace:	81 e0       	ldi	r24, 0x01	; 1
    2ad0:	62 e0       	ldi	r22, 0x02	; 2
    2ad2:	41 e0       	ldi	r20, 0x01	; 1
    2ad4:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_OUTPUT);
    2ad8:	81 e0       	ldi	r24, 0x01	; 1
    2ada:	61 e0       	ldi	r22, 0x01	; 1
    2adc:	41 e0       	ldi	r20, 0x01	; 1
    2ade:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>
    2ae2:	80 e0       	ldi	r24, 0x00	; 0
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	a0 e2       	ldi	r26, 0x20	; 32
    2ae8:	b2 e4       	ldi	r27, 0x42	; 66
    2aea:	8d ab       	std	Y+53, r24	; 0x35
    2aec:	9e ab       	std	Y+54, r25	; 0x36
    2aee:	af ab       	std	Y+55, r26	; 0x37
    2af0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2af2:	6d a9       	ldd	r22, Y+53	; 0x35
    2af4:	7e a9       	ldd	r23, Y+54	; 0x36
    2af6:	8f a9       	ldd	r24, Y+55	; 0x37
    2af8:	98 ad       	ldd	r25, Y+56	; 0x38
    2afa:	20 e0       	ldi	r18, 0x00	; 0
    2afc:	30 e0       	ldi	r19, 0x00	; 0
    2afe:	4a e7       	ldi	r20, 0x7A	; 122
    2b00:	55 e4       	ldi	r21, 0x45	; 69
    2b02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b06:	dc 01       	movw	r26, r24
    2b08:	cb 01       	movw	r24, r22
    2b0a:	89 ab       	std	Y+49, r24	; 0x31
    2b0c:	9a ab       	std	Y+50, r25	; 0x32
    2b0e:	ab ab       	std	Y+51, r26	; 0x33
    2b10:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2b12:	69 a9       	ldd	r22, Y+49	; 0x31
    2b14:	7a a9       	ldd	r23, Y+50	; 0x32
    2b16:	8b a9       	ldd	r24, Y+51	; 0x33
    2b18:	9c a9       	ldd	r25, Y+52	; 0x34
    2b1a:	20 e0       	ldi	r18, 0x00	; 0
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	40 e8       	ldi	r20, 0x80	; 128
    2b20:	5f e3       	ldi	r21, 0x3F	; 63
    2b22:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b26:	88 23       	and	r24, r24
    2b28:	2c f4       	brge	.+10     	; 0x2b34 <LCD_voidInit+0xac>
		__ticks = 1;
    2b2a:	81 e0       	ldi	r24, 0x01	; 1
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	98 ab       	std	Y+48, r25	; 0x30
    2b30:	8f a7       	std	Y+47, r24	; 0x2f
    2b32:	3f c0       	rjmp	.+126    	; 0x2bb2 <LCD_voidInit+0x12a>
	else if (__tmp > 65535)
    2b34:	69 a9       	ldd	r22, Y+49	; 0x31
    2b36:	7a a9       	ldd	r23, Y+50	; 0x32
    2b38:	8b a9       	ldd	r24, Y+51	; 0x33
    2b3a:	9c a9       	ldd	r25, Y+52	; 0x34
    2b3c:	20 e0       	ldi	r18, 0x00	; 0
    2b3e:	3f ef       	ldi	r19, 0xFF	; 255
    2b40:	4f e7       	ldi	r20, 0x7F	; 127
    2b42:	57 e4       	ldi	r21, 0x47	; 71
    2b44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b48:	18 16       	cp	r1, r24
    2b4a:	4c f5       	brge	.+82     	; 0x2b9e <LCD_voidInit+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b4c:	6d a9       	ldd	r22, Y+53	; 0x35
    2b4e:	7e a9       	ldd	r23, Y+54	; 0x36
    2b50:	8f a9       	ldd	r24, Y+55	; 0x37
    2b52:	98 ad       	ldd	r25, Y+56	; 0x38
    2b54:	20 e0       	ldi	r18, 0x00	; 0
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	40 e2       	ldi	r20, 0x20	; 32
    2b5a:	51 e4       	ldi	r21, 0x41	; 65
    2b5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b60:	dc 01       	movw	r26, r24
    2b62:	cb 01       	movw	r24, r22
    2b64:	bc 01       	movw	r22, r24
    2b66:	cd 01       	movw	r24, r26
    2b68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b6c:	dc 01       	movw	r26, r24
    2b6e:	cb 01       	movw	r24, r22
    2b70:	98 ab       	std	Y+48, r25	; 0x30
    2b72:	8f a7       	std	Y+47, r24	; 0x2f
    2b74:	0f c0       	rjmp	.+30     	; 0x2b94 <LCD_voidInit+0x10c>
    2b76:	80 e9       	ldi	r24, 0x90	; 144
    2b78:	91 e0       	ldi	r25, 0x01	; 1
    2b7a:	9e a7       	std	Y+46, r25	; 0x2e
    2b7c:	8d a7       	std	Y+45, r24	; 0x2d
    2b7e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b80:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b82:	01 97       	sbiw	r24, 0x01	; 1
    2b84:	f1 f7       	brne	.-4      	; 0x2b82 <LCD_voidInit+0xfa>
    2b86:	9e a7       	std	Y+46, r25	; 0x2e
    2b88:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b8c:	98 a9       	ldd	r25, Y+48	; 0x30
    2b8e:	01 97       	sbiw	r24, 0x01	; 1
    2b90:	98 ab       	std	Y+48, r25	; 0x30
    2b92:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b94:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b96:	98 a9       	ldd	r25, Y+48	; 0x30
    2b98:	00 97       	sbiw	r24, 0x00	; 0
    2b9a:	69 f7       	brne	.-38     	; 0x2b76 <LCD_voidInit+0xee>
    2b9c:	14 c0       	rjmp	.+40     	; 0x2bc6 <LCD_voidInit+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b9e:	69 a9       	ldd	r22, Y+49	; 0x31
    2ba0:	7a a9       	ldd	r23, Y+50	; 0x32
    2ba2:	8b a9       	ldd	r24, Y+51	; 0x33
    2ba4:	9c a9       	ldd	r25, Y+52	; 0x34
    2ba6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2baa:	dc 01       	movw	r26, r24
    2bac:	cb 01       	movw	r24, r22
    2bae:	98 ab       	std	Y+48, r25	; 0x30
    2bb0:	8f a7       	std	Y+47, r24	; 0x2f
    2bb2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bb4:	98 a9       	ldd	r25, Y+48	; 0x30
    2bb6:	9c a7       	std	Y+44, r25	; 0x2c
    2bb8:	8b a7       	std	Y+43, r24	; 0x2b
    2bba:	8b a5       	ldd	r24, Y+43	; 0x2b
    2bbc:	9c a5       	ldd	r25, Y+44	; 0x2c
    2bbe:	01 97       	sbiw	r24, 0x01	; 1
    2bc0:	f1 f7       	brne	.-4      	; 0x2bbe <LCD_voidInit+0x136>
    2bc2:	9c a7       	std	Y+44, r25	; 0x2c
    2bc4:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(40);
	//function set
	DIO_voidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
    2bc6:	81 e0       	ldi	r24, 0x01	; 1
    2bc8:	62 e0       	ldi	r22, 0x02	; 2
    2bca:	40 e0       	ldi	r20, 0x00	; 0
    2bcc:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_RS_PORT,LCD_RS_PIN ,DIO_PIN_LOW);
    2bd0:	81 e0       	ldi	r24, 0x01	; 1
    2bd2:	61 e0       	ldi	r22, 0x01	; 1
    2bd4:	40 e0       	ldi	r20, 0x00	; 0
    2bd6:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	PRV_voidWriteHalfPort(0b0010);
    2bda:	82 e0       	ldi	r24, 0x02	; 2
    2bdc:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <PRV_voidWriteHalfPort>
	PRV_voidEnableTriggerWrite();
    2be0:	0e 94 5d 17 	call	0x2eba	; 0x2eba <PRV_voidEnableTriggerWrite>

	LCD_voidSendCommand(0b00101000);
    2be4:	88 e2       	ldi	r24, 0x28	; 40
    2be6:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_voidSendCommand>
    2bea:	80 e0       	ldi	r24, 0x00	; 0
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	a4 e3       	ldi	r26, 0x34	; 52
    2bf0:	b2 e4       	ldi	r27, 0x42	; 66
    2bf2:	8f a3       	std	Y+39, r24	; 0x27
    2bf4:	98 a7       	std	Y+40, r25	; 0x28
    2bf6:	a9 a7       	std	Y+41, r26	; 0x29
    2bf8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bfa:	6f a1       	ldd	r22, Y+39	; 0x27
    2bfc:	78 a5       	ldd	r23, Y+40	; 0x28
    2bfe:	89 a5       	ldd	r24, Y+41	; 0x29
    2c00:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c02:	20 e0       	ldi	r18, 0x00	; 0
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	4a e7       	ldi	r20, 0x7A	; 122
    2c08:	55 e4       	ldi	r21, 0x45	; 69
    2c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c0e:	dc 01       	movw	r26, r24
    2c10:	cb 01       	movw	r24, r22
    2c12:	8b a3       	std	Y+35, r24	; 0x23
    2c14:	9c a3       	std	Y+36, r25	; 0x24
    2c16:	ad a3       	std	Y+37, r26	; 0x25
    2c18:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c1a:	6b a1       	ldd	r22, Y+35	; 0x23
    2c1c:	7c a1       	ldd	r23, Y+36	; 0x24
    2c1e:	8d a1       	ldd	r24, Y+37	; 0x25
    2c20:	9e a1       	ldd	r25, Y+38	; 0x26
    2c22:	20 e0       	ldi	r18, 0x00	; 0
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	40 e8       	ldi	r20, 0x80	; 128
    2c28:	5f e3       	ldi	r21, 0x3F	; 63
    2c2a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c2e:	88 23       	and	r24, r24
    2c30:	2c f4       	brge	.+10     	; 0x2c3c <LCD_voidInit+0x1b4>
		__ticks = 1;
    2c32:	81 e0       	ldi	r24, 0x01	; 1
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	9a a3       	std	Y+34, r25	; 0x22
    2c38:	89 a3       	std	Y+33, r24	; 0x21
    2c3a:	3f c0       	rjmp	.+126    	; 0x2cba <LCD_voidInit+0x232>
	else if (__tmp > 65535)
    2c3c:	6b a1       	ldd	r22, Y+35	; 0x23
    2c3e:	7c a1       	ldd	r23, Y+36	; 0x24
    2c40:	8d a1       	ldd	r24, Y+37	; 0x25
    2c42:	9e a1       	ldd	r25, Y+38	; 0x26
    2c44:	20 e0       	ldi	r18, 0x00	; 0
    2c46:	3f ef       	ldi	r19, 0xFF	; 255
    2c48:	4f e7       	ldi	r20, 0x7F	; 127
    2c4a:	57 e4       	ldi	r21, 0x47	; 71
    2c4c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c50:	18 16       	cp	r1, r24
    2c52:	4c f5       	brge	.+82     	; 0x2ca6 <LCD_voidInit+0x21e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c54:	6f a1       	ldd	r22, Y+39	; 0x27
    2c56:	78 a5       	ldd	r23, Y+40	; 0x28
    2c58:	89 a5       	ldd	r24, Y+41	; 0x29
    2c5a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	40 e2       	ldi	r20, 0x20	; 32
    2c62:	51 e4       	ldi	r21, 0x41	; 65
    2c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c68:	dc 01       	movw	r26, r24
    2c6a:	cb 01       	movw	r24, r22
    2c6c:	bc 01       	movw	r22, r24
    2c6e:	cd 01       	movw	r24, r26
    2c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	9a a3       	std	Y+34, r25	; 0x22
    2c7a:	89 a3       	std	Y+33, r24	; 0x21
    2c7c:	0f c0       	rjmp	.+30     	; 0x2c9c <LCD_voidInit+0x214>
    2c7e:	80 e9       	ldi	r24, 0x90	; 144
    2c80:	91 e0       	ldi	r25, 0x01	; 1
    2c82:	98 a3       	std	Y+32, r25	; 0x20
    2c84:	8f 8f       	std	Y+31, r24	; 0x1f
    2c86:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c88:	98 a1       	ldd	r25, Y+32	; 0x20
    2c8a:	01 97       	sbiw	r24, 0x01	; 1
    2c8c:	f1 f7       	brne	.-4      	; 0x2c8a <LCD_voidInit+0x202>
    2c8e:	98 a3       	std	Y+32, r25	; 0x20
    2c90:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c92:	89 a1       	ldd	r24, Y+33	; 0x21
    2c94:	9a a1       	ldd	r25, Y+34	; 0x22
    2c96:	01 97       	sbiw	r24, 0x01	; 1
    2c98:	9a a3       	std	Y+34, r25	; 0x22
    2c9a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c9c:	89 a1       	ldd	r24, Y+33	; 0x21
    2c9e:	9a a1       	ldd	r25, Y+34	; 0x22
    2ca0:	00 97       	sbiw	r24, 0x00	; 0
    2ca2:	69 f7       	brne	.-38     	; 0x2c7e <LCD_voidInit+0x1f6>
    2ca4:	14 c0       	rjmp	.+40     	; 0x2cce <LCD_voidInit+0x246>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ca6:	6b a1       	ldd	r22, Y+35	; 0x23
    2ca8:	7c a1       	ldd	r23, Y+36	; 0x24
    2caa:	8d a1       	ldd	r24, Y+37	; 0x25
    2cac:	9e a1       	ldd	r25, Y+38	; 0x26
    2cae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb2:	dc 01       	movw	r26, r24
    2cb4:	cb 01       	movw	r24, r22
    2cb6:	9a a3       	std	Y+34, r25	; 0x22
    2cb8:	89 a3       	std	Y+33, r24	; 0x21
    2cba:	89 a1       	ldd	r24, Y+33	; 0x21
    2cbc:	9a a1       	ldd	r25, Y+34	; 0x22
    2cbe:	9e 8f       	std	Y+30, r25	; 0x1e
    2cc0:	8d 8f       	std	Y+29, r24	; 0x1d
    2cc2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cc4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2cc6:	01 97       	sbiw	r24, 0x01	; 1
    2cc8:	f1 f7       	brne	.-4      	; 0x2cc6 <LCD_voidInit+0x23e>
    2cca:	9e 8f       	std	Y+30, r25	; 0x1e
    2ccc:	8d 8f       	std	Y+29, r24	; 0x1d


	_delay_ms(45);
	//display on off
	LCD_voidSendCommand(0b00001111);
    2cce:	8f e0       	ldi	r24, 0x0F	; 15
    2cd0:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_voidSendCommand>
    2cd4:	80 e0       	ldi	r24, 0x00	; 0
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	a4 e3       	ldi	r26, 0x34	; 52
    2cda:	b2 e4       	ldi	r27, 0x42	; 66
    2cdc:	89 8f       	std	Y+25, r24	; 0x19
    2cde:	9a 8f       	std	Y+26, r25	; 0x1a
    2ce0:	ab 8f       	std	Y+27, r26	; 0x1b
    2ce2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ce4:	69 8d       	ldd	r22, Y+25	; 0x19
    2ce6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ce8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cec:	20 e0       	ldi	r18, 0x00	; 0
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	4a e7       	ldi	r20, 0x7A	; 122
    2cf2:	55 e4       	ldi	r21, 0x45	; 69
    2cf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf8:	dc 01       	movw	r26, r24
    2cfa:	cb 01       	movw	r24, r22
    2cfc:	8d 8b       	std	Y+21, r24	; 0x15
    2cfe:	9e 8b       	std	Y+22, r25	; 0x16
    2d00:	af 8b       	std	Y+23, r26	; 0x17
    2d02:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d04:	6d 89       	ldd	r22, Y+21	; 0x15
    2d06:	7e 89       	ldd	r23, Y+22	; 0x16
    2d08:	8f 89       	ldd	r24, Y+23	; 0x17
    2d0a:	98 8d       	ldd	r25, Y+24	; 0x18
    2d0c:	20 e0       	ldi	r18, 0x00	; 0
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	40 e8       	ldi	r20, 0x80	; 128
    2d12:	5f e3       	ldi	r21, 0x3F	; 63
    2d14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d18:	88 23       	and	r24, r24
    2d1a:	2c f4       	brge	.+10     	; 0x2d26 <LCD_voidInit+0x29e>
		__ticks = 1;
    2d1c:	81 e0       	ldi	r24, 0x01	; 1
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	9c 8b       	std	Y+20, r25	; 0x14
    2d22:	8b 8b       	std	Y+19, r24	; 0x13
    2d24:	3f c0       	rjmp	.+126    	; 0x2da4 <LCD_voidInit+0x31c>
	else if (__tmp > 65535)
    2d26:	6d 89       	ldd	r22, Y+21	; 0x15
    2d28:	7e 89       	ldd	r23, Y+22	; 0x16
    2d2a:	8f 89       	ldd	r24, Y+23	; 0x17
    2d2c:	98 8d       	ldd	r25, Y+24	; 0x18
    2d2e:	20 e0       	ldi	r18, 0x00	; 0
    2d30:	3f ef       	ldi	r19, 0xFF	; 255
    2d32:	4f e7       	ldi	r20, 0x7F	; 127
    2d34:	57 e4       	ldi	r21, 0x47	; 71
    2d36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d3a:	18 16       	cp	r1, r24
    2d3c:	4c f5       	brge	.+82     	; 0x2d90 <LCD_voidInit+0x308>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d3e:	69 8d       	ldd	r22, Y+25	; 0x19
    2d40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d46:	20 e0       	ldi	r18, 0x00	; 0
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	40 e2       	ldi	r20, 0x20	; 32
    2d4c:	51 e4       	ldi	r21, 0x41	; 65
    2d4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d52:	dc 01       	movw	r26, r24
    2d54:	cb 01       	movw	r24, r22
    2d56:	bc 01       	movw	r22, r24
    2d58:	cd 01       	movw	r24, r26
    2d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d5e:	dc 01       	movw	r26, r24
    2d60:	cb 01       	movw	r24, r22
    2d62:	9c 8b       	std	Y+20, r25	; 0x14
    2d64:	8b 8b       	std	Y+19, r24	; 0x13
    2d66:	0f c0       	rjmp	.+30     	; 0x2d86 <LCD_voidInit+0x2fe>
    2d68:	80 e9       	ldi	r24, 0x90	; 144
    2d6a:	91 e0       	ldi	r25, 0x01	; 1
    2d6c:	9a 8b       	std	Y+18, r25	; 0x12
    2d6e:	89 8b       	std	Y+17, r24	; 0x11
    2d70:	89 89       	ldd	r24, Y+17	; 0x11
    2d72:	9a 89       	ldd	r25, Y+18	; 0x12
    2d74:	01 97       	sbiw	r24, 0x01	; 1
    2d76:	f1 f7       	brne	.-4      	; 0x2d74 <LCD_voidInit+0x2ec>
    2d78:	9a 8b       	std	Y+18, r25	; 0x12
    2d7a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d7c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d7e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d80:	01 97       	sbiw	r24, 0x01	; 1
    2d82:	9c 8b       	std	Y+20, r25	; 0x14
    2d84:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d86:	8b 89       	ldd	r24, Y+19	; 0x13
    2d88:	9c 89       	ldd	r25, Y+20	; 0x14
    2d8a:	00 97       	sbiw	r24, 0x00	; 0
    2d8c:	69 f7       	brne	.-38     	; 0x2d68 <LCD_voidInit+0x2e0>
    2d8e:	14 c0       	rjmp	.+40     	; 0x2db8 <LCD_voidInit+0x330>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d90:	6d 89       	ldd	r22, Y+21	; 0x15
    2d92:	7e 89       	ldd	r23, Y+22	; 0x16
    2d94:	8f 89       	ldd	r24, Y+23	; 0x17
    2d96:	98 8d       	ldd	r25, Y+24	; 0x18
    2d98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d9c:	dc 01       	movw	r26, r24
    2d9e:	cb 01       	movw	r24, r22
    2da0:	9c 8b       	std	Y+20, r25	; 0x14
    2da2:	8b 8b       	std	Y+19, r24	; 0x13
    2da4:	8b 89       	ldd	r24, Y+19	; 0x13
    2da6:	9c 89       	ldd	r25, Y+20	; 0x14
    2da8:	98 8b       	std	Y+16, r25	; 0x10
    2daa:	8f 87       	std	Y+15, r24	; 0x0f
    2dac:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dae:	98 89       	ldd	r25, Y+16	; 0x10
    2db0:	01 97       	sbiw	r24, 0x01	; 1
    2db2:	f1 f7       	brne	.-4      	; 0x2db0 <LCD_voidInit+0x328>
    2db4:	98 8b       	std	Y+16, r25	; 0x10
    2db6:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(45);
	//display clear
	LCD_voidSendCommand(0b00000001);
    2db8:	81 e0       	ldi	r24, 0x01	; 1
    2dba:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_voidSendCommand>
    2dbe:	80 e0       	ldi	r24, 0x00	; 0
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	a0 e0       	ldi	r26, 0x00	; 0
    2dc4:	b0 e4       	ldi	r27, 0x40	; 64
    2dc6:	8b 87       	std	Y+11, r24	; 0x0b
    2dc8:	9c 87       	std	Y+12, r25	; 0x0c
    2dca:	ad 87       	std	Y+13, r26	; 0x0d
    2dcc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dce:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dd6:	20 e0       	ldi	r18, 0x00	; 0
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	4a e7       	ldi	r20, 0x7A	; 122
    2ddc:	55 e4       	ldi	r21, 0x45	; 69
    2dde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de2:	dc 01       	movw	r26, r24
    2de4:	cb 01       	movw	r24, r22
    2de6:	8f 83       	std	Y+7, r24	; 0x07
    2de8:	98 87       	std	Y+8, r25	; 0x08
    2dea:	a9 87       	std	Y+9, r26	; 0x09
    2dec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2dee:	6f 81       	ldd	r22, Y+7	; 0x07
    2df0:	78 85       	ldd	r23, Y+8	; 0x08
    2df2:	89 85       	ldd	r24, Y+9	; 0x09
    2df4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2df6:	20 e0       	ldi	r18, 0x00	; 0
    2df8:	30 e0       	ldi	r19, 0x00	; 0
    2dfa:	40 e8       	ldi	r20, 0x80	; 128
    2dfc:	5f e3       	ldi	r21, 0x3F	; 63
    2dfe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e02:	88 23       	and	r24, r24
    2e04:	2c f4       	brge	.+10     	; 0x2e10 <LCD_voidInit+0x388>
		__ticks = 1;
    2e06:	81 e0       	ldi	r24, 0x01	; 1
    2e08:	90 e0       	ldi	r25, 0x00	; 0
    2e0a:	9e 83       	std	Y+6, r25	; 0x06
    2e0c:	8d 83       	std	Y+5, r24	; 0x05
    2e0e:	3f c0       	rjmp	.+126    	; 0x2e8e <LCD_voidInit+0x406>
	else if (__tmp > 65535)
    2e10:	6f 81       	ldd	r22, Y+7	; 0x07
    2e12:	78 85       	ldd	r23, Y+8	; 0x08
    2e14:	89 85       	ldd	r24, Y+9	; 0x09
    2e16:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e18:	20 e0       	ldi	r18, 0x00	; 0
    2e1a:	3f ef       	ldi	r19, 0xFF	; 255
    2e1c:	4f e7       	ldi	r20, 0x7F	; 127
    2e1e:	57 e4       	ldi	r21, 0x47	; 71
    2e20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e24:	18 16       	cp	r1, r24
    2e26:	4c f5       	brge	.+82     	; 0x2e7a <LCD_voidInit+0x3f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e28:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e30:	20 e0       	ldi	r18, 0x00	; 0
    2e32:	30 e0       	ldi	r19, 0x00	; 0
    2e34:	40 e2       	ldi	r20, 0x20	; 32
    2e36:	51 e4       	ldi	r21, 0x41	; 65
    2e38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e3c:	dc 01       	movw	r26, r24
    2e3e:	cb 01       	movw	r24, r22
    2e40:	bc 01       	movw	r22, r24
    2e42:	cd 01       	movw	r24, r26
    2e44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e48:	dc 01       	movw	r26, r24
    2e4a:	cb 01       	movw	r24, r22
    2e4c:	9e 83       	std	Y+6, r25	; 0x06
    2e4e:	8d 83       	std	Y+5, r24	; 0x05
    2e50:	0f c0       	rjmp	.+30     	; 0x2e70 <LCD_voidInit+0x3e8>
    2e52:	80 e9       	ldi	r24, 0x90	; 144
    2e54:	91 e0       	ldi	r25, 0x01	; 1
    2e56:	9c 83       	std	Y+4, r25	; 0x04
    2e58:	8b 83       	std	Y+3, r24	; 0x03
    2e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e5c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e5e:	01 97       	sbiw	r24, 0x01	; 1
    2e60:	f1 f7       	brne	.-4      	; 0x2e5e <LCD_voidInit+0x3d6>
    2e62:	9c 83       	std	Y+4, r25	; 0x04
    2e64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e66:	8d 81       	ldd	r24, Y+5	; 0x05
    2e68:	9e 81       	ldd	r25, Y+6	; 0x06
    2e6a:	01 97       	sbiw	r24, 0x01	; 1
    2e6c:	9e 83       	std	Y+6, r25	; 0x06
    2e6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e70:	8d 81       	ldd	r24, Y+5	; 0x05
    2e72:	9e 81       	ldd	r25, Y+6	; 0x06
    2e74:	00 97       	sbiw	r24, 0x00	; 0
    2e76:	69 f7       	brne	.-38     	; 0x2e52 <LCD_voidInit+0x3ca>
    2e78:	14 c0       	rjmp	.+40     	; 0x2ea2 <LCD_voidInit+0x41a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e7a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e7c:	78 85       	ldd	r23, Y+8	; 0x08
    2e7e:	89 85       	ldd	r24, Y+9	; 0x09
    2e80:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e86:	dc 01       	movw	r26, r24
    2e88:	cb 01       	movw	r24, r22
    2e8a:	9e 83       	std	Y+6, r25	; 0x06
    2e8c:	8d 83       	std	Y+5, r24	; 0x05
    2e8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e90:	9e 81       	ldd	r25, Y+6	; 0x06
    2e92:	9a 83       	std	Y+2, r25	; 0x02
    2e94:	89 83       	std	Y+1, r24	; 0x01
    2e96:	89 81       	ldd	r24, Y+1	; 0x01
    2e98:	9a 81       	ldd	r25, Y+2	; 0x02
    2e9a:	01 97       	sbiw	r24, 0x01	; 1
    2e9c:	f1 f7       	brne	.-4      	; 0x2e9a <LCD_voidInit+0x412>
    2e9e:	9a 83       	std	Y+2, r25	; 0x02
    2ea0:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);
	//entery mode set
	LCD_voidSendCommand(0b00000110);
    2ea2:	86 e0       	ldi	r24, 0x06	; 6
    2ea4:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_voidSendCommand>

}
    2ea8:	e8 96       	adiw	r28, 0x38	; 56
    2eaa:	0f b6       	in	r0, 0x3f	; 63
    2eac:	f8 94       	cli
    2eae:	de bf       	out	0x3e, r29	; 62
    2eb0:	0f be       	out	0x3f, r0	; 63
    2eb2:	cd bf       	out	0x3d, r28	; 61
    2eb4:	cf 91       	pop	r28
    2eb6:	df 91       	pop	r29
    2eb8:	08 95       	ret

00002eba <PRV_voidEnableTriggerWrite>:

static void PRV_voidEnableTriggerWrite(){
    2eba:	df 93       	push	r29
    2ebc:	cf 93       	push	r28
    2ebe:	cd b7       	in	r28, 0x3d	; 61
    2ec0:	de b7       	in	r29, 0x3e	; 62
    2ec2:	2e 97       	sbiw	r28, 0x0e	; 14
    2ec4:	0f b6       	in	r0, 0x3f	; 63
    2ec6:	f8 94       	cli
    2ec8:	de bf       	out	0x3e, r29	; 62
    2eca:	0f be       	out	0x3f, r0	; 63
    2ecc:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
    2ece:	80 e0       	ldi	r24, 0x00	; 0
    2ed0:	62 e0       	ldi	r22, 0x02	; 2
    2ed2:	41 e0       	ldi	r20, 0x01	; 1
    2ed4:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
    2ed8:	80 e0       	ldi	r24, 0x00	; 0
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	a0 e8       	ldi	r26, 0x80	; 128
    2ede:	bf e3       	ldi	r27, 0x3F	; 63
    2ee0:	8b 87       	std	Y+11, r24	; 0x0b
    2ee2:	9c 87       	std	Y+12, r25	; 0x0c
    2ee4:	ad 87       	std	Y+13, r26	; 0x0d
    2ee6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ee8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eea:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eec:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eee:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ef0:	20 e0       	ldi	r18, 0x00	; 0
    2ef2:	30 e0       	ldi	r19, 0x00	; 0
    2ef4:	4a e7       	ldi	r20, 0x7A	; 122
    2ef6:	55 e4       	ldi	r21, 0x45	; 69
    2ef8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2efc:	dc 01       	movw	r26, r24
    2efe:	cb 01       	movw	r24, r22
    2f00:	8f 83       	std	Y+7, r24	; 0x07
    2f02:	98 87       	std	Y+8, r25	; 0x08
    2f04:	a9 87       	std	Y+9, r26	; 0x09
    2f06:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f08:	6f 81       	ldd	r22, Y+7	; 0x07
    2f0a:	78 85       	ldd	r23, Y+8	; 0x08
    2f0c:	89 85       	ldd	r24, Y+9	; 0x09
    2f0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f10:	20 e0       	ldi	r18, 0x00	; 0
    2f12:	30 e0       	ldi	r19, 0x00	; 0
    2f14:	40 e8       	ldi	r20, 0x80	; 128
    2f16:	5f e3       	ldi	r21, 0x3F	; 63
    2f18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f1c:	88 23       	and	r24, r24
    2f1e:	2c f4       	brge	.+10     	; 0x2f2a <PRV_voidEnableTriggerWrite+0x70>
		__ticks = 1;
    2f20:	81 e0       	ldi	r24, 0x01	; 1
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    2f24:	9e 83       	std	Y+6, r25	; 0x06
    2f26:	8d 83       	std	Y+5, r24	; 0x05
    2f28:	3f c0       	rjmp	.+126    	; 0x2fa8 <PRV_voidEnableTriggerWrite+0xee>
	else if (__tmp > 65535)
    2f2a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f2c:	78 85       	ldd	r23, Y+8	; 0x08
    2f2e:	89 85       	ldd	r24, Y+9	; 0x09
    2f30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f32:	20 e0       	ldi	r18, 0x00	; 0
    2f34:	3f ef       	ldi	r19, 0xFF	; 255
    2f36:	4f e7       	ldi	r20, 0x7F	; 127
    2f38:	57 e4       	ldi	r21, 0x47	; 71
    2f3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f3e:	18 16       	cp	r1, r24
    2f40:	4c f5       	brge	.+82     	; 0x2f94 <PRV_voidEnableTriggerWrite+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f42:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f44:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f46:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f48:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f4a:	20 e0       	ldi	r18, 0x00	; 0
    2f4c:	30 e0       	ldi	r19, 0x00	; 0
    2f4e:	40 e2       	ldi	r20, 0x20	; 32
    2f50:	51 e4       	ldi	r21, 0x41	; 65
    2f52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f56:	dc 01       	movw	r26, r24
    2f58:	cb 01       	movw	r24, r22
    2f5a:	bc 01       	movw	r22, r24
    2f5c:	cd 01       	movw	r24, r26
    2f5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f62:	dc 01       	movw	r26, r24
    2f64:	cb 01       	movw	r24, r22
    2f66:	9e 83       	std	Y+6, r25	; 0x06
    2f68:	8d 83       	std	Y+5, r24	; 0x05
    2f6a:	0f c0       	rjmp	.+30     	; 0x2f8a <PRV_voidEnableTriggerWrite+0xd0>
    2f6c:	80 e9       	ldi	r24, 0x90	; 144
    2f6e:	91 e0       	ldi	r25, 0x01	; 1
    2f70:	9c 83       	std	Y+4, r25	; 0x04
    2f72:	8b 83       	std	Y+3, r24	; 0x03
    2f74:	8b 81       	ldd	r24, Y+3	; 0x03
    2f76:	9c 81       	ldd	r25, Y+4	; 0x04
    2f78:	01 97       	sbiw	r24, 0x01	; 1
    2f7a:	f1 f7       	brne	.-4      	; 0x2f78 <PRV_voidEnableTriggerWrite+0xbe>
    2f7c:	9c 83       	std	Y+4, r25	; 0x04
    2f7e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f80:	8d 81       	ldd	r24, Y+5	; 0x05
    2f82:	9e 81       	ldd	r25, Y+6	; 0x06
    2f84:	01 97       	sbiw	r24, 0x01	; 1
    2f86:	9e 83       	std	Y+6, r25	; 0x06
    2f88:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f8e:	00 97       	sbiw	r24, 0x00	; 0
    2f90:	69 f7       	brne	.-38     	; 0x2f6c <PRV_voidEnableTriggerWrite+0xb2>
    2f92:	14 c0       	rjmp	.+40     	; 0x2fbc <PRV_voidEnableTriggerWrite+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f94:	6f 81       	ldd	r22, Y+7	; 0x07
    2f96:	78 85       	ldd	r23, Y+8	; 0x08
    2f98:	89 85       	ldd	r24, Y+9	; 0x09
    2f9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fa0:	dc 01       	movw	r26, r24
    2fa2:	cb 01       	movw	r24, r22
    2fa4:	9e 83       	std	Y+6, r25	; 0x06
    2fa6:	8d 83       	std	Y+5, r24	; 0x05
    2fa8:	8d 81       	ldd	r24, Y+5	; 0x05
    2faa:	9e 81       	ldd	r25, Y+6	; 0x06
    2fac:	9a 83       	std	Y+2, r25	; 0x02
    2fae:	89 83       	std	Y+1, r24	; 0x01
    2fb0:	89 81       	ldd	r24, Y+1	; 0x01
    2fb2:	9a 81       	ldd	r25, Y+2	; 0x02
    2fb4:	01 97       	sbiw	r24, 0x01	; 1
    2fb6:	f1 f7       	brne	.-4      	; 0x2fb4 <PRV_voidEnableTriggerWrite+0xfa>
    2fb8:	9a 83       	std	Y+2, r25	; 0x02
    2fba:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
    2fbc:	80 e0       	ldi	r24, 0x00	; 0
    2fbe:	62 e0       	ldi	r22, 0x02	; 2
    2fc0:	40 e0       	ldi	r20, 0x00	; 0
    2fc2:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>

}
    2fc6:	2e 96       	adiw	r28, 0x0e	; 14
    2fc8:	0f b6       	in	r0, 0x3f	; 63
    2fca:	f8 94       	cli
    2fcc:	de bf       	out	0x3e, r29	; 62
    2fce:	0f be       	out	0x3f, r0	; 63
    2fd0:	cd bf       	out	0x3d, r28	; 61
    2fd2:	cf 91       	pop	r28
    2fd4:	df 91       	pop	r29
    2fd6:	08 95       	ret

00002fd8 <PRV_voidWriteHalfPort>:

static void PRV_voidWriteHalfPort(u8 copy_u8Value){
    2fd8:	df 93       	push	r29
    2fda:	cf 93       	push	r28
    2fdc:	0f 92       	push	r0
    2fde:	cd b7       	in	r28, 0x3d	; 61
    2fe0:	de b7       	in	r29, 0x3e	; 62
    2fe2:	89 83       	std	Y+1, r24	; 0x01

	DIO_voidSetPinValue(LCD_D4_PORT,LCD_D4_PIN,GET_BIT(copy_u8Value,0));
    2fe4:	89 81       	ldd	r24, Y+1	; 0x01
    2fe6:	98 2f       	mov	r25, r24
    2fe8:	91 70       	andi	r25, 0x01	; 1
    2fea:	80 e0       	ldi	r24, 0x00	; 0
    2fec:	64 e0       	ldi	r22, 0x04	; 4
    2fee:	49 2f       	mov	r20, r25
    2ff0:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_D5_PORT,LCD_D5_PIN,GET_BIT(copy_u8Value,1));
    2ff4:	89 81       	ldd	r24, Y+1	; 0x01
    2ff6:	86 95       	lsr	r24
    2ff8:	98 2f       	mov	r25, r24
    2ffa:	91 70       	andi	r25, 0x01	; 1
    2ffc:	80 e0       	ldi	r24, 0x00	; 0
    2ffe:	65 e0       	ldi	r22, 0x05	; 5
    3000:	49 2f       	mov	r20, r25
    3002:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_D6_PORT,LCD_D6_PIN,GET_BIT(copy_u8Value,2));
    3006:	89 81       	ldd	r24, Y+1	; 0x01
    3008:	86 95       	lsr	r24
    300a:	86 95       	lsr	r24
    300c:	98 2f       	mov	r25, r24
    300e:	91 70       	andi	r25, 0x01	; 1
    3010:	80 e0       	ldi	r24, 0x00	; 0
    3012:	66 e0       	ldi	r22, 0x06	; 6
    3014:	49 2f       	mov	r20, r25
    3016:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_D7_PORT,LCD_D7_PIN,GET_BIT(copy_u8Value,3));
    301a:	89 81       	ldd	r24, Y+1	; 0x01
    301c:	86 95       	lsr	r24
    301e:	86 95       	lsr	r24
    3020:	86 95       	lsr	r24
    3022:	98 2f       	mov	r25, r24
    3024:	91 70       	andi	r25, 0x01	; 1
    3026:	80 e0       	ldi	r24, 0x00	; 0
    3028:	67 e0       	ldi	r22, 0x07	; 7
    302a:	49 2f       	mov	r20, r25
    302c:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
}
    3030:	0f 90       	pop	r0
    3032:	cf 91       	pop	r28
    3034:	df 91       	pop	r29
    3036:	08 95       	ret

00003038 <LCD_voidDisplayChar>:

void LCD_voidDisplayChar(u8 copy_u8Data){
    3038:	df 93       	push	r29
    303a:	cf 93       	push	r28
    303c:	0f 92       	push	r0
    303e:	cd b7       	in	r28, 0x3d	; 61
    3040:	de b7       	in	r29, 0x3e	; 62
    3042:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
    3044:	81 e0       	ldi	r24, 0x01	; 1
    3046:	62 e0       	ldi	r22, 0x02	; 2
    3048:	40 e0       	ldi	r20, 0x00	; 0
    304a:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_HIGH);
    304e:	81 e0       	ldi	r24, 0x01	; 1
    3050:	61 e0       	ldi	r22, 0x01	; 1
    3052:	41 e0       	ldi	r20, 0x01	; 1
    3054:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>

	PRV_voidWriteHalfPort(copy_u8Data>>4);
    3058:	89 81       	ldd	r24, Y+1	; 0x01
    305a:	82 95       	swap	r24
    305c:	8f 70       	andi	r24, 0x0F	; 15
    305e:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <PRV_voidWriteHalfPort>
	PRV_voidEnableTriggerWrite();
    3062:	0e 94 5d 17 	call	0x2eba	; 0x2eba <PRV_voidEnableTriggerWrite>

	PRV_voidWriteHalfPort(copy_u8Data);
    3066:	89 81       	ldd	r24, Y+1	; 0x01
    3068:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <PRV_voidWriteHalfPort>
	PRV_voidEnableTriggerWrite();
    306c:	0e 94 5d 17 	call	0x2eba	; 0x2eba <PRV_voidEnableTriggerWrite>

}
    3070:	0f 90       	pop	r0
    3072:	cf 91       	pop	r28
    3074:	df 91       	pop	r29
    3076:	08 95       	ret

00003078 <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 copy_u8Cmnd){
    3078:	df 93       	push	r29
    307a:	cf 93       	push	r28
    307c:	0f 92       	push	r0
    307e:	cd b7       	in	r28, 0x3d	; 61
    3080:	de b7       	in	r29, 0x3e	; 62
    3082:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
    3084:	81 e0       	ldi	r24, 0x01	; 1
    3086:	62 e0       	ldi	r22, 0x02	; 2
    3088:	40 e0       	ldi	r20, 0x00	; 0
    308a:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_RS_PORT,LCD_RS_PIN ,DIO_PIN_LOW);
    308e:	81 e0       	ldi	r24, 0x01	; 1
    3090:	61 e0       	ldi	r22, 0x01	; 1
    3092:	40 e0       	ldi	r20, 0x00	; 0
    3094:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>

	PRV_voidWriteHalfPort(copy_u8Cmnd>>4);
    3098:	89 81       	ldd	r24, Y+1	; 0x01
    309a:	82 95       	swap	r24
    309c:	8f 70       	andi	r24, 0x0F	; 15
    309e:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <PRV_voidWriteHalfPort>
	PRV_voidEnableTriggerWrite();
    30a2:	0e 94 5d 17 	call	0x2eba	; 0x2eba <PRV_voidEnableTriggerWrite>

	PRV_voidWriteHalfPort(copy_u8Cmnd);
    30a6:	89 81       	ldd	r24, Y+1	; 0x01
    30a8:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <PRV_voidWriteHalfPort>
	PRV_voidEnableTriggerWrite();
    30ac:	0e 94 5d 17 	call	0x2eba	; 0x2eba <PRV_voidEnableTriggerWrite>

}
    30b0:	0f 90       	pop	r0
    30b2:	cf 91       	pop	r28
    30b4:	df 91       	pop	r29
    30b6:	08 95       	ret

000030b8 <LCD_voidDisplayString>:

void LCD_voidDisplayString(u8* copy_Pu8String){
    30b8:	df 93       	push	r29
    30ba:	cf 93       	push	r28
    30bc:	00 d0       	rcall	.+0      	; 0x30be <LCD_voidDisplayString+0x6>
    30be:	0f 92       	push	r0
    30c0:	cd b7       	in	r28, 0x3d	; 61
    30c2:	de b7       	in	r29, 0x3e	; 62
    30c4:	9b 83       	std	Y+3, r25	; 0x03
    30c6:	8a 83       	std	Y+2, r24	; 0x02
	if (copy_Pu8String != NULL){
    30c8:	8a 81       	ldd	r24, Y+2	; 0x02
    30ca:	9b 81       	ldd	r25, Y+3	; 0x03
    30cc:	00 97       	sbiw	r24, 0x00	; 0
    30ce:	d9 f0       	breq	.+54     	; 0x3106 <LCD_voidDisplayString+0x4e>
		u8 local_u8counter=0;
    30d0:	19 82       	std	Y+1, r1	; 0x01
    30d2:	0e c0       	rjmp	.+28     	; 0x30f0 <LCD_voidDisplayString+0x38>
		while(copy_Pu8String[local_u8counter] != '\0'){
			LCD_voidDisplayChar(copy_Pu8String[local_u8counter]);
    30d4:	89 81       	ldd	r24, Y+1	; 0x01
    30d6:	28 2f       	mov	r18, r24
    30d8:	30 e0       	ldi	r19, 0x00	; 0
    30da:	8a 81       	ldd	r24, Y+2	; 0x02
    30dc:	9b 81       	ldd	r25, Y+3	; 0x03
    30de:	fc 01       	movw	r30, r24
    30e0:	e2 0f       	add	r30, r18
    30e2:	f3 1f       	adc	r31, r19
    30e4:	80 81       	ld	r24, Z
    30e6:	0e 94 1c 18 	call	0x3038	; 0x3038 <LCD_voidDisplayChar>
			local_u8counter++;
    30ea:	89 81       	ldd	r24, Y+1	; 0x01
    30ec:	8f 5f       	subi	r24, 0xFF	; 255
    30ee:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidDisplayString(u8* copy_Pu8String){
	if (copy_Pu8String != NULL){
		u8 local_u8counter=0;
		while(copy_Pu8String[local_u8counter] != '\0'){
    30f0:	89 81       	ldd	r24, Y+1	; 0x01
    30f2:	28 2f       	mov	r18, r24
    30f4:	30 e0       	ldi	r19, 0x00	; 0
    30f6:	8a 81       	ldd	r24, Y+2	; 0x02
    30f8:	9b 81       	ldd	r25, Y+3	; 0x03
    30fa:	fc 01       	movw	r30, r24
    30fc:	e2 0f       	add	r30, r18
    30fe:	f3 1f       	adc	r31, r19
    3100:	80 81       	ld	r24, Z
    3102:	88 23       	and	r24, r24
    3104:	39 f7       	brne	.-50     	; 0x30d4 <LCD_voidDisplayString+0x1c>
		}
	}
	else{
		//return error
	}
}
    3106:	0f 90       	pop	r0
    3108:	0f 90       	pop	r0
    310a:	0f 90       	pop	r0
    310c:	cf 91       	pop	r28
    310e:	df 91       	pop	r29
    3110:	08 95       	ret

00003112 <LCD_voidClear>:
void LCD_voidClear(){
    3112:	df 93       	push	r29
    3114:	cf 93       	push	r28
    3116:	cd b7       	in	r28, 0x3d	; 61
    3118:	de b7       	in	r29, 0x3e	; 62
    311a:	2e 97       	sbiw	r28, 0x0e	; 14
    311c:	0f b6       	in	r0, 0x3f	; 63
    311e:	f8 94       	cli
    3120:	de bf       	out	0x3e, r29	; 62
    3122:	0f be       	out	0x3f, r0	; 63
    3124:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCommand(0b00000001);
    3126:	81 e0       	ldi	r24, 0x01	; 1
    3128:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_voidSendCommand>
    312c:	80 e0       	ldi	r24, 0x00	; 0
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	a0 e0       	ldi	r26, 0x00	; 0
    3132:	b0 e4       	ldi	r27, 0x40	; 64
    3134:	8b 87       	std	Y+11, r24	; 0x0b
    3136:	9c 87       	std	Y+12, r25	; 0x0c
    3138:	ad 87       	std	Y+13, r26	; 0x0d
    313a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    313c:	6b 85       	ldd	r22, Y+11	; 0x0b
    313e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3140:	8d 85       	ldd	r24, Y+13	; 0x0d
    3142:	9e 85       	ldd	r25, Y+14	; 0x0e
    3144:	20 e0       	ldi	r18, 0x00	; 0
    3146:	30 e0       	ldi	r19, 0x00	; 0
    3148:	4a e7       	ldi	r20, 0x7A	; 122
    314a:	55 e4       	ldi	r21, 0x45	; 69
    314c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3150:	dc 01       	movw	r26, r24
    3152:	cb 01       	movw	r24, r22
    3154:	8f 83       	std	Y+7, r24	; 0x07
    3156:	98 87       	std	Y+8, r25	; 0x08
    3158:	a9 87       	std	Y+9, r26	; 0x09
    315a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    315c:	6f 81       	ldd	r22, Y+7	; 0x07
    315e:	78 85       	ldd	r23, Y+8	; 0x08
    3160:	89 85       	ldd	r24, Y+9	; 0x09
    3162:	9a 85       	ldd	r25, Y+10	; 0x0a
    3164:	20 e0       	ldi	r18, 0x00	; 0
    3166:	30 e0       	ldi	r19, 0x00	; 0
    3168:	40 e8       	ldi	r20, 0x80	; 128
    316a:	5f e3       	ldi	r21, 0x3F	; 63
    316c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3170:	88 23       	and	r24, r24
    3172:	2c f4       	brge	.+10     	; 0x317e <LCD_voidClear+0x6c>
		__ticks = 1;
    3174:	81 e0       	ldi	r24, 0x01	; 1
    3176:	90 e0       	ldi	r25, 0x00	; 0
    3178:	9e 83       	std	Y+6, r25	; 0x06
    317a:	8d 83       	std	Y+5, r24	; 0x05
    317c:	3f c0       	rjmp	.+126    	; 0x31fc <LCD_voidClear+0xea>
	else if (__tmp > 65535)
    317e:	6f 81       	ldd	r22, Y+7	; 0x07
    3180:	78 85       	ldd	r23, Y+8	; 0x08
    3182:	89 85       	ldd	r24, Y+9	; 0x09
    3184:	9a 85       	ldd	r25, Y+10	; 0x0a
    3186:	20 e0       	ldi	r18, 0x00	; 0
    3188:	3f ef       	ldi	r19, 0xFF	; 255
    318a:	4f e7       	ldi	r20, 0x7F	; 127
    318c:	57 e4       	ldi	r21, 0x47	; 71
    318e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3192:	18 16       	cp	r1, r24
    3194:	4c f5       	brge	.+82     	; 0x31e8 <LCD_voidClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3196:	6b 85       	ldd	r22, Y+11	; 0x0b
    3198:	7c 85       	ldd	r23, Y+12	; 0x0c
    319a:	8d 85       	ldd	r24, Y+13	; 0x0d
    319c:	9e 85       	ldd	r25, Y+14	; 0x0e
    319e:	20 e0       	ldi	r18, 0x00	; 0
    31a0:	30 e0       	ldi	r19, 0x00	; 0
    31a2:	40 e2       	ldi	r20, 0x20	; 32
    31a4:	51 e4       	ldi	r21, 0x41	; 65
    31a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31aa:	dc 01       	movw	r26, r24
    31ac:	cb 01       	movw	r24, r22
    31ae:	bc 01       	movw	r22, r24
    31b0:	cd 01       	movw	r24, r26
    31b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31b6:	dc 01       	movw	r26, r24
    31b8:	cb 01       	movw	r24, r22
    31ba:	9e 83       	std	Y+6, r25	; 0x06
    31bc:	8d 83       	std	Y+5, r24	; 0x05
    31be:	0f c0       	rjmp	.+30     	; 0x31de <LCD_voidClear+0xcc>
    31c0:	80 e9       	ldi	r24, 0x90	; 144
    31c2:	91 e0       	ldi	r25, 0x01	; 1
    31c4:	9c 83       	std	Y+4, r25	; 0x04
    31c6:	8b 83       	std	Y+3, r24	; 0x03
    31c8:	8b 81       	ldd	r24, Y+3	; 0x03
    31ca:	9c 81       	ldd	r25, Y+4	; 0x04
    31cc:	01 97       	sbiw	r24, 0x01	; 1
    31ce:	f1 f7       	brne	.-4      	; 0x31cc <LCD_voidClear+0xba>
    31d0:	9c 83       	std	Y+4, r25	; 0x04
    31d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31d4:	8d 81       	ldd	r24, Y+5	; 0x05
    31d6:	9e 81       	ldd	r25, Y+6	; 0x06
    31d8:	01 97       	sbiw	r24, 0x01	; 1
    31da:	9e 83       	std	Y+6, r25	; 0x06
    31dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31de:	8d 81       	ldd	r24, Y+5	; 0x05
    31e0:	9e 81       	ldd	r25, Y+6	; 0x06
    31e2:	00 97       	sbiw	r24, 0x00	; 0
    31e4:	69 f7       	brne	.-38     	; 0x31c0 <LCD_voidClear+0xae>
    31e6:	14 c0       	rjmp	.+40     	; 0x3210 <LCD_voidClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31e8:	6f 81       	ldd	r22, Y+7	; 0x07
    31ea:	78 85       	ldd	r23, Y+8	; 0x08
    31ec:	89 85       	ldd	r24, Y+9	; 0x09
    31ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    31f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f4:	dc 01       	movw	r26, r24
    31f6:	cb 01       	movw	r24, r22
    31f8:	9e 83       	std	Y+6, r25	; 0x06
    31fa:	8d 83       	std	Y+5, r24	; 0x05
    31fc:	8d 81       	ldd	r24, Y+5	; 0x05
    31fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3200:	9a 83       	std	Y+2, r25	; 0x02
    3202:	89 83       	std	Y+1, r24	; 0x01
    3204:	89 81       	ldd	r24, Y+1	; 0x01
    3206:	9a 81       	ldd	r25, Y+2	; 0x02
    3208:	01 97       	sbiw	r24, 0x01	; 1
    320a:	f1 f7       	brne	.-4      	; 0x3208 <LCD_voidClear+0xf6>
    320c:	9a 83       	std	Y+2, r25	; 0x02
    320e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    3210:	2e 96       	adiw	r28, 0x0e	; 14
    3212:	0f b6       	in	r0, 0x3f	; 63
    3214:	f8 94       	cli
    3216:	de bf       	out	0x3e, r29	; 62
    3218:	0f be       	out	0x3f, r0	; 63
    321a:	cd bf       	out	0x3d, r28	; 61
    321c:	cf 91       	pop	r28
    321e:	df 91       	pop	r29
    3220:	08 95       	ret

00003222 <LCD_voidShift>:

void LCD_voidShift(u8 copy_u8ShifttingDirection){
    3222:	df 93       	push	r29
    3224:	cf 93       	push	r28
    3226:	00 d0       	rcall	.+0      	; 0x3228 <LCD_voidShift+0x6>
    3228:	0f 92       	push	r0
    322a:	cd b7       	in	r28, 0x3d	; 61
    322c:	de b7       	in	r29, 0x3e	; 62
    322e:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8ShifttingDirection)
    3230:	89 81       	ldd	r24, Y+1	; 0x01
    3232:	28 2f       	mov	r18, r24
    3234:	30 e0       	ldi	r19, 0x00	; 0
    3236:	3b 83       	std	Y+3, r19	; 0x03
    3238:	2a 83       	std	Y+2, r18	; 0x02
    323a:	8a 81       	ldd	r24, Y+2	; 0x02
    323c:	9b 81       	ldd	r25, Y+3	; 0x03
    323e:	81 30       	cpi	r24, 0x01	; 1
    3240:	91 05       	cpc	r25, r1
    3242:	c9 f0       	breq	.+50     	; 0x3276 <LCD_voidShift+0x54>
    3244:	2a 81       	ldd	r18, Y+2	; 0x02
    3246:	3b 81       	ldd	r19, Y+3	; 0x03
    3248:	22 30       	cpi	r18, 0x02	; 2
    324a:	31 05       	cpc	r19, r1
    324c:	2c f4       	brge	.+10     	; 0x3258 <LCD_voidShift+0x36>
    324e:	8a 81       	ldd	r24, Y+2	; 0x02
    3250:	9b 81       	ldd	r25, Y+3	; 0x03
    3252:	00 97       	sbiw	r24, 0x00	; 0
    3254:	61 f0       	breq	.+24     	; 0x326e <LCD_voidShift+0x4c>
    3256:	1a c0       	rjmp	.+52     	; 0x328c <LCD_voidShift+0x6a>
    3258:	2a 81       	ldd	r18, Y+2	; 0x02
    325a:	3b 81       	ldd	r19, Y+3	; 0x03
    325c:	22 30       	cpi	r18, 0x02	; 2
    325e:	31 05       	cpc	r19, r1
    3260:	71 f0       	breq	.+28     	; 0x327e <LCD_voidShift+0x5c>
    3262:	8a 81       	ldd	r24, Y+2	; 0x02
    3264:	9b 81       	ldd	r25, Y+3	; 0x03
    3266:	83 30       	cpi	r24, 0x03	; 3
    3268:	91 05       	cpc	r25, r1
    326a:	69 f0       	breq	.+26     	; 0x3286 <LCD_voidShift+0x64>
    326c:	0f c0       	rjmp	.+30     	; 0x328c <LCD_voidShift+0x6a>
	{
	case SHIFT_CURSOR_LEFT:
		LCD_voidSendCommand(0b00010000);
    326e:	80 e1       	ldi	r24, 0x10	; 16
    3270:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_voidSendCommand>
    3274:	0b c0       	rjmp	.+22     	; 0x328c <LCD_voidShift+0x6a>
		break;
	case SHIFT_CURSOR_RIGHT:
		LCD_voidSendCommand(0b00010100);
    3276:	84 e1       	ldi	r24, 0x14	; 20
    3278:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_voidSendCommand>
    327c:	07 c0       	rjmp	.+14     	; 0x328c <LCD_voidShift+0x6a>
		break;
	case SHIFT_DISPLAY_LEFT:
		LCD_voidSendCommand(0b00011000);
    327e:	88 e1       	ldi	r24, 0x18	; 24
    3280:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_voidSendCommand>
    3284:	03 c0       	rjmp	.+6      	; 0x328c <LCD_voidShift+0x6a>
		break;
	case SHIFT__DISPLAY_RIGHT:
		LCD_voidSendCommand(0b00011100);
    3286:	8c e1       	ldi	r24, 0x1C	; 28
    3288:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_voidSendCommand>
		break;
	}
}
    328c:	0f 90       	pop	r0
    328e:	0f 90       	pop	r0
    3290:	0f 90       	pop	r0
    3292:	cf 91       	pop	r28
    3294:	df 91       	pop	r29
    3296:	08 95       	ret

00003298 <LCD_voidGoToSpecificPosition>:

void LCD_voidGoToSpecificPosition(u8 copy_u8LineNumber,u8 copy_u8Position){
    3298:	df 93       	push	r29
    329a:	cf 93       	push	r28
    329c:	00 d0       	rcall	.+0      	; 0x329e <LCD_voidGoToSpecificPosition+0x6>
    329e:	0f 92       	push	r0
    32a0:	cd b7       	in	r28, 0x3d	; 61
    32a2:	de b7       	in	r29, 0x3e	; 62
    32a4:	8a 83       	std	Y+2, r24	; 0x02
    32a6:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8address=copy_u8Position+copy_u8LineNumber * 0x40;
    32a8:	8a 81       	ldd	r24, Y+2	; 0x02
    32aa:	88 2f       	mov	r24, r24
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	00 24       	eor	r0, r0
    32b0:	96 95       	lsr	r25
    32b2:	87 95       	ror	r24
    32b4:	07 94       	ror	r0
    32b6:	96 95       	lsr	r25
    32b8:	87 95       	ror	r24
    32ba:	07 94       	ror	r0
    32bc:	98 2f       	mov	r25, r24
    32be:	80 2d       	mov	r24, r0
    32c0:	98 2f       	mov	r25, r24
    32c2:	8b 81       	ldd	r24, Y+3	; 0x03
    32c4:	89 0f       	add	r24, r25
    32c6:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(local_u8address,7);
    32c8:	89 81       	ldd	r24, Y+1	; 0x01
    32ca:	80 68       	ori	r24, 0x80	; 128
    32cc:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidSendCommand(local_u8address);
    32ce:	89 81       	ldd	r24, Y+1	; 0x01
    32d0:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_voidSendCommand>

}
    32d4:	0f 90       	pop	r0
    32d6:	0f 90       	pop	r0
    32d8:	0f 90       	pop	r0
    32da:	cf 91       	pop	r28
    32dc:	df 91       	pop	r29
    32de:	08 95       	ret

000032e0 <LCD_voidDisplayNumber>:

void LCD_voidDisplayNumber(u32 copy_u32Number){
    32e0:	ef 92       	push	r14
    32e2:	ff 92       	push	r15
    32e4:	0f 93       	push	r16
    32e6:	1f 93       	push	r17
    32e8:	df 93       	push	r29
    32ea:	cf 93       	push	r28
    32ec:	cd b7       	in	r28, 0x3d	; 61
    32ee:	de b7       	in	r29, 0x3e	; 62
    32f0:	28 97       	sbiw	r28, 0x08	; 8
    32f2:	0f b6       	in	r0, 0x3f	; 63
    32f4:	f8 94       	cli
    32f6:	de bf       	out	0x3e, r29	; 62
    32f8:	0f be       	out	0x3f, r0	; 63
    32fa:	cd bf       	out	0x3d, r28	; 61
    32fc:	6d 83       	std	Y+5, r22	; 0x05
    32fe:	7e 83       	std	Y+6, r23	; 0x06
    3300:	8f 83       	std	Y+7, r24	; 0x07
    3302:	98 87       	std	Y+8, r25	; 0x08
 u32 local_u32ReversedNumber=1;
    3304:	81 e0       	ldi	r24, 0x01	; 1
    3306:	90 e0       	ldi	r25, 0x00	; 0
    3308:	a0 e0       	ldi	r26, 0x00	; 0
    330a:	b0 e0       	ldi	r27, 0x00	; 0
    330c:	89 83       	std	Y+1, r24	; 0x01
    330e:	9a 83       	std	Y+2, r25	; 0x02
    3310:	ab 83       	std	Y+3, r26	; 0x03
    3312:	bc 83       	std	Y+4, r27	; 0x04
 	 if(copy_u32Number ==0){
    3314:	8d 81       	ldd	r24, Y+5	; 0x05
    3316:	9e 81       	ldd	r25, Y+6	; 0x06
    3318:	af 81       	ldd	r26, Y+7	; 0x07
    331a:	b8 85       	ldd	r27, Y+8	; 0x08
    331c:	00 97       	sbiw	r24, 0x00	; 0
    331e:	a1 05       	cpc	r26, r1
    3320:	b1 05       	cpc	r27, r1
    3322:	d1 f5       	brne	.+116    	; 0x3398 <LCD_voidDisplayNumber+0xb8>
 		 LCD_voidDisplayChar('0');
    3324:	80 e3       	ldi	r24, 0x30	; 48
    3326:	0e 94 1c 18 	call	0x3038	; 0x3038 <LCD_voidDisplayChar>
    332a:	6a c0       	rjmp	.+212    	; 0x3400 <LCD_voidDisplayNumber+0x120>
 	 }
 	 else{
 		 while(copy_u32Number !=0){
 			local_u32ReversedNumber= (local_u32ReversedNumber * 10) + (copy_u32Number % 10);
    332c:	89 81       	ldd	r24, Y+1	; 0x01
    332e:	9a 81       	ldd	r25, Y+2	; 0x02
    3330:	ab 81       	ldd	r26, Y+3	; 0x03
    3332:	bc 81       	ldd	r27, Y+4	; 0x04
    3334:	2a e0       	ldi	r18, 0x0A	; 10
    3336:	30 e0       	ldi	r19, 0x00	; 0
    3338:	40 e0       	ldi	r20, 0x00	; 0
    333a:	50 e0       	ldi	r21, 0x00	; 0
    333c:	bc 01       	movw	r22, r24
    333e:	cd 01       	movw	r24, r26
    3340:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <__mulsi3>
    3344:	7b 01       	movw	r14, r22
    3346:	8c 01       	movw	r16, r24
    3348:	8d 81       	ldd	r24, Y+5	; 0x05
    334a:	9e 81       	ldd	r25, Y+6	; 0x06
    334c:	af 81       	ldd	r26, Y+7	; 0x07
    334e:	b8 85       	ldd	r27, Y+8	; 0x08
    3350:	2a e0       	ldi	r18, 0x0A	; 10
    3352:	30 e0       	ldi	r19, 0x00	; 0
    3354:	40 e0       	ldi	r20, 0x00	; 0
    3356:	50 e0       	ldi	r21, 0x00	; 0
    3358:	bc 01       	movw	r22, r24
    335a:	cd 01       	movw	r24, r26
    335c:	0e 94 10 28 	call	0x5020	; 0x5020 <__udivmodsi4>
    3360:	dc 01       	movw	r26, r24
    3362:	cb 01       	movw	r24, r22
    3364:	8e 0d       	add	r24, r14
    3366:	9f 1d       	adc	r25, r15
    3368:	a0 1f       	adc	r26, r16
    336a:	b1 1f       	adc	r27, r17
    336c:	89 83       	std	Y+1, r24	; 0x01
    336e:	9a 83       	std	Y+2, r25	; 0x02
    3370:	ab 83       	std	Y+3, r26	; 0x03
    3372:	bc 83       	std	Y+4, r27	; 0x04
 			copy_u32Number/=10;
    3374:	8d 81       	ldd	r24, Y+5	; 0x05
    3376:	9e 81       	ldd	r25, Y+6	; 0x06
    3378:	af 81       	ldd	r26, Y+7	; 0x07
    337a:	b8 85       	ldd	r27, Y+8	; 0x08
    337c:	2a e0       	ldi	r18, 0x0A	; 10
    337e:	30 e0       	ldi	r19, 0x00	; 0
    3380:	40 e0       	ldi	r20, 0x00	; 0
    3382:	50 e0       	ldi	r21, 0x00	; 0
    3384:	bc 01       	movw	r22, r24
    3386:	cd 01       	movw	r24, r26
    3388:	0e 94 10 28 	call	0x5020	; 0x5020 <__udivmodsi4>
    338c:	da 01       	movw	r26, r20
    338e:	c9 01       	movw	r24, r18
    3390:	8d 83       	std	Y+5, r24	; 0x05
    3392:	9e 83       	std	Y+6, r25	; 0x06
    3394:	af 83       	std	Y+7, r26	; 0x07
    3396:	b8 87       	std	Y+8, r27	; 0x08
 u32 local_u32ReversedNumber=1;
 	 if(copy_u32Number ==0){
 		 LCD_voidDisplayChar('0');
 	 }
 	 else{
 		 while(copy_u32Number !=0){
    3398:	8d 81       	ldd	r24, Y+5	; 0x05
    339a:	9e 81       	ldd	r25, Y+6	; 0x06
    339c:	af 81       	ldd	r26, Y+7	; 0x07
    339e:	b8 85       	ldd	r27, Y+8	; 0x08
    33a0:	00 97       	sbiw	r24, 0x00	; 0
    33a2:	a1 05       	cpc	r26, r1
    33a4:	b1 05       	cpc	r27, r1
    33a6:	11 f6       	brne	.-124    	; 0x332c <LCD_voidDisplayNumber+0x4c>
 			local_u32ReversedNumber= (local_u32ReversedNumber * 10) + (copy_u32Number % 10);
 			copy_u32Number/=10;
 		 }

 	 do{
 		LCD_voidDisplayChar((local_u32ReversedNumber%10) +'0');
    33a8:	89 81       	ldd	r24, Y+1	; 0x01
    33aa:	9a 81       	ldd	r25, Y+2	; 0x02
    33ac:	ab 81       	ldd	r26, Y+3	; 0x03
    33ae:	bc 81       	ldd	r27, Y+4	; 0x04
    33b0:	2a e0       	ldi	r18, 0x0A	; 10
    33b2:	30 e0       	ldi	r19, 0x00	; 0
    33b4:	40 e0       	ldi	r20, 0x00	; 0
    33b6:	50 e0       	ldi	r21, 0x00	; 0
    33b8:	bc 01       	movw	r22, r24
    33ba:	cd 01       	movw	r24, r26
    33bc:	0e 94 10 28 	call	0x5020	; 0x5020 <__udivmodsi4>
    33c0:	dc 01       	movw	r26, r24
    33c2:	cb 01       	movw	r24, r22
    33c4:	80 5d       	subi	r24, 0xD0	; 208
    33c6:	0e 94 1c 18 	call	0x3038	; 0x3038 <LCD_voidDisplayChar>
 		local_u32ReversedNumber/=10;
    33ca:	89 81       	ldd	r24, Y+1	; 0x01
    33cc:	9a 81       	ldd	r25, Y+2	; 0x02
    33ce:	ab 81       	ldd	r26, Y+3	; 0x03
    33d0:	bc 81       	ldd	r27, Y+4	; 0x04
    33d2:	2a e0       	ldi	r18, 0x0A	; 10
    33d4:	30 e0       	ldi	r19, 0x00	; 0
    33d6:	40 e0       	ldi	r20, 0x00	; 0
    33d8:	50 e0       	ldi	r21, 0x00	; 0
    33da:	bc 01       	movw	r22, r24
    33dc:	cd 01       	movw	r24, r26
    33de:	0e 94 10 28 	call	0x5020	; 0x5020 <__udivmodsi4>
    33e2:	da 01       	movw	r26, r20
    33e4:	c9 01       	movw	r24, r18
    33e6:	89 83       	std	Y+1, r24	; 0x01
    33e8:	9a 83       	std	Y+2, r25	; 0x02
    33ea:	ab 83       	std	Y+3, r26	; 0x03
    33ec:	bc 83       	std	Y+4, r27	; 0x04
 	 }
 	 while(local_u32ReversedNumber !=1);
    33ee:	89 81       	ldd	r24, Y+1	; 0x01
    33f0:	9a 81       	ldd	r25, Y+2	; 0x02
    33f2:	ab 81       	ldd	r26, Y+3	; 0x03
    33f4:	bc 81       	ldd	r27, Y+4	; 0x04
    33f6:	81 30       	cpi	r24, 0x01	; 1
    33f8:	91 05       	cpc	r25, r1
    33fa:	a1 05       	cpc	r26, r1
    33fc:	b1 05       	cpc	r27, r1
    33fe:	a1 f6       	brne	.-88     	; 0x33a8 <LCD_voidDisplayNumber+0xc8>

 	 }
}
    3400:	28 96       	adiw	r28, 0x08	; 8
    3402:	0f b6       	in	r0, 0x3f	; 63
    3404:	f8 94       	cli
    3406:	de bf       	out	0x3e, r29	; 62
    3408:	0f be       	out	0x3f, r0	; 63
    340a:	cd bf       	out	0x3d, r28	; 61
    340c:	cf 91       	pop	r28
    340e:	df 91       	pop	r29
    3410:	1f 91       	pop	r17
    3412:	0f 91       	pop	r16
    3414:	ff 90       	pop	r15
    3416:	ef 90       	pop	r14
    3418:	08 95       	ret

0000341a <LED_voidInit>:
#include "STD_TYPES.h"

#include "DIO_interface.h"
#include "LED_interface.h"

void LED_voidInit(u8 copy_u8LedPort,u8 copy_u8LedPin){
    341a:	df 93       	push	r29
    341c:	cf 93       	push	r28
    341e:	00 d0       	rcall	.+0      	; 0x3420 <LED_voidInit+0x6>
    3420:	cd b7       	in	r28, 0x3d	; 61
    3422:	de b7       	in	r29, 0x3e	; 62
    3424:	89 83       	std	Y+1, r24	; 0x01
    3426:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinDirection(copy_u8LedPort,copy_u8LedPin,DIO_PIN_OUTPUT);
    3428:	89 81       	ldd	r24, Y+1	; 0x01
    342a:	6a 81       	ldd	r22, Y+2	; 0x02
    342c:	41 e0       	ldi	r20, 0x01	; 1
    342e:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>
}
    3432:	0f 90       	pop	r0
    3434:	0f 90       	pop	r0
    3436:	cf 91       	pop	r28
    3438:	df 91       	pop	r29
    343a:	08 95       	ret

0000343c <LED_voidOn>:
void LED_voidOn(u8 copy_u8LedPort,u8 copy_u8LedPin,u8 copy_LedConnectionType){
    343c:	df 93       	push	r29
    343e:	cf 93       	push	r28
    3440:	00 d0       	rcall	.+0      	; 0x3442 <LED_voidOn+0x6>
    3442:	00 d0       	rcall	.+0      	; 0x3444 <LED_voidOn+0x8>
    3444:	0f 92       	push	r0
    3446:	cd b7       	in	r28, 0x3d	; 61
    3448:	de b7       	in	r29, 0x3e	; 62
    344a:	89 83       	std	Y+1, r24	; 0x01
    344c:	6a 83       	std	Y+2, r22	; 0x02
    344e:	4b 83       	std	Y+3, r20	; 0x03
	switch(copy_LedConnectionType){
    3450:	8b 81       	ldd	r24, Y+3	; 0x03
    3452:	28 2f       	mov	r18, r24
    3454:	30 e0       	ldi	r19, 0x00	; 0
    3456:	3d 83       	std	Y+5, r19	; 0x05
    3458:	2c 83       	std	Y+4, r18	; 0x04
    345a:	8c 81       	ldd	r24, Y+4	; 0x04
    345c:	9d 81       	ldd	r25, Y+5	; 0x05
    345e:	00 97       	sbiw	r24, 0x00	; 0
    3460:	31 f0       	breq	.+12     	; 0x346e <LED_voidOn+0x32>
    3462:	2c 81       	ldd	r18, Y+4	; 0x04
    3464:	3d 81       	ldd	r19, Y+5	; 0x05
    3466:	21 30       	cpi	r18, 0x01	; 1
    3468:	31 05       	cpc	r19, r1
    346a:	39 f0       	breq	.+14     	; 0x347a <LED_voidOn+0x3e>
    346c:	0b c0       	rjmp	.+22     	; 0x3484 <LED_voidOn+0x48>
	case LED_FORWARD_CONNECTION:
		DIO_voidSetPinValue(copy_u8LedPort,copy_u8LedPin,DIO_PIN_HIGH);
    346e:	89 81       	ldd	r24, Y+1	; 0x01
    3470:	6a 81       	ldd	r22, Y+2	; 0x02
    3472:	41 e0       	ldi	r20, 0x01	; 1
    3474:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
    3478:	05 c0       	rjmp	.+10     	; 0x3484 <LED_voidOn+0x48>
		break;
	case LED_REVERSED_CONNECTION:
		DIO_voidSetPinValue(copy_u8LedPort,copy_u8LedPin,DIO_PIN_LOW);
    347a:	89 81       	ldd	r24, Y+1	; 0x01
    347c:	6a 81       	ldd	r22, Y+2	; 0x02
    347e:	40 e0       	ldi	r20, 0x00	; 0
    3480:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
		break;

	}

}
    3484:	0f 90       	pop	r0
    3486:	0f 90       	pop	r0
    3488:	0f 90       	pop	r0
    348a:	0f 90       	pop	r0
    348c:	0f 90       	pop	r0
    348e:	cf 91       	pop	r28
    3490:	df 91       	pop	r29
    3492:	08 95       	ret

00003494 <LED_voidOff>:
void LED_voidOff(u8 copy_u8LedPort,u8 copy_u8LedPin,u8 copy_LedConnectionType){
    3494:	df 93       	push	r29
    3496:	cf 93       	push	r28
    3498:	00 d0       	rcall	.+0      	; 0x349a <LED_voidOff+0x6>
    349a:	00 d0       	rcall	.+0      	; 0x349c <LED_voidOff+0x8>
    349c:	0f 92       	push	r0
    349e:	cd b7       	in	r28, 0x3d	; 61
    34a0:	de b7       	in	r29, 0x3e	; 62
    34a2:	89 83       	std	Y+1, r24	; 0x01
    34a4:	6a 83       	std	Y+2, r22	; 0x02
    34a6:	4b 83       	std	Y+3, r20	; 0x03
	switch(copy_LedConnectionType){
    34a8:	8b 81       	ldd	r24, Y+3	; 0x03
    34aa:	28 2f       	mov	r18, r24
    34ac:	30 e0       	ldi	r19, 0x00	; 0
    34ae:	3d 83       	std	Y+5, r19	; 0x05
    34b0:	2c 83       	std	Y+4, r18	; 0x04
    34b2:	8c 81       	ldd	r24, Y+4	; 0x04
    34b4:	9d 81       	ldd	r25, Y+5	; 0x05
    34b6:	00 97       	sbiw	r24, 0x00	; 0
    34b8:	31 f0       	breq	.+12     	; 0x34c6 <LED_voidOff+0x32>
    34ba:	2c 81       	ldd	r18, Y+4	; 0x04
    34bc:	3d 81       	ldd	r19, Y+5	; 0x05
    34be:	21 30       	cpi	r18, 0x01	; 1
    34c0:	31 05       	cpc	r19, r1
    34c2:	39 f0       	breq	.+14     	; 0x34d2 <LED_voidOff+0x3e>
    34c4:	0b c0       	rjmp	.+22     	; 0x34dc <LED_voidOff+0x48>
	case LED_FORWARD_CONNECTION:
		DIO_voidSetPinValue(copy_u8LedPort,copy_u8LedPin,DIO_PIN_LOW);
    34c6:	89 81       	ldd	r24, Y+1	; 0x01
    34c8:	6a 81       	ldd	r22, Y+2	; 0x02
    34ca:	40 e0       	ldi	r20, 0x00	; 0
    34cc:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
    34d0:	05 c0       	rjmp	.+10     	; 0x34dc <LED_voidOff+0x48>
		break;
	case LED_REVERSED_CONNECTION:
		DIO_voidSetPinValue(copy_u8LedPort,copy_u8LedPin,DIO_PIN_HIGH);
    34d2:	89 81       	ldd	r24, Y+1	; 0x01
    34d4:	6a 81       	ldd	r22, Y+2	; 0x02
    34d6:	41 e0       	ldi	r20, 0x01	; 1
    34d8:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
		break;

	}
}
    34dc:	0f 90       	pop	r0
    34de:	0f 90       	pop	r0
    34e0:	0f 90       	pop	r0
    34e2:	0f 90       	pop	r0
    34e4:	0f 90       	pop	r0
    34e6:	cf 91       	pop	r28
    34e8:	df 91       	pop	r29
    34ea:	08 95       	ret

000034ec <LED_voidToggle>:
void LED_voidToggle(u8 copy_u8LedPort,u8 copy_u8LedPin){
    34ec:	df 93       	push	r29
    34ee:	cf 93       	push	r28
    34f0:	00 d0       	rcall	.+0      	; 0x34f2 <LED_voidToggle+0x6>
    34f2:	cd b7       	in	r28, 0x3d	; 61
    34f4:	de b7       	in	r29, 0x3e	; 62
    34f6:	89 83       	std	Y+1, r24	; 0x01
    34f8:	6a 83       	std	Y+2, r22	; 0x02
	 DIO_voidTogglePinValue(copy_u8LedPort,copy_u8LedPin);
    34fa:	89 81       	ldd	r24, Y+1	; 0x01
    34fc:	6a 81       	ldd	r22, Y+2	; 0x02
    34fe:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <DIO_voidTogglePinValue>
}
    3502:	0f 90       	pop	r0
    3504:	0f 90       	pop	r0
    3506:	cf 91       	pop	r28
    3508:	df 91       	pop	r29
    350a:	08 95       	ret

0000350c <LM35_voidInit>:
#include "STD_TYPES.h"
#include "DIO_interface.h"
#include "ADC_interface.h"
#include "LM35_interface.h"

void LM35_voidInit(u8 copy_u8ChannelId){
    350c:	df 93       	push	r29
    350e:	cf 93       	push	r28
    3510:	0f 92       	push	r0
    3512:	cd b7       	in	r28, 0x3d	; 61
    3514:	de b7       	in	r29, 0x3e	; 62
    3516:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinDirection(DIO_PORTA,copy_u8ChannelId,DIO_PIN_INPUT);
    3518:	80 e0       	ldi	r24, 0x00	; 0
    351a:	69 81       	ldd	r22, Y+1	; 0x01
    351c:	40 e0       	ldi	r20, 0x00	; 0
    351e:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>
	ADC_voidInit(ADC_REFERANCE_INTERNAL);
    3522:	82 e0       	ldi	r24, 0x02	; 2
    3524:	0e 94 47 07 	call	0xe8e	; 0xe8e <ADC_voidInit>
}
    3528:	0f 90       	pop	r0
    352a:	cf 91       	pop	r28
    352c:	df 91       	pop	r29
    352e:	08 95       	ret

00003530 <LM35_voidGetTemprature>:
void LM35_voidGetTemprature(u8 copy_u8ChannelId,u16* copy_pu16Temprature){
    3530:	df 93       	push	r29
    3532:	cf 93       	push	r28
    3534:	cd b7       	in	r28, 0x3d	; 61
    3536:	de b7       	in	r29, 0x3e	; 62
    3538:	27 97       	sbiw	r28, 0x07	; 7
    353a:	0f b6       	in	r0, 0x3f	; 63
    353c:	f8 94       	cli
    353e:	de bf       	out	0x3e, r29	; 62
    3540:	0f be       	out	0x3f, r0	; 63
    3542:	cd bf       	out	0x3d, r28	; 61
    3544:	8d 83       	std	Y+5, r24	; 0x05
    3546:	7f 83       	std	Y+7, r23	; 0x07
    3548:	6e 83       	std	Y+6, r22	; 0x06
	if(copy_pu16Temprature != NULL){
    354a:	8e 81       	ldd	r24, Y+6	; 0x06
    354c:	9f 81       	ldd	r25, Y+7	; 0x07
    354e:	00 97       	sbiw	r24, 0x00	; 0
    3550:	69 f1       	breq	.+90     	; 0x35ac <LM35_voidGetTemprature+0x7c>
	u16 local_u16DigitalValue,local_u16AnalogValue;

	ADC_voidGetDigigtalValue(copy_u8ChannelId,&local_u16DigitalValue);
    3552:	9e 01       	movw	r18, r28
    3554:	2d 5f       	subi	r18, 0xFD	; 253
    3556:	3f 4f       	sbci	r19, 0xFF	; 255
    3558:	8d 81       	ldd	r24, Y+5	; 0x05
    355a:	b9 01       	movw	r22, r18
    355c:	0e 94 c4 07 	call	0xf88	; 0xf88 <ADC_voidGetDigigtalValue>

	local_u16AnalogValue=((u32)local_u16DigitalValue * 2560)/ 1024;
    3560:	8b 81       	ldd	r24, Y+3	; 0x03
    3562:	9c 81       	ldd	r25, Y+4	; 0x04
    3564:	cc 01       	movw	r24, r24
    3566:	a0 e0       	ldi	r26, 0x00	; 0
    3568:	b0 e0       	ldi	r27, 0x00	; 0
    356a:	20 e0       	ldi	r18, 0x00	; 0
    356c:	3a e0       	ldi	r19, 0x0A	; 10
    356e:	40 e0       	ldi	r20, 0x00	; 0
    3570:	50 e0       	ldi	r21, 0x00	; 0
    3572:	bc 01       	movw	r22, r24
    3574:	cd 01       	movw	r24, r26
    3576:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <__mulsi3>
    357a:	dc 01       	movw	r26, r24
    357c:	cb 01       	movw	r24, r22
    357e:	07 2e       	mov	r0, r23
    3580:	7a e0       	ldi	r23, 0x0A	; 10
    3582:	b6 95       	lsr	r27
    3584:	a7 95       	ror	r26
    3586:	97 95       	ror	r25
    3588:	87 95       	ror	r24
    358a:	7a 95       	dec	r23
    358c:	d1 f7       	brne	.-12     	; 0x3582 <LM35_voidGetTemprature+0x52>
    358e:	70 2d       	mov	r23, r0
    3590:	9a 83       	std	Y+2, r25	; 0x02
    3592:	89 83       	std	Y+1, r24	; 0x01

	*copy_pu16Temprature=local_u16AnalogValue/10;
    3594:	89 81       	ldd	r24, Y+1	; 0x01
    3596:	9a 81       	ldd	r25, Y+2	; 0x02
    3598:	2a e0       	ldi	r18, 0x0A	; 10
    359a:	30 e0       	ldi	r19, 0x00	; 0
    359c:	b9 01       	movw	r22, r18
    359e:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <__udivmodhi4>
    35a2:	cb 01       	movw	r24, r22
    35a4:	ee 81       	ldd	r30, Y+6	; 0x06
    35a6:	ff 81       	ldd	r31, Y+7	; 0x07
    35a8:	91 83       	std	Z+1, r25	; 0x01
    35aa:	80 83       	st	Z, r24
	}
	else{
		//return error
	}
}
    35ac:	27 96       	adiw	r28, 0x07	; 7
    35ae:	0f b6       	in	r0, 0x3f	; 63
    35b0:	f8 94       	cli
    35b2:	de bf       	out	0x3e, r29	; 62
    35b4:	0f be       	out	0x3f, r0	; 63
    35b6:	cd bf       	out	0x3d, r28	; 61
    35b8:	cf 91       	pop	r28
    35ba:	df 91       	pop	r29
    35bc:	08 95       	ret

000035be <SERVO_voidInit>:
#include "DIO_interface.h"
#include "TIMER1_interface.h"
#include "SERVO_interface.h"


void SERVO_voidInit(){
    35be:	df 93       	push	r29
    35c0:	cf 93       	push	r28
    35c2:	cd b7       	in	r28, 0x3d	; 61
    35c4:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN5,DIO_PIN_OUTPUT);
    35c6:	83 e0       	ldi	r24, 0x03	; 3
    35c8:	65 e0       	ldi	r22, 0x05	; 5
    35ca:	41 e0       	ldi	r20, 0x01	; 1
    35cc:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>
	TIMER1_voidInit();
    35d0:	0e 94 a5 1c 	call	0x394a	; 0x394a <TIMER1_voidInit>

}
    35d4:	cf 91       	pop	r28
    35d6:	df 91       	pop	r29
    35d8:	08 95       	ret

000035da <SERVO_voidOn>:
void SERVO_voidOn(f32 copy_f32Angle){
    35da:	df 93       	push	r29
    35dc:	cf 93       	push	r28
    35de:	cd b7       	in	r28, 0x3d	; 61
    35e0:	de b7       	in	r29, 0x3e	; 62
    35e2:	28 97       	sbiw	r28, 0x08	; 8
    35e4:	0f b6       	in	r0, 0x3f	; 63
    35e6:	f8 94       	cli
    35e8:	de bf       	out	0x3e, r29	; 62
    35ea:	0f be       	out	0x3f, r0	; 63
    35ec:	cd bf       	out	0x3d, r28	; 61
    35ee:	6d 83       	std	Y+5, r22	; 0x05
    35f0:	7e 83       	std	Y+6, r23	; 0x06
    35f2:	8f 83       	std	Y+7, r24	; 0x07
    35f4:	98 87       	std	Y+8, r25	; 0x08
	f32 cpoy_f32DutyCycleRatio;
	if(copy_f32Angle>=-90 && copy_f32Angle <=90){
    35f6:	6d 81       	ldd	r22, Y+5	; 0x05
    35f8:	7e 81       	ldd	r23, Y+6	; 0x06
    35fa:	8f 81       	ldd	r24, Y+7	; 0x07
    35fc:	98 85       	ldd	r25, Y+8	; 0x08
    35fe:	20 e0       	ldi	r18, 0x00	; 0
    3600:	30 e0       	ldi	r19, 0x00	; 0
    3602:	44 eb       	ldi	r20, 0xB4	; 180
    3604:	52 ec       	ldi	r21, 0xC2	; 194
    3606:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    360a:	88 23       	and	r24, r24
    360c:	34 f1       	brlt	.+76     	; 0x365a <SERVO_voidOn+0x80>
    360e:	6d 81       	ldd	r22, Y+5	; 0x05
    3610:	7e 81       	ldd	r23, Y+6	; 0x06
    3612:	8f 81       	ldd	r24, Y+7	; 0x07
    3614:	98 85       	ldd	r25, Y+8	; 0x08
    3616:	20 e0       	ldi	r18, 0x00	; 0
    3618:	30 e0       	ldi	r19, 0x00	; 0
    361a:	44 eb       	ldi	r20, 0xB4	; 180
    361c:	52 e4       	ldi	r21, 0x42	; 66
    361e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    3622:	18 16       	cp	r1, r24
    3624:	d4 f0       	brlt	.+52     	; 0x365a <SERVO_voidOn+0x80>
		cpoy_f32DutyCycleRatio=( copy_f32Angle/36 )+7.5;
    3626:	6d 81       	ldd	r22, Y+5	; 0x05
    3628:	7e 81       	ldd	r23, Y+6	; 0x06
    362a:	8f 81       	ldd	r24, Y+7	; 0x07
    362c:	98 85       	ldd	r25, Y+8	; 0x08
    362e:	20 e0       	ldi	r18, 0x00	; 0
    3630:	30 e0       	ldi	r19, 0x00	; 0
    3632:	40 e1       	ldi	r20, 0x10	; 16
    3634:	52 e4       	ldi	r21, 0x42	; 66
    3636:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    363a:	dc 01       	movw	r26, r24
    363c:	cb 01       	movw	r24, r22
    363e:	bc 01       	movw	r22, r24
    3640:	cd 01       	movw	r24, r26
    3642:	20 e0       	ldi	r18, 0x00	; 0
    3644:	30 e0       	ldi	r19, 0x00	; 0
    3646:	40 ef       	ldi	r20, 0xF0	; 240
    3648:	50 e4       	ldi	r21, 0x40	; 64
    364a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    364e:	dc 01       	movw	r26, r24
    3650:	cb 01       	movw	r24, r22
    3652:	89 83       	std	Y+1, r24	; 0x01
    3654:	9a 83       	std	Y+2, r25	; 0x02
    3656:	ab 83       	std	Y+3, r26	; 0x03
    3658:	bc 83       	std	Y+4, r27	; 0x04
	}
	else{
		//return error
	}

	TIMER1_PWMGenerateChannel(50 ,cpoy_f32DutyCycleRatio);
    365a:	29 81       	ldd	r18, Y+1	; 0x01
    365c:	3a 81       	ldd	r19, Y+2	; 0x02
    365e:	4b 81       	ldd	r20, Y+3	; 0x03
    3660:	5c 81       	ldd	r21, Y+4	; 0x04
    3662:	82 e3       	ldi	r24, 0x32	; 50
    3664:	90 e0       	ldi	r25, 0x00	; 0
    3666:	ba 01       	movw	r22, r20
    3668:	a9 01       	movw	r20, r18
    366a:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <TIMER1_PWMGenerateChannel>
}
    366e:	28 96       	adiw	r28, 0x08	; 8
    3670:	0f b6       	in	r0, 0x3f	; 63
    3672:	f8 94       	cli
    3674:	de bf       	out	0x3e, r29	; 62
    3676:	0f be       	out	0x3f, r0	; 63
    3678:	cd bf       	out	0x3d, r28	; 61
    367a:	cf 91       	pop	r28
    367c:	df 91       	pop	r29
    367e:	08 95       	ret

00003680 <TIMER0_voidInit>:

static void (*PRV_pFunCallBackOVF)(void) = NULL;
static void (*PRV_pFunCallBackCTC)(void) = NULL;
static u16 PRV_u16CTC_counter;

void TIMER0_voidInit(){
    3680:	df 93       	push	r29
    3682:	cf 93       	push	r28
    3684:	cd b7       	in	r28, 0x3d	; 61
    3686:	de b7       	in	r29, 0x3e	; 62
		//select output compare interupt enable
		SET_BIT(TIMSK_REG,OCIE0);

#elif TIMER0_MODE ==TIMER0_FAST_PWM_MODE
		//select fast pwm mode mode
		SET_BIT(TCCR0_REG,WGM00);
    3688:	a3 e5       	ldi	r26, 0x53	; 83
    368a:	b0 e0       	ldi	r27, 0x00	; 0
    368c:	e3 e5       	ldi	r30, 0x53	; 83
    368e:	f0 e0       	ldi	r31, 0x00	; 0
    3690:	80 81       	ld	r24, Z
    3692:	80 64       	ori	r24, 0x40	; 64
    3694:	8c 93       	st	X, r24
		SET_BIT(TCCR0_REG,WGM01);
    3696:	a3 e5       	ldi	r26, 0x53	; 83
    3698:	b0 e0       	ldi	r27, 0x00	; 0
    369a:	e3 e5       	ldi	r30, 0x53	; 83
    369c:	f0 e0       	ldi	r31, 0x00	; 0
    369e:	80 81       	ld	r24, Z
    36a0:	88 60       	ori	r24, 0x08	; 8
    36a2:	8c 93       	st	X, r24


		//select non inverting mode
		CLR_BIT(TCCR0_REG,COM00);
    36a4:	a3 e5       	ldi	r26, 0x53	; 83
    36a6:	b0 e0       	ldi	r27, 0x00	; 0
    36a8:	e3 e5       	ldi	r30, 0x53	; 83
    36aa:	f0 e0       	ldi	r31, 0x00	; 0
    36ac:	80 81       	ld	r24, Z
    36ae:	8f 7e       	andi	r24, 0xEF	; 239
    36b0:	8c 93       	st	X, r24
		SET_BIT(TCCR0_REG,COM01);
    36b2:	a3 e5       	ldi	r26, 0x53	; 83
    36b4:	b0 e0       	ldi	r27, 0x00	; 0
    36b6:	e3 e5       	ldi	r30, 0x53	; 83
    36b8:	f0 e0       	ldi	r31, 0x00	; 0
    36ba:	80 81       	ld	r24, Z
    36bc:	80 62       	ori	r24, 0x20	; 32
    36be:	8c 93       	st	X, r24


#endif

}
    36c0:	cf 91       	pop	r28
    36c2:	df 91       	pop	r29
    36c4:	08 95       	ret

000036c6 <TIMER0_PWMGenerateChannel>:

void TIMER0_PWMGenerateChannel(u8 copy_u8DutyCycle){
    36c6:	df 93       	push	r29
    36c8:	cf 93       	push	r28
    36ca:	0f 92       	push	r0
    36cc:	cd b7       	in	r28, 0x3d	; 61
    36ce:	de b7       	in	r29, 0x3e	; 62
    36d0:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8DutyCycle <=100){
    36d2:	89 81       	ldd	r24, Y+1	; 0x01
    36d4:	85 36       	cpi	r24, 0x65	; 101
    36d6:	20 f5       	brcc	.+72     	; 0x3720 <TIMER0_PWMGenerateChannel+0x5a>
		//set OCR value
		OCR0_REG= ((copy_u8DutyCycle *256)/100)-1 ;
    36d8:	ec e5       	ldi	r30, 0x5C	; 92
    36da:	f0 e0       	ldi	r31, 0x00	; 0
    36dc:	89 81       	ldd	r24, Y+1	; 0x01
    36de:	88 2f       	mov	r24, r24
    36e0:	90 e0       	ldi	r25, 0x00	; 0
    36e2:	98 2f       	mov	r25, r24
    36e4:	88 27       	eor	r24, r24
    36e6:	24 e6       	ldi	r18, 0x64	; 100
    36e8:	30 e0       	ldi	r19, 0x00	; 0
    36ea:	b9 01       	movw	r22, r18
    36ec:	0e 94 fd 27 	call	0x4ffa	; 0x4ffa <__divmodhi4>
    36f0:	cb 01       	movw	r24, r22
    36f2:	81 50       	subi	r24, 0x01	; 1
    36f4:	80 83       	st	Z, r24

		//select PRESCALER 64
		SET_BIT(TCCR0_REG,CS00);
    36f6:	a3 e5       	ldi	r26, 0x53	; 83
    36f8:	b0 e0       	ldi	r27, 0x00	; 0
    36fa:	e3 e5       	ldi	r30, 0x53	; 83
    36fc:	f0 e0       	ldi	r31, 0x00	; 0
    36fe:	80 81       	ld	r24, Z
    3700:	81 60       	ori	r24, 0x01	; 1
    3702:	8c 93       	st	X, r24
		SET_BIT(TCCR0_REG,CS01);
    3704:	a3 e5       	ldi	r26, 0x53	; 83
    3706:	b0 e0       	ldi	r27, 0x00	; 0
    3708:	e3 e5       	ldi	r30, 0x53	; 83
    370a:	f0 e0       	ldi	r31, 0x00	; 0
    370c:	80 81       	ld	r24, Z
    370e:	82 60       	ori	r24, 0x02	; 2
    3710:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG,CS02);
    3712:	a3 e5       	ldi	r26, 0x53	; 83
    3714:	b0 e0       	ldi	r27, 0x00	; 0
    3716:	e3 e5       	ldi	r30, 0x53	; 83
    3718:	f0 e0       	ldi	r31, 0x00	; 0
    371a:	80 81       	ld	r24, Z
    371c:	8b 7f       	andi	r24, 0xFB	; 251
    371e:	8c 93       	st	X, r24
	}
	else{
		//return error
	}
}
    3720:	0f 90       	pop	r0
    3722:	cf 91       	pop	r28
    3724:	df 91       	pop	r29
    3726:	08 95       	ret

00003728 <TIMER0_voidStart>:

void TIMER0_voidStart(){
    3728:	df 93       	push	r29
    372a:	cf 93       	push	r28
    372c:	cd b7       	in	r28, 0x3d	; 61
    372e:	de b7       	in	r29, 0x3e	; 62
	//start for normal mode and ctc mode only
	//select PRESCALER 64
	SET_BIT(TCCR0_REG,CS00);
    3730:	a3 e5       	ldi	r26, 0x53	; 83
    3732:	b0 e0       	ldi	r27, 0x00	; 0
    3734:	e3 e5       	ldi	r30, 0x53	; 83
    3736:	f0 e0       	ldi	r31, 0x00	; 0
    3738:	80 81       	ld	r24, Z
    373a:	81 60       	ori	r24, 0x01	; 1
    373c:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,CS01);
    373e:	a3 e5       	ldi	r26, 0x53	; 83
    3740:	b0 e0       	ldi	r27, 0x00	; 0
    3742:	e3 e5       	ldi	r30, 0x53	; 83
    3744:	f0 e0       	ldi	r31, 0x00	; 0
    3746:	80 81       	ld	r24, Z
    3748:	82 60       	ori	r24, 0x02	; 2
    374a:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,CS02);
    374c:	a3 e5       	ldi	r26, 0x53	; 83
    374e:	b0 e0       	ldi	r27, 0x00	; 0
    3750:	e3 e5       	ldi	r30, 0x53	; 83
    3752:	f0 e0       	ldi	r31, 0x00	; 0
    3754:	80 81       	ld	r24, Z
    3756:	8b 7f       	andi	r24, 0xFB	; 251
    3758:	8c 93       	st	X, r24

}
    375a:	cf 91       	pop	r28
    375c:	df 91       	pop	r29
    375e:	08 95       	ret

00003760 <TIMER0_voidStop>:

void TIMER0_voidStop(){
    3760:	df 93       	push	r29
    3762:	cf 93       	push	r28
    3764:	cd b7       	in	r28, 0x3d	; 61
    3766:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0_REG,CS00);
    3768:	a3 e5       	ldi	r26, 0x53	; 83
    376a:	b0 e0       	ldi	r27, 0x00	; 0
    376c:	e3 e5       	ldi	r30, 0x53	; 83
    376e:	f0 e0       	ldi	r31, 0x00	; 0
    3770:	80 81       	ld	r24, Z
    3772:	8e 7f       	andi	r24, 0xFE	; 254
    3774:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,CS01);
    3776:	a3 e5       	ldi	r26, 0x53	; 83
    3778:	b0 e0       	ldi	r27, 0x00	; 0
    377a:	e3 e5       	ldi	r30, 0x53	; 83
    377c:	f0 e0       	ldi	r31, 0x00	; 0
    377e:	80 81       	ld	r24, Z
    3780:	8d 7f       	andi	r24, 0xFD	; 253
    3782:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,CS02);
    3784:	a3 e5       	ldi	r26, 0x53	; 83
    3786:	b0 e0       	ldi	r27, 0x00	; 0
    3788:	e3 e5       	ldi	r30, 0x53	; 83
    378a:	f0 e0       	ldi	r31, 0x00	; 0
    378c:	80 81       	ld	r24, Z
    378e:	8b 7f       	andi	r24, 0xFB	; 251
    3790:	8c 93       	st	X, r24
}
    3792:	cf 91       	pop	r28
    3794:	df 91       	pop	r29
    3796:	08 95       	ret

00003798 <TIMER0_voidSetDelay_msCompareMatchMode>:

void TIMER0_voidSetDelay_msCompareMatchMode(u16 copy_u16Delay_ms){
    3798:	df 93       	push	r29
    379a:	cf 93       	push	r28
    379c:	00 d0       	rcall	.+0      	; 0x379e <TIMER0_voidSetDelay_msCompareMatchMode+0x6>
    379e:	cd b7       	in	r28, 0x3d	; 61
    37a0:	de b7       	in	r29, 0x3e	; 62
    37a2:	9a 83       	std	Y+2, r25	; 0x02
    37a4:	89 83       	std	Y+1, r24	; 0x01
	//Under Condition Tick Time = 4Ms, OCR0 = 249
	OCR0_REG = TIMER0_OUTPUT_COMPARE_VALUE; // we may not write it
    37a6:	ec e5       	ldi	r30, 0x5C	; 92
    37a8:	f0 e0       	ldi	r31, 0x00	; 0
    37aa:	89 ef       	ldi	r24, 0xF9	; 249
    37ac:	80 83       	st	Z, r24
	PRV_u16CTC_counter = copy_u16Delay_ms;
    37ae:	89 81       	ldd	r24, Y+1	; 0x01
    37b0:	9a 81       	ldd	r25, Y+2	; 0x02
    37b2:	90 93 97 02 	sts	0x0297, r25
    37b6:	80 93 96 02 	sts	0x0296, r24

}
    37ba:	0f 90       	pop	r0
    37bc:	0f 90       	pop	r0
    37be:	cf 91       	pop	r28
    37c0:	df 91       	pop	r29
    37c2:	08 95       	ret

000037c4 <TIMER0_voidSetCallBackOVF>:
void TIMER0_voidSetCallBackOVF(void (* copy_pFunAction)(void)){
    37c4:	df 93       	push	r29
    37c6:	cf 93       	push	r28
    37c8:	00 d0       	rcall	.+0      	; 0x37ca <TIMER0_voidSetCallBackOVF+0x6>
    37ca:	cd b7       	in	r28, 0x3d	; 61
    37cc:	de b7       	in	r29, 0x3e	; 62
    37ce:	9a 83       	std	Y+2, r25	; 0x02
    37d0:	89 83       	std	Y+1, r24	; 0x01
	if (copy_pFunAction !=NULL){
    37d2:	89 81       	ldd	r24, Y+1	; 0x01
    37d4:	9a 81       	ldd	r25, Y+2	; 0x02
    37d6:	00 97       	sbiw	r24, 0x00	; 0
    37d8:	31 f0       	breq	.+12     	; 0x37e6 <TIMER0_voidSetCallBackOVF+0x22>
		PRV_pFunCallBackOVF=copy_pFunAction;
    37da:	89 81       	ldd	r24, Y+1	; 0x01
    37dc:	9a 81       	ldd	r25, Y+2	; 0x02
    37de:	90 93 8f 02 	sts	0x028F, r25
    37e2:	80 93 8e 02 	sts	0x028E, r24
	else
	{
		//error
	}

}
    37e6:	0f 90       	pop	r0
    37e8:	0f 90       	pop	r0
    37ea:	cf 91       	pop	r28
    37ec:	df 91       	pop	r29
    37ee:	08 95       	ret

000037f0 <TIMER0_voidSetCallBackCTC>:

void TIMER0_voidSetCallBackCTC(void (* copy_pFunAction)(void)){
    37f0:	df 93       	push	r29
    37f2:	cf 93       	push	r28
    37f4:	00 d0       	rcall	.+0      	; 0x37f6 <TIMER0_voidSetCallBackCTC+0x6>
    37f6:	cd b7       	in	r28, 0x3d	; 61
    37f8:	de b7       	in	r29, 0x3e	; 62
    37fa:	9a 83       	std	Y+2, r25	; 0x02
    37fc:	89 83       	std	Y+1, r24	; 0x01
	if (copy_pFunAction !=NULL){
    37fe:	89 81       	ldd	r24, Y+1	; 0x01
    3800:	9a 81       	ldd	r25, Y+2	; 0x02
    3802:	00 97       	sbiw	r24, 0x00	; 0
    3804:	31 f0       	breq	.+12     	; 0x3812 <TIMER0_voidSetCallBackCTC+0x22>
		PRV_pFunCallBackCTC=copy_pFunAction;
    3806:	89 81       	ldd	r24, Y+1	; 0x01
    3808:	9a 81       	ldd	r25, Y+2	; 0x02
    380a:	90 93 91 02 	sts	0x0291, r25
    380e:	80 93 90 02 	sts	0x0290, r24
	else
	{
		//error
	}

}
    3812:	0f 90       	pop	r0
    3814:	0f 90       	pop	r0
    3816:	cf 91       	pop	r28
    3818:	df 91       	pop	r29
    381a:	08 95       	ret

0000381c <__vector_11>:


void __vector_11(void) __attribute((signal));
void __vector_11(void){
    381c:	1f 92       	push	r1
    381e:	0f 92       	push	r0
    3820:	0f b6       	in	r0, 0x3f	; 63
    3822:	0f 92       	push	r0
    3824:	11 24       	eor	r1, r1
    3826:	2f 93       	push	r18
    3828:	3f 93       	push	r19
    382a:	4f 93       	push	r20
    382c:	5f 93       	push	r21
    382e:	6f 93       	push	r22
    3830:	7f 93       	push	r23
    3832:	8f 93       	push	r24
    3834:	9f 93       	push	r25
    3836:	af 93       	push	r26
    3838:	bf 93       	push	r27
    383a:	ef 93       	push	r30
    383c:	ff 93       	push	r31
    383e:	df 93       	push	r29
    3840:	cf 93       	push	r28
    3842:	cd b7       	in	r28, 0x3d	; 61
    3844:	de b7       	in	r29, 0x3e	; 62

	static u16 local_u16Counter;
	local_u16Counter++;
    3846:	80 91 92 02 	lds	r24, 0x0292
    384a:	90 91 93 02 	lds	r25, 0x0293
    384e:	01 96       	adiw	r24, 0x01	; 1
    3850:	90 93 93 02 	sts	0x0293, r25
    3854:	80 93 92 02 	sts	0x0292, r24

	if(TIMER0_OVERFLOW_COUNTER ==local_u16Counter){
    3858:	80 91 92 02 	lds	r24, 0x0292
    385c:	90 91 93 02 	lds	r25, 0x0293
    3860:	23 e0       	ldi	r18, 0x03	; 3
    3862:	81 3d       	cpi	r24, 0xD1	; 209
    3864:	92 07       	cpc	r25, r18
    3866:	99 f4       	brne	.+38     	; 0x388e <__vector_11+0x72>
		TCNT0_REG=TIMER0_PRELOAD_VALUE;
    3868:	e2 e5       	ldi	r30, 0x52	; 82
    386a:	f0 e0       	ldi	r31, 0x00	; 0
    386c:	81 e7       	ldi	r24, 0x71	; 113
    386e:	80 83       	st	Z, r24
		local_u16Counter=0;
    3870:	10 92 93 02 	sts	0x0293, r1
    3874:	10 92 92 02 	sts	0x0292, r1

		if(PRV_pFunCallBackOVF !=NULL){
    3878:	80 91 8e 02 	lds	r24, 0x028E
    387c:	90 91 8f 02 	lds	r25, 0x028F
    3880:	00 97       	sbiw	r24, 0x00	; 0
    3882:	29 f0       	breq	.+10     	; 0x388e <__vector_11+0x72>
			PRV_pFunCallBackOVF();
    3884:	e0 91 8e 02 	lds	r30, 0x028E
    3888:	f0 91 8f 02 	lds	r31, 0x028F
    388c:	09 95       	icall
		}
	}

}
    388e:	cf 91       	pop	r28
    3890:	df 91       	pop	r29
    3892:	ff 91       	pop	r31
    3894:	ef 91       	pop	r30
    3896:	bf 91       	pop	r27
    3898:	af 91       	pop	r26
    389a:	9f 91       	pop	r25
    389c:	8f 91       	pop	r24
    389e:	7f 91       	pop	r23
    38a0:	6f 91       	pop	r22
    38a2:	5f 91       	pop	r21
    38a4:	4f 91       	pop	r20
    38a6:	3f 91       	pop	r19
    38a8:	2f 91       	pop	r18
    38aa:	0f 90       	pop	r0
    38ac:	0f be       	out	0x3f, r0	; 63
    38ae:	0f 90       	pop	r0
    38b0:	1f 90       	pop	r1
    38b2:	18 95       	reti

000038b4 <__vector_10>:

void __vector_10(void) __attribute((signal));
void __vector_10(void){
    38b4:	1f 92       	push	r1
    38b6:	0f 92       	push	r0
    38b8:	0f b6       	in	r0, 0x3f	; 63
    38ba:	0f 92       	push	r0
    38bc:	11 24       	eor	r1, r1
    38be:	2f 93       	push	r18
    38c0:	3f 93       	push	r19
    38c2:	4f 93       	push	r20
    38c4:	5f 93       	push	r21
    38c6:	6f 93       	push	r22
    38c8:	7f 93       	push	r23
    38ca:	8f 93       	push	r24
    38cc:	9f 93       	push	r25
    38ce:	af 93       	push	r26
    38d0:	bf 93       	push	r27
    38d2:	ef 93       	push	r30
    38d4:	ff 93       	push	r31
    38d6:	df 93       	push	r29
    38d8:	cf 93       	push	r28
    38da:	cd b7       	in	r28, 0x3d	; 61
    38dc:	de b7       	in	r29, 0x3e	; 62

	static u16 local_u16Counter;
	local_u16Counter++;
    38de:	80 91 94 02 	lds	r24, 0x0294
    38e2:	90 91 95 02 	lds	r25, 0x0295
    38e6:	01 96       	adiw	r24, 0x01	; 1
    38e8:	90 93 95 02 	sts	0x0295, r25
    38ec:	80 93 94 02 	sts	0x0294, r24

	if(PRV_u16CTC_counter ==local_u16Counter){
    38f0:	20 91 96 02 	lds	r18, 0x0296
    38f4:	30 91 97 02 	lds	r19, 0x0297
    38f8:	80 91 94 02 	lds	r24, 0x0294
    38fc:	90 91 95 02 	lds	r25, 0x0295
    3900:	28 17       	cp	r18, r24
    3902:	39 07       	cpc	r19, r25
    3904:	79 f4       	brne	.+30     	; 0x3924 <__vector_10+0x70>
		local_u16Counter=0;
    3906:	10 92 95 02 	sts	0x0295, r1
    390a:	10 92 94 02 	sts	0x0294, r1

		if(PRV_pFunCallBackCTC !=NULL){
    390e:	80 91 90 02 	lds	r24, 0x0290
    3912:	90 91 91 02 	lds	r25, 0x0291
    3916:	00 97       	sbiw	r24, 0x00	; 0
    3918:	29 f0       	breq	.+10     	; 0x3924 <__vector_10+0x70>
			PRV_pFunCallBackCTC();
    391a:	e0 91 90 02 	lds	r30, 0x0290
    391e:	f0 91 91 02 	lds	r31, 0x0291
    3922:	09 95       	icall
		}
	}

}
    3924:	cf 91       	pop	r28
    3926:	df 91       	pop	r29
    3928:	ff 91       	pop	r31
    392a:	ef 91       	pop	r30
    392c:	bf 91       	pop	r27
    392e:	af 91       	pop	r26
    3930:	9f 91       	pop	r25
    3932:	8f 91       	pop	r24
    3934:	7f 91       	pop	r23
    3936:	6f 91       	pop	r22
    3938:	5f 91       	pop	r21
    393a:	4f 91       	pop	r20
    393c:	3f 91       	pop	r19
    393e:	2f 91       	pop	r18
    3940:	0f 90       	pop	r0
    3942:	0f be       	out	0x3f, r0	; 63
    3944:	0f 90       	pop	r0
    3946:	1f 90       	pop	r1
    3948:	18 95       	reti

0000394a <TIMER1_voidInit>:

static void (*PRV_pFunCallBackOVF)(void) = NULL;
static void (*PRV_pFunCallBackCTC)(void) = NULL;
static u16 PRV_u16CTC_counter;

void TIMER1_voidInit(){
    394a:	df 93       	push	r29
    394c:	cf 93       	push	r28
    394e:	cd b7       	in	r28, 0x3d	; 61
    3950:	de b7       	in	r29, 0x3e	; 62

		//select ctc interupt enable
		SET_BIT(TIMSK_REG,OCIE1A);
#elif TIMER1_MODE ==TIMER1_FAST_PWM_MODE14
		//select fast pwm mode14
		CLR_BIT(TCCR1A_REG,WGM10);
    3952:	af e4       	ldi	r26, 0x4F	; 79
    3954:	b0 e0       	ldi	r27, 0x00	; 0
    3956:	ef e4       	ldi	r30, 0x4F	; 79
    3958:	f0 e0       	ldi	r31, 0x00	; 0
    395a:	80 81       	ld	r24, Z
    395c:	8e 7f       	andi	r24, 0xFE	; 254
    395e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG,WGM11);
    3960:	af e4       	ldi	r26, 0x4F	; 79
    3962:	b0 e0       	ldi	r27, 0x00	; 0
    3964:	ef e4       	ldi	r30, 0x4F	; 79
    3966:	f0 e0       	ldi	r31, 0x00	; 0
    3968:	80 81       	ld	r24, Z
    396a:	82 60       	ori	r24, 0x02	; 2
    396c:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,WGM12);
    396e:	ae e4       	ldi	r26, 0x4E	; 78
    3970:	b0 e0       	ldi	r27, 0x00	; 0
    3972:	ee e4       	ldi	r30, 0x4E	; 78
    3974:	f0 e0       	ldi	r31, 0x00	; 0
    3976:	80 81       	ld	r24, Z
    3978:	88 60       	ori	r24, 0x08	; 8
    397a:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,WGM13);
    397c:	ae e4       	ldi	r26, 0x4E	; 78
    397e:	b0 e0       	ldi	r27, 0x00	; 0
    3980:	ee e4       	ldi	r30, 0x4E	; 78
    3982:	f0 e0       	ldi	r31, 0x00	; 0
    3984:	80 81       	ld	r24, Z
    3986:	80 61       	ori	r24, 0x10	; 16
    3988:	8c 93       	st	X, r24

		//non inverting
		CLR_BIT(TCCR1A_REG,COM1A0);
    398a:	af e4       	ldi	r26, 0x4F	; 79
    398c:	b0 e0       	ldi	r27, 0x00	; 0
    398e:	ef e4       	ldi	r30, 0x4F	; 79
    3990:	f0 e0       	ldi	r31, 0x00	; 0
    3992:	80 81       	ld	r24, Z
    3994:	8f 7b       	andi	r24, 0xBF	; 191
    3996:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG,COM1A1);
    3998:	af e4       	ldi	r26, 0x4F	; 79
    399a:	b0 e0       	ldi	r27, 0x00	; 0
    399c:	ef e4       	ldi	r30, 0x4F	; 79
    399e:	f0 e0       	ldi	r31, 0x00	; 0
    39a0:	80 81       	ld	r24, Z
    39a2:	80 68       	ori	r24, 0x80	; 128
    39a4:	8c 93       	st	X, r24

#endif

}
    39a6:	cf 91       	pop	r28
    39a8:	df 91       	pop	r29
    39aa:	08 95       	ret

000039ac <TIMER1_PWMGenerateChannel>:
void TIMER1_PWMGenerateChannel(u16 copy_u16Frequency_hz ,f32 copy_f32DutyCycley){
    39ac:	0f 93       	push	r16
    39ae:	1f 93       	push	r17
    39b0:	df 93       	push	r29
    39b2:	cf 93       	push	r28
    39b4:	00 d0       	rcall	.+0      	; 0x39b6 <TIMER1_PWMGenerateChannel+0xa>
    39b6:	00 d0       	rcall	.+0      	; 0x39b8 <TIMER1_PWMGenerateChannel+0xc>
    39b8:	00 d0       	rcall	.+0      	; 0x39ba <TIMER1_PWMGenerateChannel+0xe>
    39ba:	cd b7       	in	r28, 0x3d	; 61
    39bc:	de b7       	in	r29, 0x3e	; 62
    39be:	9a 83       	std	Y+2, r25	; 0x02
    39c0:	89 83       	std	Y+1, r24	; 0x01
    39c2:	4b 83       	std	Y+3, r20	; 0x03
    39c4:	5c 83       	std	Y+4, r21	; 0x04
    39c6:	6d 83       	std	Y+5, r22	; 0x05
    39c8:	7e 83       	std	Y+6, r23	; 0x06
	if(copy_f32DutyCycley<=100){
    39ca:	6b 81       	ldd	r22, Y+3	; 0x03
    39cc:	7c 81       	ldd	r23, Y+4	; 0x04
    39ce:	8d 81       	ldd	r24, Y+5	; 0x05
    39d0:	9e 81       	ldd	r25, Y+6	; 0x06
    39d2:	20 e0       	ldi	r18, 0x00	; 0
    39d4:	30 e0       	ldi	r19, 0x00	; 0
    39d6:	48 ec       	ldi	r20, 0xC8	; 200
    39d8:	52 e4       	ldi	r21, 0x42	; 66
    39da:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    39de:	18 16       	cp	r1, r24
    39e0:	0c f4       	brge	.+2      	; 0x39e4 <TIMER1_PWMGenerateChannel+0x38>
    39e2:	61 c0       	rjmp	.+194    	; 0x3aa6 <TIMER1_PWMGenerateChannel+0xfa>
		ICR1_u16_REG=((1000000UL/copy_u16Frequency_hz)/4)-1;
    39e4:	06 e4       	ldi	r16, 0x46	; 70
    39e6:	10 e0       	ldi	r17, 0x00	; 0
    39e8:	89 81       	ldd	r24, Y+1	; 0x01
    39ea:	9a 81       	ldd	r25, Y+2	; 0x02
    39ec:	9c 01       	movw	r18, r24
    39ee:	40 e0       	ldi	r20, 0x00	; 0
    39f0:	50 e0       	ldi	r21, 0x00	; 0
    39f2:	80 e9       	ldi	r24, 0x90	; 144
    39f4:	90 ed       	ldi	r25, 0xD0	; 208
    39f6:	a3 e0       	ldi	r26, 0x03	; 3
    39f8:	b0 e0       	ldi	r27, 0x00	; 0
    39fa:	bc 01       	movw	r22, r24
    39fc:	cd 01       	movw	r24, r26
    39fe:	0e 94 10 28 	call	0x5020	; 0x5020 <__udivmodsi4>
    3a02:	da 01       	movw	r26, r20
    3a04:	c9 01       	movw	r24, r18
    3a06:	01 97       	sbiw	r24, 0x01	; 1
    3a08:	f8 01       	movw	r30, r16
    3a0a:	91 83       	std	Z+1, r25	; 0x01
    3a0c:	80 83       	st	Z, r24
		OCR1A_u16_REG=((copy_f32DutyCycley * (ICR1_u16_REG+1))/100)-1;
    3a0e:	0a e4       	ldi	r16, 0x4A	; 74
    3a10:	10 e0       	ldi	r17, 0x00	; 0
    3a12:	e6 e4       	ldi	r30, 0x46	; 70
    3a14:	f0 e0       	ldi	r31, 0x00	; 0
    3a16:	80 81       	ld	r24, Z
    3a18:	91 81       	ldd	r25, Z+1	; 0x01
    3a1a:	01 96       	adiw	r24, 0x01	; 1
    3a1c:	cc 01       	movw	r24, r24
    3a1e:	a0 e0       	ldi	r26, 0x00	; 0
    3a20:	b0 e0       	ldi	r27, 0x00	; 0
    3a22:	bc 01       	movw	r22, r24
    3a24:	cd 01       	movw	r24, r26
    3a26:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    3a2a:	dc 01       	movw	r26, r24
    3a2c:	cb 01       	movw	r24, r22
    3a2e:	bc 01       	movw	r22, r24
    3a30:	cd 01       	movw	r24, r26
    3a32:	2b 81       	ldd	r18, Y+3	; 0x03
    3a34:	3c 81       	ldd	r19, Y+4	; 0x04
    3a36:	4d 81       	ldd	r20, Y+5	; 0x05
    3a38:	5e 81       	ldd	r21, Y+6	; 0x06
    3a3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a3e:	dc 01       	movw	r26, r24
    3a40:	cb 01       	movw	r24, r22
    3a42:	bc 01       	movw	r22, r24
    3a44:	cd 01       	movw	r24, r26
    3a46:	20 e0       	ldi	r18, 0x00	; 0
    3a48:	30 e0       	ldi	r19, 0x00	; 0
    3a4a:	48 ec       	ldi	r20, 0xC8	; 200
    3a4c:	52 e4       	ldi	r21, 0x42	; 66
    3a4e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3a52:	dc 01       	movw	r26, r24
    3a54:	cb 01       	movw	r24, r22
    3a56:	bc 01       	movw	r22, r24
    3a58:	cd 01       	movw	r24, r26
    3a5a:	20 e0       	ldi	r18, 0x00	; 0
    3a5c:	30 e0       	ldi	r19, 0x00	; 0
    3a5e:	40 e8       	ldi	r20, 0x80	; 128
    3a60:	5f e3       	ldi	r21, 0x3F	; 63
    3a62:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3a66:	dc 01       	movw	r26, r24
    3a68:	cb 01       	movw	r24, r22
    3a6a:	bc 01       	movw	r22, r24
    3a6c:	cd 01       	movw	r24, r26
    3a6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a72:	dc 01       	movw	r26, r24
    3a74:	cb 01       	movw	r24, r22
    3a76:	f8 01       	movw	r30, r16
    3a78:	91 83       	std	Z+1, r25	; 0x01
    3a7a:	80 83       	st	Z, r24


		//select PRESCALER 64
		SET_BIT(TCCR1B_REG,CS10);
    3a7c:	ae e4       	ldi	r26, 0x4E	; 78
    3a7e:	b0 e0       	ldi	r27, 0x00	; 0
    3a80:	ee e4       	ldi	r30, 0x4E	; 78
    3a82:	f0 e0       	ldi	r31, 0x00	; 0
    3a84:	80 81       	ld	r24, Z
    3a86:	81 60       	ori	r24, 0x01	; 1
    3a88:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,CS11);
    3a8a:	ae e4       	ldi	r26, 0x4E	; 78
    3a8c:	b0 e0       	ldi	r27, 0x00	; 0
    3a8e:	ee e4       	ldi	r30, 0x4E	; 78
    3a90:	f0 e0       	ldi	r31, 0x00	; 0
    3a92:	80 81       	ld	r24, Z
    3a94:	82 60       	ori	r24, 0x02	; 2
    3a96:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG,CS12);
    3a98:	ae e4       	ldi	r26, 0x4E	; 78
    3a9a:	b0 e0       	ldi	r27, 0x00	; 0
    3a9c:	ee e4       	ldi	r30, 0x4E	; 78
    3a9e:	f0 e0       	ldi	r31, 0x00	; 0
    3aa0:	80 81       	ld	r24, Z
    3aa2:	8b 7f       	andi	r24, 0xFB	; 251
    3aa4:	8c 93       	st	X, r24
	else{
		//return error
	}


}
    3aa6:	26 96       	adiw	r28, 0x06	; 6
    3aa8:	0f b6       	in	r0, 0x3f	; 63
    3aaa:	f8 94       	cli
    3aac:	de bf       	out	0x3e, r29	; 62
    3aae:	0f be       	out	0x3f, r0	; 63
    3ab0:	cd bf       	out	0x3d, r28	; 61
    3ab2:	cf 91       	pop	r28
    3ab4:	df 91       	pop	r29
    3ab6:	1f 91       	pop	r17
    3ab8:	0f 91       	pop	r16
    3aba:	08 95       	ret

00003abc <TIMER1_voidStart>:
void TIMER1_voidStart(){
    3abc:	df 93       	push	r29
    3abe:	cf 93       	push	r28
    3ac0:	cd b7       	in	r28, 0x3d	; 61
    3ac2:	de b7       	in	r29, 0x3e	; 62
	//select PRESCALER 64
	SET_BIT(TCCR1B_REG,CS10);
    3ac4:	ae e4       	ldi	r26, 0x4E	; 78
    3ac6:	b0 e0       	ldi	r27, 0x00	; 0
    3ac8:	ee e4       	ldi	r30, 0x4E	; 78
    3aca:	f0 e0       	ldi	r31, 0x00	; 0
    3acc:	80 81       	ld	r24, Z
    3ace:	81 60       	ori	r24, 0x01	; 1
    3ad0:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,CS11);
    3ad2:	ae e4       	ldi	r26, 0x4E	; 78
    3ad4:	b0 e0       	ldi	r27, 0x00	; 0
    3ad6:	ee e4       	ldi	r30, 0x4E	; 78
    3ad8:	f0 e0       	ldi	r31, 0x00	; 0
    3ada:	80 81       	ld	r24, Z
    3adc:	82 60       	ori	r24, 0x02	; 2
    3ade:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG,CS12);
    3ae0:	ae e4       	ldi	r26, 0x4E	; 78
    3ae2:	b0 e0       	ldi	r27, 0x00	; 0
    3ae4:	ee e4       	ldi	r30, 0x4E	; 78
    3ae6:	f0 e0       	ldi	r31, 0x00	; 0
    3ae8:	80 81       	ld	r24, Z
    3aea:	8b 7f       	andi	r24, 0xFB	; 251
    3aec:	8c 93       	st	X, r24

}
    3aee:	cf 91       	pop	r28
    3af0:	df 91       	pop	r29
    3af2:	08 95       	ret

00003af4 <TIMER1_voidStop>:
void TIMER1_voidStop(){
    3af4:	df 93       	push	r29
    3af6:	cf 93       	push	r28
    3af8:	cd b7       	in	r28, 0x3d	; 61
    3afa:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B_REG,CS10);
    3afc:	ae e4       	ldi	r26, 0x4E	; 78
    3afe:	b0 e0       	ldi	r27, 0x00	; 0
    3b00:	ee e4       	ldi	r30, 0x4E	; 78
    3b02:	f0 e0       	ldi	r31, 0x00	; 0
    3b04:	80 81       	ld	r24, Z
    3b06:	8e 7f       	andi	r24, 0xFE	; 254
    3b08:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG,CS11);
    3b0a:	ae e4       	ldi	r26, 0x4E	; 78
    3b0c:	b0 e0       	ldi	r27, 0x00	; 0
    3b0e:	ee e4       	ldi	r30, 0x4E	; 78
    3b10:	f0 e0       	ldi	r31, 0x00	; 0
    3b12:	80 81       	ld	r24, Z
    3b14:	8d 7f       	andi	r24, 0xFD	; 253
    3b16:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG,CS12);
    3b18:	ae e4       	ldi	r26, 0x4E	; 78
    3b1a:	b0 e0       	ldi	r27, 0x00	; 0
    3b1c:	ee e4       	ldi	r30, 0x4E	; 78
    3b1e:	f0 e0       	ldi	r31, 0x00	; 0
    3b20:	80 81       	ld	r24, Z
    3b22:	8b 7f       	andi	r24, 0xFB	; 251
    3b24:	8c 93       	st	X, r24
}
    3b26:	cf 91       	pop	r28
    3b28:	df 91       	pop	r29
    3b2a:	08 95       	ret

00003b2c <TIMER1_voidSetDelay_msCompareMatchMode>:

void TIMER1_voidSetDelay_msCompareMatchMode(u32 copy_u16Delay_ms){
    3b2c:	df 93       	push	r29
    3b2e:	cf 93       	push	r28
    3b30:	00 d0       	rcall	.+0      	; 0x3b32 <TIMER1_voidSetDelay_msCompareMatchMode+0x6>
    3b32:	00 d0       	rcall	.+0      	; 0x3b34 <TIMER1_voidSetDelay_msCompareMatchMode+0x8>
    3b34:	cd b7       	in	r28, 0x3d	; 61
    3b36:	de b7       	in	r29, 0x3e	; 62
    3b38:	69 83       	std	Y+1, r22	; 0x01
    3b3a:	7a 83       	std	Y+2, r23	; 0x02
    3b3c:	8b 83       	std	Y+3, r24	; 0x03
    3b3e:	9c 83       	std	Y+4, r25	; 0x04
	//Under Condition Tick Time = 4Ms, OCR0 = 62499
	OCR1A_u16_REG = 62499;
    3b40:	ea e4       	ldi	r30, 0x4A	; 74
    3b42:	f0 e0       	ldi	r31, 0x00	; 0
    3b44:	83 e2       	ldi	r24, 0x23	; 35
    3b46:	94 ef       	ldi	r25, 0xF4	; 244
    3b48:	91 83       	std	Z+1, r25	; 0x01
    3b4a:	80 83       	st	Z, r24
	PRV_u16CTC_counter = (copy_u16Delay_ms * 1000) / (62500 * 4);
    3b4c:	89 81       	ldd	r24, Y+1	; 0x01
    3b4e:	9a 81       	ldd	r25, Y+2	; 0x02
    3b50:	ab 81       	ldd	r26, Y+3	; 0x03
    3b52:	bc 81       	ldd	r27, Y+4	; 0x04
    3b54:	28 ee       	ldi	r18, 0xE8	; 232
    3b56:	33 e0       	ldi	r19, 0x03	; 3
    3b58:	40 e0       	ldi	r20, 0x00	; 0
    3b5a:	50 e0       	ldi	r21, 0x00	; 0
    3b5c:	bc 01       	movw	r22, r24
    3b5e:	cd 01       	movw	r24, r26
    3b60:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <__mulsi3>
    3b64:	dc 01       	movw	r26, r24
    3b66:	cb 01       	movw	r24, r22
    3b68:	20 e9       	ldi	r18, 0x90	; 144
    3b6a:	30 ed       	ldi	r19, 0xD0	; 208
    3b6c:	43 e0       	ldi	r20, 0x03	; 3
    3b6e:	50 e0       	ldi	r21, 0x00	; 0
    3b70:	bc 01       	movw	r22, r24
    3b72:	cd 01       	movw	r24, r26
    3b74:	0e 94 10 28 	call	0x5020	; 0x5020 <__udivmodsi4>
    3b78:	da 01       	movw	r26, r20
    3b7a:	c9 01       	movw	r24, r18
    3b7c:	90 93 a1 02 	sts	0x02A1, r25
    3b80:	80 93 a0 02 	sts	0x02A0, r24
}
    3b84:	0f 90       	pop	r0
    3b86:	0f 90       	pop	r0
    3b88:	0f 90       	pop	r0
    3b8a:	0f 90       	pop	r0
    3b8c:	cf 91       	pop	r28
    3b8e:	df 91       	pop	r29
    3b90:	08 95       	ret

00003b92 <TIMER1_voidSetCallBackOVF>:

void TIMER1_voidSetCallBackOVF(void (* copy_pFunAction)(void)){
    3b92:	df 93       	push	r29
    3b94:	cf 93       	push	r28
    3b96:	00 d0       	rcall	.+0      	; 0x3b98 <TIMER1_voidSetCallBackOVF+0x6>
    3b98:	cd b7       	in	r28, 0x3d	; 61
    3b9a:	de b7       	in	r29, 0x3e	; 62
    3b9c:	9a 83       	std	Y+2, r25	; 0x02
    3b9e:	89 83       	std	Y+1, r24	; 0x01
	if (copy_pFunAction !=NULL){
    3ba0:	89 81       	ldd	r24, Y+1	; 0x01
    3ba2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ba4:	00 97       	sbiw	r24, 0x00	; 0
    3ba6:	31 f0       	breq	.+12     	; 0x3bb4 <TIMER1_voidSetCallBackOVF+0x22>
		PRV_pFunCallBackOVF=copy_pFunAction;
    3ba8:	89 81       	ldd	r24, Y+1	; 0x01
    3baa:	9a 81       	ldd	r25, Y+2	; 0x02
    3bac:	90 93 99 02 	sts	0x0299, r25
    3bb0:	80 93 98 02 	sts	0x0298, r24
	else
	{
		//error
	}

}
    3bb4:	0f 90       	pop	r0
    3bb6:	0f 90       	pop	r0
    3bb8:	cf 91       	pop	r28
    3bba:	df 91       	pop	r29
    3bbc:	08 95       	ret

00003bbe <TIMER1_voidSetCallBackCTC>:

void TIMER1_voidSetCallBackCTC(void (* copy_pFunAction)(void)){
    3bbe:	df 93       	push	r29
    3bc0:	cf 93       	push	r28
    3bc2:	00 d0       	rcall	.+0      	; 0x3bc4 <TIMER1_voidSetCallBackCTC+0x6>
    3bc4:	cd b7       	in	r28, 0x3d	; 61
    3bc6:	de b7       	in	r29, 0x3e	; 62
    3bc8:	9a 83       	std	Y+2, r25	; 0x02
    3bca:	89 83       	std	Y+1, r24	; 0x01
	if (copy_pFunAction !=NULL){
    3bcc:	89 81       	ldd	r24, Y+1	; 0x01
    3bce:	9a 81       	ldd	r25, Y+2	; 0x02
    3bd0:	00 97       	sbiw	r24, 0x00	; 0
    3bd2:	31 f0       	breq	.+12     	; 0x3be0 <TIMER1_voidSetCallBackCTC+0x22>
		PRV_pFunCallBackCTC=copy_pFunAction;
    3bd4:	89 81       	ldd	r24, Y+1	; 0x01
    3bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    3bd8:	90 93 9b 02 	sts	0x029B, r25
    3bdc:	80 93 9a 02 	sts	0x029A, r24
	else
	{
		//error
	}

}
    3be0:	0f 90       	pop	r0
    3be2:	0f 90       	pop	r0
    3be4:	cf 91       	pop	r28
    3be6:	df 91       	pop	r29
    3be8:	08 95       	ret

00003bea <__vector_9>:

void __vector_9(void) __attribute((signal));
void __vector_9(void){
    3bea:	1f 92       	push	r1
    3bec:	0f 92       	push	r0
    3bee:	0f b6       	in	r0, 0x3f	; 63
    3bf0:	0f 92       	push	r0
    3bf2:	11 24       	eor	r1, r1
    3bf4:	2f 93       	push	r18
    3bf6:	3f 93       	push	r19
    3bf8:	4f 93       	push	r20
    3bfa:	5f 93       	push	r21
    3bfc:	6f 93       	push	r22
    3bfe:	7f 93       	push	r23
    3c00:	8f 93       	push	r24
    3c02:	9f 93       	push	r25
    3c04:	af 93       	push	r26
    3c06:	bf 93       	push	r27
    3c08:	ef 93       	push	r30
    3c0a:	ff 93       	push	r31
    3c0c:	df 93       	push	r29
    3c0e:	cf 93       	push	r28
    3c10:	cd b7       	in	r28, 0x3d	; 61
    3c12:	de b7       	in	r29, 0x3e	; 62

	static u16 local_u16Counter;
	local_u16Counter++;
    3c14:	80 91 9c 02 	lds	r24, 0x029C
    3c18:	90 91 9d 02 	lds	r25, 0x029D
    3c1c:	01 96       	adiw	r24, 0x01	; 1
    3c1e:	90 93 9d 02 	sts	0x029D, r25
    3c22:	80 93 9c 02 	sts	0x029C, r24

	if(TIMER1_OVERFLOW_COUNTER ==local_u16Counter){
    3c26:	80 91 9c 02 	lds	r24, 0x029C
    3c2a:	90 91 9d 02 	lds	r25, 0x029D
    3c2e:	84 31       	cpi	r24, 0x14	; 20
    3c30:	91 05       	cpc	r25, r1
    3c32:	a9 f4       	brne	.+42     	; 0x3c5e <__vector_9+0x74>
		TCNT1_u16_REG=TIMER1_PRELOAD_VALUE;
    3c34:	ec e4       	ldi	r30, 0x4C	; 76
    3c36:	f0 e0       	ldi	r31, 0x00	; 0
    3c38:	80 e5       	ldi	r24, 0x50	; 80
    3c3a:	9d ee       	ldi	r25, 0xED	; 237
    3c3c:	91 83       	std	Z+1, r25	; 0x01
    3c3e:	80 83       	st	Z, r24
		local_u16Counter=0;
    3c40:	10 92 9d 02 	sts	0x029D, r1
    3c44:	10 92 9c 02 	sts	0x029C, r1

		if(PRV_pFunCallBackOVF !=NULL){
    3c48:	80 91 98 02 	lds	r24, 0x0298
    3c4c:	90 91 99 02 	lds	r25, 0x0299
    3c50:	00 97       	sbiw	r24, 0x00	; 0
    3c52:	29 f0       	breq	.+10     	; 0x3c5e <__vector_9+0x74>
			PRV_pFunCallBackOVF();
    3c54:	e0 91 98 02 	lds	r30, 0x0298
    3c58:	f0 91 99 02 	lds	r31, 0x0299
    3c5c:	09 95       	icall
		}
	}

}
    3c5e:	cf 91       	pop	r28
    3c60:	df 91       	pop	r29
    3c62:	ff 91       	pop	r31
    3c64:	ef 91       	pop	r30
    3c66:	bf 91       	pop	r27
    3c68:	af 91       	pop	r26
    3c6a:	9f 91       	pop	r25
    3c6c:	8f 91       	pop	r24
    3c6e:	7f 91       	pop	r23
    3c70:	6f 91       	pop	r22
    3c72:	5f 91       	pop	r21
    3c74:	4f 91       	pop	r20
    3c76:	3f 91       	pop	r19
    3c78:	2f 91       	pop	r18
    3c7a:	0f 90       	pop	r0
    3c7c:	0f be       	out	0x3f, r0	; 63
    3c7e:	0f 90       	pop	r0
    3c80:	1f 90       	pop	r1
    3c82:	18 95       	reti

00003c84 <__vector_7>:

void __vector_7(void) __attribute((signal));
void __vector_7(void){
    3c84:	1f 92       	push	r1
    3c86:	0f 92       	push	r0
    3c88:	0f b6       	in	r0, 0x3f	; 63
    3c8a:	0f 92       	push	r0
    3c8c:	11 24       	eor	r1, r1
    3c8e:	2f 93       	push	r18
    3c90:	3f 93       	push	r19
    3c92:	4f 93       	push	r20
    3c94:	5f 93       	push	r21
    3c96:	6f 93       	push	r22
    3c98:	7f 93       	push	r23
    3c9a:	8f 93       	push	r24
    3c9c:	9f 93       	push	r25
    3c9e:	af 93       	push	r26
    3ca0:	bf 93       	push	r27
    3ca2:	ef 93       	push	r30
    3ca4:	ff 93       	push	r31
    3ca6:	df 93       	push	r29
    3ca8:	cf 93       	push	r28
    3caa:	cd b7       	in	r28, 0x3d	; 61
    3cac:	de b7       	in	r29, 0x3e	; 62

	static u16 local_u16Counter;
	local_u16Counter++;
    3cae:	80 91 9e 02 	lds	r24, 0x029E
    3cb2:	90 91 9f 02 	lds	r25, 0x029F
    3cb6:	01 96       	adiw	r24, 0x01	; 1
    3cb8:	90 93 9f 02 	sts	0x029F, r25
    3cbc:	80 93 9e 02 	sts	0x029E, r24

	if(PRV_u16CTC_counter ==local_u16Counter){
    3cc0:	20 91 a0 02 	lds	r18, 0x02A0
    3cc4:	30 91 a1 02 	lds	r19, 0x02A1
    3cc8:	80 91 9e 02 	lds	r24, 0x029E
    3ccc:	90 91 9f 02 	lds	r25, 0x029F
    3cd0:	28 17       	cp	r18, r24
    3cd2:	39 07       	cpc	r19, r25
    3cd4:	79 f4       	brne	.+30     	; 0x3cf4 <__vector_7+0x70>

		local_u16Counter=0;
    3cd6:	10 92 9f 02 	sts	0x029F, r1
    3cda:	10 92 9e 02 	sts	0x029E, r1

		if(PRV_pFunCallBackCTC !=NULL){
    3cde:	80 91 9a 02 	lds	r24, 0x029A
    3ce2:	90 91 9b 02 	lds	r25, 0x029B
    3ce6:	00 97       	sbiw	r24, 0x00	; 0
    3ce8:	29 f0       	breq	.+10     	; 0x3cf4 <__vector_7+0x70>
			PRV_pFunCallBackCTC();
    3cea:	e0 91 9a 02 	lds	r30, 0x029A
    3cee:	f0 91 9b 02 	lds	r31, 0x029B
    3cf2:	09 95       	icall
		}
	}

}
    3cf4:	cf 91       	pop	r28
    3cf6:	df 91       	pop	r29
    3cf8:	ff 91       	pop	r31
    3cfa:	ef 91       	pop	r30
    3cfc:	bf 91       	pop	r27
    3cfe:	af 91       	pop	r26
    3d00:	9f 91       	pop	r25
    3d02:	8f 91       	pop	r24
    3d04:	7f 91       	pop	r23
    3d06:	6f 91       	pop	r22
    3d08:	5f 91       	pop	r21
    3d0a:	4f 91       	pop	r20
    3d0c:	3f 91       	pop	r19
    3d0e:	2f 91       	pop	r18
    3d10:	0f 90       	pop	r0
    3d12:	0f be       	out	0x3f, r0	; 63
    3d14:	0f 90       	pop	r0
    3d16:	1f 90       	pop	r1
    3d18:	18 95       	reti

00003d1a <TWI_voidInitMaster>:
#include"TWI_register.h"
#include"TWI_interface.h"
#include"TWI_private.h"

void TWI_voidInitMaster(void)
{
    3d1a:	df 93       	push	r29
    3d1c:	cf 93       	push	r28
    3d1e:	cd b7       	in	r28, 0x3d	; 61
    3d20:	de b7       	in	r29, 0x3e	; 62
	// Set Prescaller = 1 , Set Freq. = 400KHZ (F_CPU = 16000000)
	TWBR_REG = 12;
    3d22:	e0 e2       	ldi	r30, 0x20	; 32
    3d24:	f0 e0       	ldi	r31, 0x00	; 0
    3d26:	8c e0       	ldi	r24, 0x0C	; 12
    3d28:	80 83       	st	Z, r24
	CLR_BIT(TWSR_REG, TWPS0);
    3d2a:	a1 e2       	ldi	r26, 0x21	; 33
    3d2c:	b0 e0       	ldi	r27, 0x00	; 0
    3d2e:	e1 e2       	ldi	r30, 0x21	; 33
    3d30:	f0 e0       	ldi	r31, 0x00	; 0
    3d32:	80 81       	ld	r24, Z
    3d34:	8e 7f       	andi	r24, 0xFE	; 254
    3d36:	8c 93       	st	X, r24
	CLR_BIT(TWSR_REG, TWPS1);
    3d38:	a1 e2       	ldi	r26, 0x21	; 33
    3d3a:	b0 e0       	ldi	r27, 0x00	; 0
    3d3c:	e1 e2       	ldi	r30, 0x21	; 33
    3d3e:	f0 e0       	ldi	r31, 0x00	; 0
    3d40:	80 81       	ld	r24, Z
    3d42:	8d 7f       	andi	r24, 0xFD	; 253
    3d44:	8c 93       	st	X, r24

	// Disable TWI interrupt
	CLR_BIT(TWCR_REG, TWIE);
    3d46:	a6 e5       	ldi	r26, 0x56	; 86
    3d48:	b0 e0       	ldi	r27, 0x00	; 0
    3d4a:	e6 e5       	ldi	r30, 0x56	; 86
    3d4c:	f0 e0       	ldi	r31, 0x00	; 0
    3d4e:	80 81       	ld	r24, Z
    3d50:	8e 7f       	andi	r24, 0xFE	; 254
    3d52:	8c 93       	st	X, r24

	// Enable TWI peripheral
	SET_BIT(TWCR_REG, TWEN);
    3d54:	a6 e5       	ldi	r26, 0x56	; 86
    3d56:	b0 e0       	ldi	r27, 0x00	; 0
    3d58:	e6 e5       	ldi	r30, 0x56	; 86
    3d5a:	f0 e0       	ldi	r31, 0x00	; 0
    3d5c:	80 81       	ld	r24, Z
    3d5e:	84 60       	ori	r24, 0x04	; 4
    3d60:	8c 93       	st	X, r24
}
    3d62:	cf 91       	pop	r28
    3d64:	df 91       	pop	r29
    3d66:	08 95       	ret

00003d68 <TWI_voidSendStartCondition>:


void TWI_voidSendStartCondition(void)
{
    3d68:	df 93       	push	r29
    3d6a:	cf 93       	push	r28
    3d6c:	cd b7       	in	r28, 0x3d	; 61
    3d6e:	de b7       	in	r29, 0x3e	; 62
	// Request Start Condition
	SET_BIT(TWCR_REG, TWSTA);
    3d70:	a6 e5       	ldi	r26, 0x56	; 86
    3d72:	b0 e0       	ldi	r27, 0x00	; 0
    3d74:	e6 e5       	ldi	r30, 0x56	; 86
    3d76:	f0 e0       	ldi	r31, 0x00	; 0
    3d78:	80 81       	ld	r24, Z
    3d7a:	80 62       	ori	r24, 0x20	; 32
    3d7c:	8c 93       	st	X, r24

	// Busy wait for flag
	while(0 == GET_BIT(TWCR_REG, TWINT));
    3d7e:	e6 e5       	ldi	r30, 0x56	; 86
    3d80:	f0 e0       	ldi	r31, 0x00	; 0
    3d82:	80 81       	ld	r24, Z
    3d84:	88 23       	and	r24, r24
    3d86:	dc f7       	brge	.-10     	; 0x3d7e <TWI_voidSendStartCondition+0x16>

	// Check Status code = Start condition  Status code
	while(TWI_STATUS_VALUE != TWI_STATUS_CODE_START_CON);
    3d88:	e1 e2       	ldi	r30, 0x21	; 33
    3d8a:	f0 e0       	ldi	r31, 0x00	; 0
    3d8c:	80 81       	ld	r24, Z
    3d8e:	88 2f       	mov	r24, r24
    3d90:	90 e0       	ldi	r25, 0x00	; 0
    3d92:	88 7f       	andi	r24, 0xF8	; 248
    3d94:	90 70       	andi	r25, 0x00	; 0
    3d96:	88 30       	cpi	r24, 0x08	; 8
    3d98:	91 05       	cpc	r25, r1
    3d9a:	b1 f7       	brne	.-20     	; 0x3d88 <TWI_voidSendStartCondition+0x20>

}
    3d9c:	cf 91       	pop	r28
    3d9e:	df 91       	pop	r29
    3da0:	08 95       	ret

00003da2 <TWI_voidSendRepStartCondition>:


void TWI_voidSendRepStartCondition(void)
{
    3da2:	df 93       	push	r29
    3da4:	cf 93       	push	r28
    3da6:	cd b7       	in	r28, 0x3d	; 61
    3da8:	de b7       	in	r29, 0x3e	; 62
	// Request Start Condition
	SET_BIT(TWCR_REG, TWSTA);
    3daa:	a6 e5       	ldi	r26, 0x56	; 86
    3dac:	b0 e0       	ldi	r27, 0x00	; 0
    3dae:	e6 e5       	ldi	r30, 0x56	; 86
    3db0:	f0 e0       	ldi	r31, 0x00	; 0
    3db2:	80 81       	ld	r24, Z
    3db4:	80 62       	ori	r24, 0x20	; 32
    3db6:	8c 93       	st	X, r24

	// Clear flag to start current job
	SET_BIT(TWCR_REG, TWINT);
    3db8:	a6 e5       	ldi	r26, 0x56	; 86
    3dba:	b0 e0       	ldi	r27, 0x00	; 0
    3dbc:	e6 e5       	ldi	r30, 0x56	; 86
    3dbe:	f0 e0       	ldi	r31, 0x00	; 0
    3dc0:	80 81       	ld	r24, Z
    3dc2:	80 68       	ori	r24, 0x80	; 128
    3dc4:	8c 93       	st	X, r24

	// Busy wait for flag
	while(0 == GET_BIT(TWCR_REG, TWINT));
    3dc6:	e6 e5       	ldi	r30, 0x56	; 86
    3dc8:	f0 e0       	ldi	r31, 0x00	; 0
    3dca:	80 81       	ld	r24, Z
    3dcc:	88 23       	and	r24, r24
    3dce:	dc f7       	brge	.-10     	; 0x3dc6 <TWI_voidSendRepStartCondition+0x24>

	// Check Status code = Repeated Start condition Status code
	while(TWI_STATUS_VALUE != TWI_STATUS_CODE_RPEATED_START_CON);
    3dd0:	e1 e2       	ldi	r30, 0x21	; 33
    3dd2:	f0 e0       	ldi	r31, 0x00	; 0
    3dd4:	80 81       	ld	r24, Z
    3dd6:	88 2f       	mov	r24, r24
    3dd8:	90 e0       	ldi	r25, 0x00	; 0
    3dda:	88 7f       	andi	r24, 0xF8	; 248
    3ddc:	90 70       	andi	r25, 0x00	; 0
    3dde:	80 31       	cpi	r24, 0x10	; 16
    3de0:	91 05       	cpc	r25, r1
    3de2:	b1 f7       	brne	.-20     	; 0x3dd0 <TWI_voidSendRepStartCondition+0x2e>

}
    3de4:	cf 91       	pop	r28
    3de6:	df 91       	pop	r29
    3de8:	08 95       	ret

00003dea <TWI_voidSendStopCondition>:


void TWI_voidSendStopCondition(void)
{
    3dea:	df 93       	push	r29
    3dec:	cf 93       	push	r28
    3dee:	cd b7       	in	r28, 0x3d	; 61
    3df0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR_REG, TWSTO);
    3df2:	a6 e5       	ldi	r26, 0x56	; 86
    3df4:	b0 e0       	ldi	r27, 0x00	; 0
    3df6:	e6 e5       	ldi	r30, 0x56	; 86
    3df8:	f0 e0       	ldi	r31, 0x00	; 0
    3dfa:	80 81       	ld	r24, Z
    3dfc:	80 61       	ori	r24, 0x10	; 16
    3dfe:	8c 93       	st	X, r24

	// Clear flag to start current job
	SET_BIT(TWCR_REG, TWINT);
    3e00:	a6 e5       	ldi	r26, 0x56	; 86
    3e02:	b0 e0       	ldi	r27, 0x00	; 0
    3e04:	e6 e5       	ldi	r30, 0x56	; 86
    3e06:	f0 e0       	ldi	r31, 0x00	; 0
    3e08:	80 81       	ld	r24, Z
    3e0a:	80 68       	ori	r24, 0x80	; 128
    3e0c:	8c 93       	st	X, r24
}
    3e0e:	cf 91       	pop	r28
    3e10:	df 91       	pop	r29
    3e12:	08 95       	ret

00003e14 <TWI_voidSendSlaveAddWithWrite>:


void TWI_voidSendSlaveAddWithWrite(u8 copy_u8SlaveAdd)
{
    3e14:	df 93       	push	r29
    3e16:	cf 93       	push	r28
    3e18:	0f 92       	push	r0
    3e1a:	cd b7       	in	r28, 0x3d	; 61
    3e1c:	de b7       	in	r29, 0x3e	; 62
    3e1e:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8SlaveAdd <= 127)
    3e20:	89 81       	ldd	r24, Y+1	; 0x01
    3e22:	88 23       	and	r24, r24
    3e24:	4c f1       	brlt	.+82     	; 0x3e78 <TWI_voidSendSlaveAddWithWrite+0x64>
	{
		// Write slave address to SDA bus
		TWDR_REG = (copy_u8SlaveAdd << 1);
    3e26:	e3 e2       	ldi	r30, 0x23	; 35
    3e28:	f0 e0       	ldi	r31, 0x00	; 0
    3e2a:	89 81       	ldd	r24, Y+1	; 0x01
    3e2c:	88 0f       	add	r24, r24
    3e2e:	80 83       	st	Z, r24

		// Select write operation
		CLR_BIT(TWDR_REG, 0);
    3e30:	a3 e2       	ldi	r26, 0x23	; 35
    3e32:	b0 e0       	ldi	r27, 0x00	; 0
    3e34:	e3 e2       	ldi	r30, 0x23	; 35
    3e36:	f0 e0       	ldi	r31, 0x00	; 0
    3e38:	80 81       	ld	r24, Z
    3e3a:	8e 7f       	andi	r24, 0xFE	; 254
    3e3c:	8c 93       	st	X, r24

		// Clear Start condition bit
		CLR_BIT(TWCR_REG, TWSTA);
    3e3e:	a6 e5       	ldi	r26, 0x56	; 86
    3e40:	b0 e0       	ldi	r27, 0x00	; 0
    3e42:	e6 e5       	ldi	r30, 0x56	; 86
    3e44:	f0 e0       	ldi	r31, 0x00	; 0
    3e46:	80 81       	ld	r24, Z
    3e48:	8f 7d       	andi	r24, 0xDF	; 223
    3e4a:	8c 93       	st	X, r24

		// Clear flag to start current job
		SET_BIT(TWCR_REG, TWINT);
    3e4c:	a6 e5       	ldi	r26, 0x56	; 86
    3e4e:	b0 e0       	ldi	r27, 0x00	; 0
    3e50:	e6 e5       	ldi	r30, 0x56	; 86
    3e52:	f0 e0       	ldi	r31, 0x00	; 0
    3e54:	80 81       	ld	r24, Z
    3e56:	80 68       	ori	r24, 0x80	; 128
    3e58:	8c 93       	st	X, r24

		// Busy wait for flag
		while(0 == GET_BIT(TWCR_REG, TWINT));
    3e5a:	e6 e5       	ldi	r30, 0x56	; 86
    3e5c:	f0 e0       	ldi	r31, 0x00	; 0
    3e5e:	80 81       	ld	r24, Z
    3e60:	88 23       	and	r24, r24
    3e62:	dc f7       	brge	.-10     	; 0x3e5a <TWI_voidSendSlaveAddWithWrite+0x46>

		// Check Status code = Master transmit ( slave address + Write request )Status code
		while(TWI_STATUS_VALUE != TWI_STATUS_CODE_SEND_SLAVE_ADD_WRITE);
    3e64:	e1 e2       	ldi	r30, 0x21	; 33
    3e66:	f0 e0       	ldi	r31, 0x00	; 0
    3e68:	80 81       	ld	r24, Z
    3e6a:	88 2f       	mov	r24, r24
    3e6c:	90 e0       	ldi	r25, 0x00	; 0
    3e6e:	88 7f       	andi	r24, 0xF8	; 248
    3e70:	90 70       	andi	r25, 0x00	; 0
    3e72:	88 31       	cpi	r24, 0x18	; 24
    3e74:	91 05       	cpc	r25, r1
    3e76:	b1 f7       	brne	.-20     	; 0x3e64 <TWI_voidSendSlaveAddWithWrite+0x50>
	}
	else
	{
		//return Error State
	}
}
    3e78:	0f 90       	pop	r0
    3e7a:	cf 91       	pop	r28
    3e7c:	df 91       	pop	r29
    3e7e:	08 95       	ret

00003e80 <TWI_voidSendSlaveAddWithRead>:


void TWI_voidSendSlaveAddWithRead(u8 copy_u8SlaveAdd)
{
    3e80:	df 93       	push	r29
    3e82:	cf 93       	push	r28
    3e84:	0f 92       	push	r0
    3e86:	cd b7       	in	r28, 0x3d	; 61
    3e88:	de b7       	in	r29, 0x3e	; 62
    3e8a:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8SlaveAdd <= 127)
    3e8c:	89 81       	ldd	r24, Y+1	; 0x01
    3e8e:	88 23       	and	r24, r24
    3e90:	4c f1       	brlt	.+82     	; 0x3ee4 <TWI_voidSendSlaveAddWithRead+0x64>
	{
		// Write slave address to SDA bus
		TWDR_REG = (copy_u8SlaveAdd << 1);
    3e92:	e3 e2       	ldi	r30, 0x23	; 35
    3e94:	f0 e0       	ldi	r31, 0x00	; 0
    3e96:	89 81       	ldd	r24, Y+1	; 0x01
    3e98:	88 0f       	add	r24, r24
    3e9a:	80 83       	st	Z, r24

		// Select read operation
		SET_BIT(TWDR_REG, 0);
    3e9c:	a3 e2       	ldi	r26, 0x23	; 35
    3e9e:	b0 e0       	ldi	r27, 0x00	; 0
    3ea0:	e3 e2       	ldi	r30, 0x23	; 35
    3ea2:	f0 e0       	ldi	r31, 0x00	; 0
    3ea4:	80 81       	ld	r24, Z
    3ea6:	81 60       	ori	r24, 0x01	; 1
    3ea8:	8c 93       	st	X, r24

		// Clear Start condition bit
		CLR_BIT(TWCR_REG, TWSTA);
    3eaa:	a6 e5       	ldi	r26, 0x56	; 86
    3eac:	b0 e0       	ldi	r27, 0x00	; 0
    3eae:	e6 e5       	ldi	r30, 0x56	; 86
    3eb0:	f0 e0       	ldi	r31, 0x00	; 0
    3eb2:	80 81       	ld	r24, Z
    3eb4:	8f 7d       	andi	r24, 0xDF	; 223
    3eb6:	8c 93       	st	X, r24

		// Clear flag to start current job
		SET_BIT(TWCR_REG, TWINT);
    3eb8:	a6 e5       	ldi	r26, 0x56	; 86
    3eba:	b0 e0       	ldi	r27, 0x00	; 0
    3ebc:	e6 e5       	ldi	r30, 0x56	; 86
    3ebe:	f0 e0       	ldi	r31, 0x00	; 0
    3ec0:	80 81       	ld	r24, Z
    3ec2:	80 68       	ori	r24, 0x80	; 128
    3ec4:	8c 93       	st	X, r24

		// Busy wait for flag
		while(0 == GET_BIT(TWCR_REG, TWINT));
    3ec6:	e6 e5       	ldi	r30, 0x56	; 86
    3ec8:	f0 e0       	ldi	r31, 0x00	; 0
    3eca:	80 81       	ld	r24, Z
    3ecc:	88 23       	and	r24, r24
    3ece:	dc f7       	brge	.-10     	; 0x3ec6 <TWI_voidSendSlaveAddWithRead+0x46>

		// Check Status code = Master transmit ( slave address + read request )Status code
		while(TWI_STATUS_VALUE != TWI_STATUS_CODE_SEND_SLAVE_ADD_READ);
    3ed0:	e1 e2       	ldi	r30, 0x21	; 33
    3ed2:	f0 e0       	ldi	r31, 0x00	; 0
    3ed4:	80 81       	ld	r24, Z
    3ed6:	88 2f       	mov	r24, r24
    3ed8:	90 e0       	ldi	r25, 0x00	; 0
    3eda:	88 7f       	andi	r24, 0xF8	; 248
    3edc:	90 70       	andi	r25, 0x00	; 0
    3ede:	80 34       	cpi	r24, 0x40	; 64
    3ee0:	91 05       	cpc	r25, r1
    3ee2:	b1 f7       	brne	.-20     	; 0x3ed0 <TWI_voidSendSlaveAddWithRead+0x50>
	}
	else
	{
		//return Error State
	}
}
    3ee4:	0f 90       	pop	r0
    3ee6:	cf 91       	pop	r28
    3ee8:	df 91       	pop	r29
    3eea:	08 95       	ret

00003eec <TWI_voidTransmitMasterDataByte>:


void TWI_voidTransmitMasterDataByte(u8 copy_u8TxData)
{
    3eec:	df 93       	push	r29
    3eee:	cf 93       	push	r28
    3ef0:	0f 92       	push	r0
    3ef2:	cd b7       	in	r28, 0x3d	; 61
    3ef4:	de b7       	in	r29, 0x3e	; 62
    3ef6:	89 83       	std	Y+1, r24	; 0x01
	// Write Data into data register
	TWDR_REG = copy_u8TxData;
    3ef8:	e3 e2       	ldi	r30, 0x23	; 35
    3efa:	f0 e0       	ldi	r31, 0x00	; 0
    3efc:	89 81       	ldd	r24, Y+1	; 0x01
    3efe:	80 83       	st	Z, r24

	// Clear flag to start current job
	SET_BIT(TWCR_REG, TWINT);
    3f00:	a6 e5       	ldi	r26, 0x56	; 86
    3f02:	b0 e0       	ldi	r27, 0x00	; 0
    3f04:	e6 e5       	ldi	r30, 0x56	; 86
    3f06:	f0 e0       	ldi	r31, 0x00	; 0
    3f08:	80 81       	ld	r24, Z
    3f0a:	80 68       	ori	r24, 0x80	; 128
    3f0c:	8c 93       	st	X, r24

	// Busy wait for flag
	while(0 == GET_BIT(TWCR_REG, TWINT));
    3f0e:	e6 e5       	ldi	r30, 0x56	; 86
    3f10:	f0 e0       	ldi	r31, 0x00	; 0
    3f12:	80 81       	ld	r24, Z
    3f14:	88 23       	and	r24, r24
    3f16:	dc f7       	brge	.-10     	; 0x3f0e <TWI_voidTransmitMasterDataByte+0x22>

	// Check Status code = send master data byte Status code
	while(TWI_STATUS_VALUE != TWI_STATUS_CODE_SEND_MASTER_DATA_BYTE);
    3f18:	e1 e2       	ldi	r30, 0x21	; 33
    3f1a:	f0 e0       	ldi	r31, 0x00	; 0
    3f1c:	80 81       	ld	r24, Z
    3f1e:	88 2f       	mov	r24, r24
    3f20:	90 e0       	ldi	r25, 0x00	; 0
    3f22:	88 7f       	andi	r24, 0xF8	; 248
    3f24:	90 70       	andi	r25, 0x00	; 0
    3f26:	88 32       	cpi	r24, 0x28	; 40
    3f28:	91 05       	cpc	r25, r1
    3f2a:	b1 f7       	brne	.-20     	; 0x3f18 <TWI_voidTransmitMasterDataByte+0x2c>
}
    3f2c:	0f 90       	pop	r0
    3f2e:	cf 91       	pop	r28
    3f30:	df 91       	pop	r29
    3f32:	08 95       	ret

00003f34 <TWI_voidReceiveMasterDataByteWithACK>:


void TWI_voidReceiveMasterDataByteWithACK(u8* copy_pu8RxData)
{
    3f34:	df 93       	push	r29
    3f36:	cf 93       	push	r28
    3f38:	00 d0       	rcall	.+0      	; 0x3f3a <TWI_voidReceiveMasterDataByteWithACK+0x6>
    3f3a:	cd b7       	in	r28, 0x3d	; 61
    3f3c:	de b7       	in	r29, 0x3e	; 62
    3f3e:	9a 83       	std	Y+2, r25	; 0x02
    3f40:	89 83       	std	Y+1, r24	; 0x01
	if(copy_pu8RxData != NULL)
    3f42:	89 81       	ldd	r24, Y+1	; 0x01
    3f44:	9a 81       	ldd	r25, Y+2	; 0x02
    3f46:	00 97       	sbiw	r24, 0x00	; 0
    3f48:	51 f1       	breq	.+84     	; 0x3f9e <TWI_voidReceiveMasterDataByteWithACK+0x6a>
	{
		// Enable ACK pulse
		SET_BIT(TWCR_REG, TWEA);
    3f4a:	a6 e5       	ldi	r26, 0x56	; 86
    3f4c:	b0 e0       	ldi	r27, 0x00	; 0
    3f4e:	e6 e5       	ldi	r30, 0x56	; 86
    3f50:	f0 e0       	ldi	r31, 0x00	; 0
    3f52:	80 81       	ld	r24, Z
    3f54:	80 64       	ori	r24, 0x40	; 64
    3f56:	8c 93       	st	X, r24

		// Clear flag to start current job
		SET_BIT(TWCR_REG, TWINT);
    3f58:	a6 e5       	ldi	r26, 0x56	; 86
    3f5a:	b0 e0       	ldi	r27, 0x00	; 0
    3f5c:	e6 e5       	ldi	r30, 0x56	; 86
    3f5e:	f0 e0       	ldi	r31, 0x00	; 0
    3f60:	80 81       	ld	r24, Z
    3f62:	80 68       	ori	r24, 0x80	; 128
    3f64:	8c 93       	st	X, r24

		// Busy wait for flag
		while(0 == GET_BIT(TWCR_REG, TWINT));
    3f66:	e6 e5       	ldi	r30, 0x56	; 86
    3f68:	f0 e0       	ldi	r31, 0x00	; 0
    3f6a:	80 81       	ld	r24, Z
    3f6c:	88 23       	and	r24, r24
    3f6e:	dc f7       	brge	.-10     	; 0x3f66 <TWI_voidReceiveMasterDataByteWithACK+0x32>

		// Check Status code = Receive master data byte with ACK Status code
		while(TWI_STATUS_VALUE != TWI_STATUS_CODE_RECEIVE_MASTER_DATA_BYTE_ACK);
    3f70:	e1 e2       	ldi	r30, 0x21	; 33
    3f72:	f0 e0       	ldi	r31, 0x00	; 0
    3f74:	80 81       	ld	r24, Z
    3f76:	88 2f       	mov	r24, r24
    3f78:	90 e0       	ldi	r25, 0x00	; 0
    3f7a:	88 7f       	andi	r24, 0xF8	; 248
    3f7c:	90 70       	andi	r25, 0x00	; 0
    3f7e:	80 35       	cpi	r24, 0x50	; 80
    3f80:	91 05       	cpc	r25, r1
    3f82:	b1 f7       	brne	.-20     	; 0x3f70 <TWI_voidReceiveMasterDataByteWithACK+0x3c>

		// Read data
		*copy_pu8RxData = TWDR_REG;
    3f84:	e3 e2       	ldi	r30, 0x23	; 35
    3f86:	f0 e0       	ldi	r31, 0x00	; 0
    3f88:	80 81       	ld	r24, Z
    3f8a:	e9 81       	ldd	r30, Y+1	; 0x01
    3f8c:	fa 81       	ldd	r31, Y+2	; 0x02
    3f8e:	80 83       	st	Z, r24

		// Disable ACK pulse
		CLR_BIT(TWCR_REG, TWEA);
    3f90:	a6 e5       	ldi	r26, 0x56	; 86
    3f92:	b0 e0       	ldi	r27, 0x00	; 0
    3f94:	e6 e5       	ldi	r30, 0x56	; 86
    3f96:	f0 e0       	ldi	r31, 0x00	; 0
    3f98:	80 81       	ld	r24, Z
    3f9a:	8f 7b       	andi	r24, 0xBF	; 191
    3f9c:	8c 93       	st	X, r24
	}
	else
	{
		//return Error State
	}
}
    3f9e:	0f 90       	pop	r0
    3fa0:	0f 90       	pop	r0
    3fa2:	cf 91       	pop	r28
    3fa4:	df 91       	pop	r29
    3fa6:	08 95       	ret

00003fa8 <TWI_voidReceiveMasterDataByteWithoutACK>:


void TWI_voidReceiveMasterDataByteWithoutACK(u8* copy_pu8RxData)
{
    3fa8:	df 93       	push	r29
    3faa:	cf 93       	push	r28
    3fac:	00 d0       	rcall	.+0      	; 0x3fae <TWI_voidReceiveMasterDataByteWithoutACK+0x6>
    3fae:	cd b7       	in	r28, 0x3d	; 61
    3fb0:	de b7       	in	r29, 0x3e	; 62
    3fb2:	9a 83       	std	Y+2, r25	; 0x02
    3fb4:	89 83       	std	Y+1, r24	; 0x01
	if(copy_pu8RxData != NULL)
    3fb6:	89 81       	ldd	r24, Y+1	; 0x01
    3fb8:	9a 81       	ldd	r25, Y+2	; 0x02
    3fba:	00 97       	sbiw	r24, 0x00	; 0
    3fbc:	e1 f0       	breq	.+56     	; 0x3ff6 <TWI_voidReceiveMasterDataByteWithoutACK+0x4e>
	{
		// Clear flag to start current job
		SET_BIT(TWCR_REG, TWINT);
    3fbe:	a6 e5       	ldi	r26, 0x56	; 86
    3fc0:	b0 e0       	ldi	r27, 0x00	; 0
    3fc2:	e6 e5       	ldi	r30, 0x56	; 86
    3fc4:	f0 e0       	ldi	r31, 0x00	; 0
    3fc6:	80 81       	ld	r24, Z
    3fc8:	80 68       	ori	r24, 0x80	; 128
    3fca:	8c 93       	st	X, r24

		// Busy wait for flag
		while(0 == GET_BIT(TWCR_REG, TWINT));
    3fcc:	e6 e5       	ldi	r30, 0x56	; 86
    3fce:	f0 e0       	ldi	r31, 0x00	; 0
    3fd0:	80 81       	ld	r24, Z
    3fd2:	88 23       	and	r24, r24
    3fd4:	dc f7       	brge	.-10     	; 0x3fcc <TWI_voidReceiveMasterDataByteWithoutACK+0x24>

		// Check Status code = Receive master data byte without ACK Status code
		while(TWI_STATUS_VALUE != TWI_STATUS_CODE_RECEIVE_MASTER_DATA_BYTE_NACK);
    3fd6:	e1 e2       	ldi	r30, 0x21	; 33
    3fd8:	f0 e0       	ldi	r31, 0x00	; 0
    3fda:	80 81       	ld	r24, Z
    3fdc:	88 2f       	mov	r24, r24
    3fde:	90 e0       	ldi	r25, 0x00	; 0
    3fe0:	88 7f       	andi	r24, 0xF8	; 248
    3fe2:	90 70       	andi	r25, 0x00	; 0
    3fe4:	88 35       	cpi	r24, 0x58	; 88
    3fe6:	91 05       	cpc	r25, r1
    3fe8:	b1 f7       	brne	.-20     	; 0x3fd6 <TWI_voidReceiveMasterDataByteWithoutACK+0x2e>

		// Read data
		*copy_pu8RxData = TWDR_REG;
    3fea:	e3 e2       	ldi	r30, 0x23	; 35
    3fec:	f0 e0       	ldi	r31, 0x00	; 0
    3fee:	80 81       	ld	r24, Z
    3ff0:	e9 81       	ldd	r30, Y+1	; 0x01
    3ff2:	fa 81       	ldd	r31, Y+2	; 0x02
    3ff4:	80 83       	st	Z, r24
	}
	else
	{
		//return Error State
	}
}
    3ff6:	0f 90       	pop	r0
    3ff8:	0f 90       	pop	r0
    3ffa:	cf 91       	pop	r28
    3ffc:	df 91       	pop	r29
    3ffe:	08 95       	ret

00004000 <UART_voidInit>:
#define UART_BUAD_RATE			96000

#define UBRR_VALUE			    ((F_OSC/16/UART_BUAD_RATE)-1)
*/
void UART_voidInit(void)
{
    4000:	df 93       	push	r29
    4002:	cf 93       	push	r28
    4004:	cd b7       	in	r28, 0x3d	; 61
    4006:	de b7       	in	r29, 0x3e	; 62
	// Set Buad Rate = 9600 (f(osc) = 16MHZ, Double speed off)
	CLR_BIT(UCSRA_REG, U2X);
    4008:	ab e2       	ldi	r26, 0x2B	; 43
    400a:	b0 e0       	ldi	r27, 0x00	; 0
    400c:	eb e2       	ldi	r30, 0x2B	; 43
    400e:	f0 e0       	ldi	r31, 0x00	; 0
    4010:	80 81       	ld	r24, Z
    4012:	8d 7f       	andi	r24, 0xFD	; 253
    4014:	8c 93       	st	X, r24
	UBRRL_REG = 103;
    4016:	e9 e2       	ldi	r30, 0x29	; 41
    4018:	f0 e0       	ldi	r31, 0x00	; 0
    401a:	87 e6       	ldi	r24, 0x67	; 103
    401c:	80 83       	st	Z, r24

	// Disable UART Interrupts
	CLR_BIT(UCSRB_REG, RXCIE);
    401e:	aa e2       	ldi	r26, 0x2A	; 42
    4020:	b0 e0       	ldi	r27, 0x00	; 0
    4022:	ea e2       	ldi	r30, 0x2A	; 42
    4024:	f0 e0       	ldi	r31, 0x00	; 0
    4026:	80 81       	ld	r24, Z
    4028:	8f 77       	andi	r24, 0x7F	; 127
    402a:	8c 93       	st	X, r24
	CLR_BIT(UCSRB_REG, TXCIE);
    402c:	aa e2       	ldi	r26, 0x2A	; 42
    402e:	b0 e0       	ldi	r27, 0x00	; 0
    4030:	ea e2       	ldi	r30, 0x2A	; 42
    4032:	f0 e0       	ldi	r31, 0x00	; 0
    4034:	80 81       	ld	r24, Z
    4036:	8f 7b       	andi	r24, 0xBF	; 191
    4038:	8c 93       	st	X, r24
	CLR_BIT(UCSRB_REG, UDRIE);
    403a:	aa e2       	ldi	r26, 0x2A	; 42
    403c:	b0 e0       	ldi	r27, 0x00	; 0
    403e:	ea e2       	ldi	r30, 0x2A	; 42
    4040:	f0 e0       	ldi	r31, 0x00	; 0
    4042:	80 81       	ld	r24, Z
    4044:	8f 7d       	andi	r24, 0xDF	; 223
    4046:	8c 93       	st	X, r24
	   // configure no parity
	   // configure stop bits = 1
	   // configure data bits = 8
	   // configure no polarity
	*/
	UCSRC_REG = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0); // UCSRC_REG = 0X86; //0b10000110
    4048:	e0 e4       	ldi	r30, 0x40	; 64
    404a:	f0 e0       	ldi	r31, 0x00	; 0
    404c:	86 e8       	ldi	r24, 0x86	; 134
    404e:	80 83       	st	Z, r24
	CLR_BIT(UCSRB_REG, UCSZ2);
    4050:	aa e2       	ldi	r26, 0x2A	; 42
    4052:	b0 e0       	ldi	r27, 0x00	; 0
    4054:	ea e2       	ldi	r30, 0x2A	; 42
    4056:	f0 e0       	ldi	r31, 0x00	; 0
    4058:	80 81       	ld	r24, Z
    405a:	8b 7f       	andi	r24, 0xFB	; 251
    405c:	8c 93       	st	X, r24

	// Enable UART Rx
	SET_BIT(UCSRB_REG, RXEN);
    405e:	aa e2       	ldi	r26, 0x2A	; 42
    4060:	b0 e0       	ldi	r27, 0x00	; 0
    4062:	ea e2       	ldi	r30, 0x2A	; 42
    4064:	f0 e0       	ldi	r31, 0x00	; 0
    4066:	80 81       	ld	r24, Z
    4068:	80 61       	ori	r24, 0x10	; 16
    406a:	8c 93       	st	X, r24

	// Enable UART Tx
	SET_BIT(UCSRB_REG, TXEN);
    406c:	aa e2       	ldi	r26, 0x2A	; 42
    406e:	b0 e0       	ldi	r27, 0x00	; 0
    4070:	ea e2       	ldi	r30, 0x2A	; 42
    4072:	f0 e0       	ldi	r31, 0x00	; 0
    4074:	80 81       	ld	r24, Z
    4076:	88 60       	ori	r24, 0x08	; 8
    4078:	8c 93       	st	X, r24
}
    407a:	cf 91       	pop	r28
    407c:	df 91       	pop	r29
    407e:	08 95       	ret

00004080 <UART_voidTxChar>:


void UART_voidTxChar(u8 copy_u8TxData)
{
    4080:	df 93       	push	r29
    4082:	cf 93       	push	r28
    4084:	0f 92       	push	r0
    4086:	cd b7       	in	r28, 0x3d	; 61
    4088:	de b7       	in	r29, 0x3e	; 62
    408a:	89 83       	std	Y+1, r24	; 0x01
	// Busy Wait on Data Register empty flag
	while(0 == GET_BIT(UCSRA_REG, UDRE));
    408c:	eb e2       	ldi	r30, 0x2B	; 43
    408e:	f0 e0       	ldi	r31, 0x00	; 0
    4090:	80 81       	ld	r24, Z
    4092:	82 95       	swap	r24
    4094:	86 95       	lsr	r24
    4096:	87 70       	andi	r24, 0x07	; 7
    4098:	88 23       	and	r24, r24
    409a:	c1 f3       	breq	.-16     	; 0x408c <UART_voidTxChar+0xc>

	UDR_REG = copy_u8TxData;
    409c:	ec e2       	ldi	r30, 0x2C	; 44
    409e:	f0 e0       	ldi	r31, 0x00	; 0
    40a0:	89 81       	ldd	r24, Y+1	; 0x01
    40a2:	80 83       	st	Z, r24
}
    40a4:	0f 90       	pop	r0
    40a6:	cf 91       	pop	r28
    40a8:	df 91       	pop	r29
    40aa:	08 95       	ret

000040ac <UART_voidRxChar>:


void UART_voidRxChar(u8* copy_pu8RxData)
{
    40ac:	df 93       	push	r29
    40ae:	cf 93       	push	r28
    40b0:	00 d0       	rcall	.+0      	; 0x40b2 <UART_voidRxChar+0x6>
    40b2:	cd b7       	in	r28, 0x3d	; 61
    40b4:	de b7       	in	r29, 0x3e	; 62
    40b6:	9a 83       	std	Y+2, r25	; 0x02
    40b8:	89 83       	std	Y+1, r24	; 0x01
	if(copy_pu8RxData != NULL)
    40ba:	89 81       	ldd	r24, Y+1	; 0x01
    40bc:	9a 81       	ldd	r25, Y+2	; 0x02
    40be:	00 97       	sbiw	r24, 0x00	; 0
    40c0:	59 f0       	breq	.+22     	; 0x40d8 <UART_voidRxChar+0x2c>
	{
		// Busy Wait on Receive Complete flag
		while(0 == GET_BIT(UCSRA_REG, RXC));
    40c2:	eb e2       	ldi	r30, 0x2B	; 43
    40c4:	f0 e0       	ldi	r31, 0x00	; 0
    40c6:	80 81       	ld	r24, Z
    40c8:	88 23       	and	r24, r24
    40ca:	dc f7       	brge	.-10     	; 0x40c2 <UART_voidRxChar+0x16>

		*copy_pu8RxData = UDR_REG;
    40cc:	ec e2       	ldi	r30, 0x2C	; 44
    40ce:	f0 e0       	ldi	r31, 0x00	; 0
    40d0:	80 81       	ld	r24, Z
    40d2:	e9 81       	ldd	r30, Y+1	; 0x01
    40d4:	fa 81       	ldd	r31, Y+2	; 0x02
    40d6:	80 83       	st	Z, r24
	}
	else
	{
		//return Error State
	}
}
    40d8:	0f 90       	pop	r0
    40da:	0f 90       	pop	r0
    40dc:	cf 91       	pop	r28
    40de:	df 91       	pop	r29
    40e0:	08 95       	ret

000040e2 <UART_voidTxString>:


void UART_voidTxString(u8* copy_pu8TxString)
{
    40e2:	df 93       	push	r29
    40e4:	cf 93       	push	r28
    40e6:	00 d0       	rcall	.+0      	; 0x40e8 <UART_voidTxString+0x6>
    40e8:	0f 92       	push	r0
    40ea:	cd b7       	in	r28, 0x3d	; 61
    40ec:	de b7       	in	r29, 0x3e	; 62
    40ee:	9b 83       	std	Y+3, r25	; 0x03
    40f0:	8a 83       	std	Y+2, r24	; 0x02
	if(copy_pu8TxString != NULL)
    40f2:	8a 81       	ldd	r24, Y+2	; 0x02
    40f4:	9b 81       	ldd	r25, Y+3	; 0x03
    40f6:	00 97       	sbiw	r24, 0x00	; 0
    40f8:	d9 f0       	breq	.+54     	; 0x4130 <UART_voidTxString+0x4e>
	{
		u8 local_u8Counter = 0;
    40fa:	19 82       	std	Y+1, r1	; 0x01
    40fc:	0e c0       	rjmp	.+28     	; 0x411a <UART_voidTxString+0x38>
		while(copy_pu8TxString[local_u8Counter] != '\0')
		{
			UART_voidTxChar(copy_pu8TxString[local_u8Counter]);
    40fe:	89 81       	ldd	r24, Y+1	; 0x01
    4100:	28 2f       	mov	r18, r24
    4102:	30 e0       	ldi	r19, 0x00	; 0
    4104:	8a 81       	ldd	r24, Y+2	; 0x02
    4106:	9b 81       	ldd	r25, Y+3	; 0x03
    4108:	fc 01       	movw	r30, r24
    410a:	e2 0f       	add	r30, r18
    410c:	f3 1f       	adc	r31, r19
    410e:	80 81       	ld	r24, Z
    4110:	0e 94 40 20 	call	0x4080	; 0x4080 <UART_voidTxChar>
			local_u8Counter++;
    4114:	89 81       	ldd	r24, Y+1	; 0x01
    4116:	8f 5f       	subi	r24, 0xFF	; 255
    4118:	89 83       	std	Y+1, r24	; 0x01
void UART_voidTxString(u8* copy_pu8TxString)
{
	if(copy_pu8TxString != NULL)
	{
		u8 local_u8Counter = 0;
		while(copy_pu8TxString[local_u8Counter] != '\0')
    411a:	89 81       	ldd	r24, Y+1	; 0x01
    411c:	28 2f       	mov	r18, r24
    411e:	30 e0       	ldi	r19, 0x00	; 0
    4120:	8a 81       	ldd	r24, Y+2	; 0x02
    4122:	9b 81       	ldd	r25, Y+3	; 0x03
    4124:	fc 01       	movw	r30, r24
    4126:	e2 0f       	add	r30, r18
    4128:	f3 1f       	adc	r31, r19
    412a:	80 81       	ld	r24, Z
    412c:	88 23       	and	r24, r24
    412e:	39 f7       	brne	.-50     	; 0x40fe <UART_voidTxString+0x1c>
	}
	else
	{
		// return Error State
	}
}
    4130:	0f 90       	pop	r0
    4132:	0f 90       	pop	r0
    4134:	0f 90       	pop	r0
    4136:	cf 91       	pop	r28
    4138:	df 91       	pop	r29
    413a:	08 95       	ret

0000413c <UART_voidRxString>:


void UART_voidRxString(u8* copy_pu8RxString)
{
    413c:	df 93       	push	r29
    413e:	cf 93       	push	r28
    4140:	00 d0       	rcall	.+0      	; 0x4142 <UART_voidRxString+0x6>
    4142:	0f 92       	push	r0
    4144:	cd b7       	in	r28, 0x3d	; 61
    4146:	de b7       	in	r29, 0x3e	; 62
    4148:	9b 83       	std	Y+3, r25	; 0x03
    414a:	8a 83       	std	Y+2, r24	; 0x02
	if(copy_pu8RxString != NULL)
    414c:	8a 81       	ldd	r24, Y+2	; 0x02
    414e:	9b 81       	ldd	r25, Y+3	; 0x03
    4150:	00 97       	sbiw	r24, 0x00	; 0
    4152:	39 f1       	breq	.+78     	; 0x41a2 <UART_voidRxString+0x66>
	{
		u8 local_u8Counter = 0;
    4154:	19 82       	std	Y+1, r1	; 0x01
		do
		{

			UART_voidRxChar(&copy_pu8RxString[local_u8Counter]);
    4156:	89 81       	ldd	r24, Y+1	; 0x01
    4158:	28 2f       	mov	r18, r24
    415a:	30 e0       	ldi	r19, 0x00	; 0
    415c:	8a 81       	ldd	r24, Y+2	; 0x02
    415e:	9b 81       	ldd	r25, Y+3	; 0x03
    4160:	82 0f       	add	r24, r18
    4162:	93 1f       	adc	r25, r19
    4164:	0e 94 56 20 	call	0x40ac	; 0x40ac <UART_voidRxChar>
			local_u8Counter++;
    4168:	89 81       	ldd	r24, Y+1	; 0x01
    416a:	8f 5f       	subi	r24, 0xFF	; 255
    416c:	89 83       	std	Y+1, r24	; 0x01

		} while(copy_pu8RxString[local_u8Counter-1] != '#');
    416e:	89 81       	ldd	r24, Y+1	; 0x01
    4170:	88 2f       	mov	r24, r24
    4172:	90 e0       	ldi	r25, 0x00	; 0
    4174:	9c 01       	movw	r18, r24
    4176:	21 50       	subi	r18, 0x01	; 1
    4178:	30 40       	sbci	r19, 0x00	; 0
    417a:	8a 81       	ldd	r24, Y+2	; 0x02
    417c:	9b 81       	ldd	r25, Y+3	; 0x03
    417e:	fc 01       	movw	r30, r24
    4180:	e2 0f       	add	r30, r18
    4182:	f3 1f       	adc	r31, r19
    4184:	80 81       	ld	r24, Z
    4186:	83 32       	cpi	r24, 0x23	; 35
    4188:	31 f7       	brne	.-52     	; 0x4156 <UART_voidRxString+0x1a>

		copy_pu8RxString[local_u8Counter-1] = '\0';
    418a:	89 81       	ldd	r24, Y+1	; 0x01
    418c:	88 2f       	mov	r24, r24
    418e:	90 e0       	ldi	r25, 0x00	; 0
    4190:	9c 01       	movw	r18, r24
    4192:	21 50       	subi	r18, 0x01	; 1
    4194:	30 40       	sbci	r19, 0x00	; 0
    4196:	8a 81       	ldd	r24, Y+2	; 0x02
    4198:	9b 81       	ldd	r25, Y+3	; 0x03
    419a:	fc 01       	movw	r30, r24
    419c:	e2 0f       	add	r30, r18
    419e:	f3 1f       	adc	r31, r19
    41a0:	10 82       	st	Z, r1
	}
	else
	{
		// return Error State
	}
}
    41a2:	0f 90       	pop	r0
    41a4:	0f 90       	pop	r0
    41a6:	0f 90       	pop	r0
    41a8:	cf 91       	pop	r28
    41aa:	df 91       	pop	r29
    41ac:	08 95       	ret

000041ae <EXTI1_action>:
#include "GI_interface.h"
#include "DIO_interface.h"
#include "EXTI_interface.h"
#include "UART_interface.h"

void EXTI1_action(void){
    41ae:	df 93       	push	r29
    41b0:	cf 93       	push	r28
    41b2:	0f 92       	push	r0
    41b4:	cd b7       	in	r28, 0x3d	; 61
    41b6:	de b7       	in	r29, 0x3e	; 62
	//for flame sensor
	u8 local_u8pinvalu;
	DIO_voidGetPinValue(DIO_PORTD,DIO_PIN3,&local_u8pinvalu);
    41b8:	83 e0       	ldi	r24, 0x03	; 3
    41ba:	63 e0       	ldi	r22, 0x03	; 3
    41bc:	9e 01       	movw	r18, r28
    41be:	2f 5f       	subi	r18, 0xFF	; 255
    41c0:	3f 4f       	sbci	r19, 0xFF	; 255
    41c2:	a9 01       	movw	r20, r18
    41c4:	0e 94 cc 0b 	call	0x1798	; 0x1798 <DIO_voidGetPinValue>

	if(local_u8pinvalu){
    41c8:	89 81       	ldd	r24, Y+1	; 0x01
    41ca:	88 23       	and	r24, r24
    41cc:	d9 f0       	breq	.+54     	; 0x4204 <EXTI1_action+0x56>
		//if flame sensor is on

		DIO_voidSetPinDirection(DIO_PORTD, DIO_PIN0, DIO_PIN_INPUT);  //Rx
    41ce:	83 e0       	ldi	r24, 0x03	; 3
    41d0:	60 e0       	ldi	r22, 0x00	; 0
    41d2:	40 e0       	ldi	r20, 0x00	; 0
    41d4:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(DIO_PORTD, DIO_PIN1, DIO_PIN_OUTPUT); //Tx
    41d8:	83 e0       	ldi	r24, 0x03	; 3
    41da:	61 e0       	ldi	r22, 0x01	; 1
    41dc:	41 e0       	ldi	r20, 0x01	; 1
    41de:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>
		UART_voidInit();
    41e2:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidInit>

	DIO_voidSetPinValue(DIO_PORTC,DIO_PIN7,DIO_PIN_HIGH);//PUMP
    41e6:	82 e0       	ldi	r24, 0x02	; 2
    41e8:	67 e0       	ldi	r22, 0x07	; 7
    41ea:	41 e0       	ldi	r20, 0x01	; 1
    41ec:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_PIN_HIGH); //BUZZER
    41f0:	83 e0       	ldi	r24, 0x03	; 3
    41f2:	66 e0       	ldi	r22, 0x06	; 6
    41f4:	41 e0       	ldi	r20, 0x01	; 1
    41f6:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	UART_voidTxString((u8*)"THERE IS A FIRE!! ");
    41fa:	80 e6       	ldi	r24, 0x60	; 96
    41fc:	90 e0       	ldi	r25, 0x00	; 0
    41fe:	0e 94 71 20 	call	0x40e2	; 0x40e2 <UART_voidTxString>
    4202:	1a c0       	rjmp	.+52     	; 0x4238 <EXTI1_action+0x8a>

	}
	else
	{
		//if flame sensor is off
		DIO_voidSetPinDirection(DIO_PORTD, DIO_PIN0, DIO_PIN_INPUT);  //Rx
    4204:	83 e0       	ldi	r24, 0x03	; 3
    4206:	60 e0       	ldi	r22, 0x00	; 0
    4208:	40 e0       	ldi	r20, 0x00	; 0
    420a:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(DIO_PORTD, DIO_PIN1, DIO_PIN_OUTPUT); //Tx
    420e:	83 e0       	ldi	r24, 0x03	; 3
    4210:	61 e0       	ldi	r22, 0x01	; 1
    4212:	41 e0       	ldi	r20, 0x01	; 1
    4214:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>
		UART_voidInit();
    4218:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidInit>

		DIO_voidSetPinValue(DIO_PORTC,DIO_PIN7,DIO_PIN_LOW);//PUMP
    421c:	82 e0       	ldi	r24, 0x02	; 2
    421e:	67 e0       	ldi	r22, 0x07	; 7
    4220:	40 e0       	ldi	r20, 0x00	; 0
    4222:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_PIN_LOW);//BUZZER
    4226:	83 e0       	ldi	r24, 0x03	; 3
    4228:	66 e0       	ldi	r22, 0x06	; 6
    422a:	40 e0       	ldi	r20, 0x00	; 0
    422c:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
		UART_voidTxString((u8*)"THE FIRE IS GONE ");
    4230:	83 e7       	ldi	r24, 0x73	; 115
    4232:	90 e0       	ldi	r25, 0x00	; 0
    4234:	0e 94 71 20 	call	0x40e2	; 0x40e2 <UART_voidTxString>
	}

}
    4238:	0f 90       	pop	r0
    423a:	cf 91       	pop	r28
    423c:	df 91       	pop	r29
    423e:	08 95       	ret

00004240 <main>:


int main(){
    4240:	df 93       	push	r29
    4242:	cf 93       	push	r28
    4244:	cd b7       	in	r28, 0x3d	; 61
    4246:	de b7       	in	r29, 0x3e	; 62
	GI_voidEnable();
    4248:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <GI_voidEnable>
	DIO_voidSetPinDirection(DIO_PORTC, DIO_PIN7, DIO_PIN_OUTPUT); //PUMP
    424c:	82 e0       	ldi	r24, 0x02	; 2
    424e:	67 e0       	ldi	r22, 0x07	; 7
    4250:	41 e0       	ldi	r20, 0x01	; 1
    4252:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN3,DIO_PIN_INPUT); //INT1
    4256:	83 e0       	ldi	r24, 0x03	; 3
    4258:	63 e0       	ldi	r22, 0x03	; 3
    425a:	40 e0       	ldi	r20, 0x00	; 0
    425c:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN6,DIO_PIN_OUTPUT); //buzzer
    4260:	83 e0       	ldi	r24, 0x03	; 3
    4262:	66 e0       	ldi	r22, 0x06	; 6
    4264:	41 e0       	ldi	r20, 0x01	; 1
    4266:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>
	EXTI_voidInit(EXTI_INT1,EXTI_ANY_LOGICAL_CHANGE);
    426a:	81 e0       	ldi	r24, 0x01	; 1
    426c:	63 e0       	ldi	r22, 0x03	; 3
    426e:	0e 94 9a 11 	call	0x2334	; 0x2334 <EXTI_voidInit>

	EXTI_voidSetCallBackINT1(&EXTI1_action);
    4272:	87 ed       	ldi	r24, 0xD7	; 215
    4274:	90 e2       	ldi	r25, 0x20	; 32
    4276:	0e 94 1d 13 	call	0x263a	; 0x263a <EXTI_voidSetCallBackINT1>
	EXTI_voidEnable(EXTI_INT1);
    427a:	81 e0       	ldi	r24, 0x01	; 1
    427c:	0e 94 99 12 	call	0x2532	; 0x2532 <EXTI_voidEnable>



	if(SmartHome_voidCheckPassword()== TRUE){
    4280:	0e 94 54 21 	call	0x42a8	; 0x42a8 <SmartHome_voidCheckPassword>
    4284:	81 30       	cpi	r24, 0x01	; 1
    4286:	91 05       	cpc	r25, r1
    4288:	39 f4       	brne	.+14     	; 0x4298 <main+0x58>


		SmartHome_voidOpenDoorservoCmotor();
    428a:	0e 94 74 26 	call	0x4ce8	; 0x4ce8 <SmartHome_voidOpenDoorservoCmotor>
		SmartHome_voidLedEnable();
    428e:	0e 94 9e 27 	call	0x4f3c	; 0x4f3c <SmartHome_voidLedEnable>

		SmartHome_voidTempratureDCmotor();
    4292:	0e 94 8f 25 	call	0x4b1e	; 0x4b1e <SmartHome_voidTempratureDCmotor>
    4296:	02 c0       	rjmp	.+4      	; 0x429c <main+0x5c>
	}

	else{
		SmartHome_voidLedDisable();
    4298:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <SmartHome_voidLedDisable>

	}
	while(1){
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_PIN_HIGH); //buzzer
    429c:	83 e0       	ldi	r24, 0x03	; 3
    429e:	66 e0       	ldi	r22, 0x06	; 6
    42a0:	41 e0       	ldi	r20, 0x01	; 1
    42a2:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
    42a6:	fa cf       	rjmp	.-12     	; 0x429c <main+0x5c>

000042a8 <SmartHome_voidCheckPassword>:
#include "DCM_interface.h"
#include "smarthome_config.h"
#include "SERVO_interface.h"
#include "LED_interface.h"

BOOL SmartHome_voidCheckPassword(){
    42a8:	0f 93       	push	r16
    42aa:	1f 93       	push	r17
    42ac:	df 93       	push	r29
    42ae:	cf 93       	push	r28
    42b0:	cd b7       	in	r28, 0x3d	; 61
    42b2:	de b7       	in	r29, 0x3e	; 62
    42b4:	c0 56       	subi	r28, 0x60	; 96
    42b6:	d0 40       	sbci	r29, 0x00	; 0
    42b8:	0f b6       	in	r0, 0x3f	; 63
    42ba:	f8 94       	cli
    42bc:	de bf       	out	0x3e, r29	; 62
    42be:	0f be       	out	0x3f, r0	; 63
    42c0:	cd bf       	out	0x3d, r28	; 61

u32 local_u32realpass=SmartHome_u32WR_Rpassword();
    42c2:	0e 94 17 27 	call	0x4e2e	; 0x4e2e <SmartHome_u32WR_Rpassword>
    42c6:	dc 01       	movw	r26, r24
    42c8:	cb 01       	movw	r24, r22
    42ca:	fe 01       	movw	r30, r28
    42cc:	e6 5a       	subi	r30, 0xA6	; 166
    42ce:	ff 4f       	sbci	r31, 0xFF	; 255
    42d0:	80 83       	st	Z, r24
    42d2:	91 83       	std	Z+1, r25	; 0x01
    42d4:	a2 83       	std	Z+2, r26	; 0x02
    42d6:	b3 83       	std	Z+3, r27	; 0x03

	u8 local_u8val;
	u32 local_u8pass=0;
    42d8:	fe 01       	movw	r30, r28
    42da:	ea 5a       	subi	r30, 0xAA	; 170
    42dc:	ff 4f       	sbci	r31, 0xFF	; 255
    42de:	10 82       	st	Z, r1
    42e0:	11 82       	std	Z+1, r1	; 0x01
    42e2:	12 82       	std	Z+2, r1	; 0x02
    42e4:	13 82       	std	Z+3, r1	; 0x03
	u8 local_u8counter=0;
    42e6:	fe 01       	movw	r30, r28
    42e8:	eb 5a       	subi	r30, 0xAB	; 171
    42ea:	ff 4f       	sbci	r31, 0xFF	; 255
    42ec:	10 82       	st	Z, r1

	LCD_voidInit();
    42ee:	0e 94 44 15 	call	0x2a88	; 0x2a88 <LCD_voidInit>
	KPD_voidInit();
    42f2:	0e 94 fe 13 	call	0x27fc	; 0x27fc <KPD_voidInit>

	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN6,DIO_PIN_OUTPUT);//buzzer
    42f6:	83 e0       	ldi	r24, 0x03	; 3
    42f8:	66 e0       	ldi	r22, 0x06	; 6
    42fa:	41 e0       	ldi	r20, 0x01	; 1
    42fc:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>

	LCD_voidGoToSpecificPosition(0,2);
    4300:	80 e0       	ldi	r24, 0x00	; 0
    4302:	62 e0       	ldi	r22, 0x02	; 2
    4304:	0e 94 4c 19 	call	0x3298	; 0x3298 <LCD_voidGoToSpecificPosition>
	LCD_voidDisplayString((u8*)"welcome home");
    4308:	85 e8       	ldi	r24, 0x85	; 133
    430a:	90 e0       	ldi	r25, 0x00	; 0
    430c:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <LCD_voidDisplayString>
    4310:	fe 01       	movw	r30, r28
    4312:	ef 5a       	subi	r30, 0xAF	; 175
    4314:	ff 4f       	sbci	r31, 0xFF	; 255
    4316:	80 e0       	ldi	r24, 0x00	; 0
    4318:	90 e0       	ldi	r25, 0x00	; 0
    431a:	aa e7       	ldi	r26, 0x7A	; 122
    431c:	b4 e4       	ldi	r27, 0x44	; 68
    431e:	80 83       	st	Z, r24
    4320:	91 83       	std	Z+1, r25	; 0x01
    4322:	a2 83       	std	Z+2, r26	; 0x02
    4324:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4326:	8e 01       	movw	r16, r28
    4328:	03 5b       	subi	r16, 0xB3	; 179
    432a:	1f 4f       	sbci	r17, 0xFF	; 255
    432c:	fe 01       	movw	r30, r28
    432e:	ef 5a       	subi	r30, 0xAF	; 175
    4330:	ff 4f       	sbci	r31, 0xFF	; 255
    4332:	60 81       	ld	r22, Z
    4334:	71 81       	ldd	r23, Z+1	; 0x01
    4336:	82 81       	ldd	r24, Z+2	; 0x02
    4338:	93 81       	ldd	r25, Z+3	; 0x03
    433a:	20 e0       	ldi	r18, 0x00	; 0
    433c:	30 e0       	ldi	r19, 0x00	; 0
    433e:	4a e7       	ldi	r20, 0x7A	; 122
    4340:	55 e4       	ldi	r21, 0x45	; 69
    4342:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4346:	dc 01       	movw	r26, r24
    4348:	cb 01       	movw	r24, r22
    434a:	f8 01       	movw	r30, r16
    434c:	80 83       	st	Z, r24
    434e:	91 83       	std	Z+1, r25	; 0x01
    4350:	a2 83       	std	Z+2, r26	; 0x02
    4352:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4354:	fe 01       	movw	r30, r28
    4356:	e3 5b       	subi	r30, 0xB3	; 179
    4358:	ff 4f       	sbci	r31, 0xFF	; 255
    435a:	60 81       	ld	r22, Z
    435c:	71 81       	ldd	r23, Z+1	; 0x01
    435e:	82 81       	ldd	r24, Z+2	; 0x02
    4360:	93 81       	ldd	r25, Z+3	; 0x03
    4362:	20 e0       	ldi	r18, 0x00	; 0
    4364:	30 e0       	ldi	r19, 0x00	; 0
    4366:	40 e8       	ldi	r20, 0x80	; 128
    4368:	5f e3       	ldi	r21, 0x3F	; 63
    436a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    436e:	88 23       	and	r24, r24
    4370:	44 f4       	brge	.+16     	; 0x4382 <SmartHome_voidCheckPassword+0xda>
		__ticks = 1;
    4372:	fe 01       	movw	r30, r28
    4374:	e5 5b       	subi	r30, 0xB5	; 181
    4376:	ff 4f       	sbci	r31, 0xFF	; 255
    4378:	81 e0       	ldi	r24, 0x01	; 1
    437a:	90 e0       	ldi	r25, 0x00	; 0
    437c:	91 83       	std	Z+1, r25	; 0x01
    437e:	80 83       	st	Z, r24
    4380:	64 c0       	rjmp	.+200    	; 0x444a <SmartHome_voidCheckPassword+0x1a2>
	else if (__tmp > 65535)
    4382:	fe 01       	movw	r30, r28
    4384:	e3 5b       	subi	r30, 0xB3	; 179
    4386:	ff 4f       	sbci	r31, 0xFF	; 255
    4388:	60 81       	ld	r22, Z
    438a:	71 81       	ldd	r23, Z+1	; 0x01
    438c:	82 81       	ldd	r24, Z+2	; 0x02
    438e:	93 81       	ldd	r25, Z+3	; 0x03
    4390:	20 e0       	ldi	r18, 0x00	; 0
    4392:	3f ef       	ldi	r19, 0xFF	; 255
    4394:	4f e7       	ldi	r20, 0x7F	; 127
    4396:	57 e4       	ldi	r21, 0x47	; 71
    4398:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    439c:	18 16       	cp	r1, r24
    439e:	0c f0       	brlt	.+2      	; 0x43a2 <SmartHome_voidCheckPassword+0xfa>
    43a0:	43 c0       	rjmp	.+134    	; 0x4428 <SmartHome_voidCheckPassword+0x180>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43a2:	fe 01       	movw	r30, r28
    43a4:	ef 5a       	subi	r30, 0xAF	; 175
    43a6:	ff 4f       	sbci	r31, 0xFF	; 255
    43a8:	60 81       	ld	r22, Z
    43aa:	71 81       	ldd	r23, Z+1	; 0x01
    43ac:	82 81       	ldd	r24, Z+2	; 0x02
    43ae:	93 81       	ldd	r25, Z+3	; 0x03
    43b0:	20 e0       	ldi	r18, 0x00	; 0
    43b2:	30 e0       	ldi	r19, 0x00	; 0
    43b4:	40 e2       	ldi	r20, 0x20	; 32
    43b6:	51 e4       	ldi	r21, 0x41	; 65
    43b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43bc:	dc 01       	movw	r26, r24
    43be:	cb 01       	movw	r24, r22
    43c0:	8e 01       	movw	r16, r28
    43c2:	05 5b       	subi	r16, 0xB5	; 181
    43c4:	1f 4f       	sbci	r17, 0xFF	; 255
    43c6:	bc 01       	movw	r22, r24
    43c8:	cd 01       	movw	r24, r26
    43ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43ce:	dc 01       	movw	r26, r24
    43d0:	cb 01       	movw	r24, r22
    43d2:	f8 01       	movw	r30, r16
    43d4:	91 83       	std	Z+1, r25	; 0x01
    43d6:	80 83       	st	Z, r24
    43d8:	1f c0       	rjmp	.+62     	; 0x4418 <SmartHome_voidCheckPassword+0x170>
    43da:	fe 01       	movw	r30, r28
    43dc:	e7 5b       	subi	r30, 0xB7	; 183
    43de:	ff 4f       	sbci	r31, 0xFF	; 255
    43e0:	80 e9       	ldi	r24, 0x90	; 144
    43e2:	91 e0       	ldi	r25, 0x01	; 1
    43e4:	91 83       	std	Z+1, r25	; 0x01
    43e6:	80 83       	st	Z, r24
    43e8:	fe 01       	movw	r30, r28
    43ea:	e7 5b       	subi	r30, 0xB7	; 183
    43ec:	ff 4f       	sbci	r31, 0xFF	; 255
    43ee:	80 81       	ld	r24, Z
    43f0:	91 81       	ldd	r25, Z+1	; 0x01
    43f2:	01 97       	sbiw	r24, 0x01	; 1
    43f4:	f1 f7       	brne	.-4      	; 0x43f2 <SmartHome_voidCheckPassword+0x14a>
    43f6:	fe 01       	movw	r30, r28
    43f8:	e7 5b       	subi	r30, 0xB7	; 183
    43fa:	ff 4f       	sbci	r31, 0xFF	; 255
    43fc:	91 83       	std	Z+1, r25	; 0x01
    43fe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4400:	de 01       	movw	r26, r28
    4402:	a5 5b       	subi	r26, 0xB5	; 181
    4404:	bf 4f       	sbci	r27, 0xFF	; 255
    4406:	fe 01       	movw	r30, r28
    4408:	e5 5b       	subi	r30, 0xB5	; 181
    440a:	ff 4f       	sbci	r31, 0xFF	; 255
    440c:	80 81       	ld	r24, Z
    440e:	91 81       	ldd	r25, Z+1	; 0x01
    4410:	01 97       	sbiw	r24, 0x01	; 1
    4412:	11 96       	adiw	r26, 0x01	; 1
    4414:	9c 93       	st	X, r25
    4416:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4418:	fe 01       	movw	r30, r28
    441a:	e5 5b       	subi	r30, 0xB5	; 181
    441c:	ff 4f       	sbci	r31, 0xFF	; 255
    441e:	80 81       	ld	r24, Z
    4420:	91 81       	ldd	r25, Z+1	; 0x01
    4422:	00 97       	sbiw	r24, 0x00	; 0
    4424:	d1 f6       	brne	.-76     	; 0x43da <SmartHome_voidCheckPassword+0x132>
    4426:	27 c0       	rjmp	.+78     	; 0x4476 <SmartHome_voidCheckPassword+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4428:	8e 01       	movw	r16, r28
    442a:	05 5b       	subi	r16, 0xB5	; 181
    442c:	1f 4f       	sbci	r17, 0xFF	; 255
    442e:	fe 01       	movw	r30, r28
    4430:	e3 5b       	subi	r30, 0xB3	; 179
    4432:	ff 4f       	sbci	r31, 0xFF	; 255
    4434:	60 81       	ld	r22, Z
    4436:	71 81       	ldd	r23, Z+1	; 0x01
    4438:	82 81       	ldd	r24, Z+2	; 0x02
    443a:	93 81       	ldd	r25, Z+3	; 0x03
    443c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4440:	dc 01       	movw	r26, r24
    4442:	cb 01       	movw	r24, r22
    4444:	f8 01       	movw	r30, r16
    4446:	91 83       	std	Z+1, r25	; 0x01
    4448:	80 83       	st	Z, r24
    444a:	de 01       	movw	r26, r28
    444c:	a9 5b       	subi	r26, 0xB9	; 185
    444e:	bf 4f       	sbci	r27, 0xFF	; 255
    4450:	fe 01       	movw	r30, r28
    4452:	e5 5b       	subi	r30, 0xB5	; 181
    4454:	ff 4f       	sbci	r31, 0xFF	; 255
    4456:	80 81       	ld	r24, Z
    4458:	91 81       	ldd	r25, Z+1	; 0x01
    445a:	8d 93       	st	X+, r24
    445c:	9c 93       	st	X, r25
    445e:	fe 01       	movw	r30, r28
    4460:	e9 5b       	subi	r30, 0xB9	; 185
    4462:	ff 4f       	sbci	r31, 0xFF	; 255
    4464:	80 81       	ld	r24, Z
    4466:	91 81       	ldd	r25, Z+1	; 0x01
    4468:	01 97       	sbiw	r24, 0x01	; 1
    446a:	f1 f7       	brne	.-4      	; 0x4468 <SmartHome_voidCheckPassword+0x1c0>
    446c:	fe 01       	movw	r30, r28
    446e:	e9 5b       	subi	r30, 0xB9	; 185
    4470:	ff 4f       	sbci	r31, 0xFF	; 255
    4472:	91 83       	std	Z+1, r25	; 0x01
    4474:	80 83       	st	Z, r24
	_delay_ms(1000);
	LCD_voidClear();
    4476:	0e 94 89 18 	call	0x3112	; 0x3112 <LCD_voidClear>
	LCD_voidDisplayString((u8*)"Enter The Pass");
    447a:	82 e9       	ldi	r24, 0x92	; 146
    447c:	90 e0       	ldi	r25, 0x00	; 0
    447e:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <LCD_voidDisplayString>
    4482:	fe 01       	movw	r30, r28
    4484:	ed 5b       	subi	r30, 0xBD	; 189
    4486:	ff 4f       	sbci	r31, 0xFF	; 255
    4488:	80 e0       	ldi	r24, 0x00	; 0
    448a:	90 e0       	ldi	r25, 0x00	; 0
    448c:	aa e7       	ldi	r26, 0x7A	; 122
    448e:	b4 e4       	ldi	r27, 0x44	; 68
    4490:	80 83       	st	Z, r24
    4492:	91 83       	std	Z+1, r25	; 0x01
    4494:	a2 83       	std	Z+2, r26	; 0x02
    4496:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4498:	8e 01       	movw	r16, r28
    449a:	01 5c       	subi	r16, 0xC1	; 193
    449c:	1f 4f       	sbci	r17, 0xFF	; 255
    449e:	fe 01       	movw	r30, r28
    44a0:	ed 5b       	subi	r30, 0xBD	; 189
    44a2:	ff 4f       	sbci	r31, 0xFF	; 255
    44a4:	60 81       	ld	r22, Z
    44a6:	71 81       	ldd	r23, Z+1	; 0x01
    44a8:	82 81       	ldd	r24, Z+2	; 0x02
    44aa:	93 81       	ldd	r25, Z+3	; 0x03
    44ac:	20 e0       	ldi	r18, 0x00	; 0
    44ae:	30 e0       	ldi	r19, 0x00	; 0
    44b0:	4a e7       	ldi	r20, 0x7A	; 122
    44b2:	55 e4       	ldi	r21, 0x45	; 69
    44b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44b8:	dc 01       	movw	r26, r24
    44ba:	cb 01       	movw	r24, r22
    44bc:	f8 01       	movw	r30, r16
    44be:	80 83       	st	Z, r24
    44c0:	91 83       	std	Z+1, r25	; 0x01
    44c2:	a2 83       	std	Z+2, r26	; 0x02
    44c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    44c6:	fe 01       	movw	r30, r28
    44c8:	ff 96       	adiw	r30, 0x3f	; 63
    44ca:	60 81       	ld	r22, Z
    44cc:	71 81       	ldd	r23, Z+1	; 0x01
    44ce:	82 81       	ldd	r24, Z+2	; 0x02
    44d0:	93 81       	ldd	r25, Z+3	; 0x03
    44d2:	20 e0       	ldi	r18, 0x00	; 0
    44d4:	30 e0       	ldi	r19, 0x00	; 0
    44d6:	40 e8       	ldi	r20, 0x80	; 128
    44d8:	5f e3       	ldi	r21, 0x3F	; 63
    44da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    44de:	88 23       	and	r24, r24
    44e0:	2c f4       	brge	.+10     	; 0x44ec <SmartHome_voidCheckPassword+0x244>
		__ticks = 1;
    44e2:	81 e0       	ldi	r24, 0x01	; 1
    44e4:	90 e0       	ldi	r25, 0x00	; 0
    44e6:	9e af       	std	Y+62, r25	; 0x3e
    44e8:	8d af       	std	Y+61, r24	; 0x3d
    44ea:	46 c0       	rjmp	.+140    	; 0x4578 <SmartHome_voidCheckPassword+0x2d0>
	else if (__tmp > 65535)
    44ec:	fe 01       	movw	r30, r28
    44ee:	ff 96       	adiw	r30, 0x3f	; 63
    44f0:	60 81       	ld	r22, Z
    44f2:	71 81       	ldd	r23, Z+1	; 0x01
    44f4:	82 81       	ldd	r24, Z+2	; 0x02
    44f6:	93 81       	ldd	r25, Z+3	; 0x03
    44f8:	20 e0       	ldi	r18, 0x00	; 0
    44fa:	3f ef       	ldi	r19, 0xFF	; 255
    44fc:	4f e7       	ldi	r20, 0x7F	; 127
    44fe:	57 e4       	ldi	r21, 0x47	; 71
    4500:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4504:	18 16       	cp	r1, r24
    4506:	64 f5       	brge	.+88     	; 0x4560 <SmartHome_voidCheckPassword+0x2b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4508:	fe 01       	movw	r30, r28
    450a:	ed 5b       	subi	r30, 0xBD	; 189
    450c:	ff 4f       	sbci	r31, 0xFF	; 255
    450e:	60 81       	ld	r22, Z
    4510:	71 81       	ldd	r23, Z+1	; 0x01
    4512:	82 81       	ldd	r24, Z+2	; 0x02
    4514:	93 81       	ldd	r25, Z+3	; 0x03
    4516:	20 e0       	ldi	r18, 0x00	; 0
    4518:	30 e0       	ldi	r19, 0x00	; 0
    451a:	40 e2       	ldi	r20, 0x20	; 32
    451c:	51 e4       	ldi	r21, 0x41	; 65
    451e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4522:	dc 01       	movw	r26, r24
    4524:	cb 01       	movw	r24, r22
    4526:	bc 01       	movw	r22, r24
    4528:	cd 01       	movw	r24, r26
    452a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    452e:	dc 01       	movw	r26, r24
    4530:	cb 01       	movw	r24, r22
    4532:	9e af       	std	Y+62, r25	; 0x3e
    4534:	8d af       	std	Y+61, r24	; 0x3d
    4536:	0f c0       	rjmp	.+30     	; 0x4556 <SmartHome_voidCheckPassword+0x2ae>
    4538:	80 e9       	ldi	r24, 0x90	; 144
    453a:	91 e0       	ldi	r25, 0x01	; 1
    453c:	9c af       	std	Y+60, r25	; 0x3c
    453e:	8b af       	std	Y+59, r24	; 0x3b
    4540:	8b ad       	ldd	r24, Y+59	; 0x3b
    4542:	9c ad       	ldd	r25, Y+60	; 0x3c
    4544:	01 97       	sbiw	r24, 0x01	; 1
    4546:	f1 f7       	brne	.-4      	; 0x4544 <SmartHome_voidCheckPassword+0x29c>
    4548:	9c af       	std	Y+60, r25	; 0x3c
    454a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    454c:	8d ad       	ldd	r24, Y+61	; 0x3d
    454e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4550:	01 97       	sbiw	r24, 0x01	; 1
    4552:	9e af       	std	Y+62, r25	; 0x3e
    4554:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4556:	8d ad       	ldd	r24, Y+61	; 0x3d
    4558:	9e ad       	ldd	r25, Y+62	; 0x3e
    455a:	00 97       	sbiw	r24, 0x00	; 0
    455c:	69 f7       	brne	.-38     	; 0x4538 <SmartHome_voidCheckPassword+0x290>
    455e:	16 c0       	rjmp	.+44     	; 0x458c <SmartHome_voidCheckPassword+0x2e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4560:	fe 01       	movw	r30, r28
    4562:	ff 96       	adiw	r30, 0x3f	; 63
    4564:	60 81       	ld	r22, Z
    4566:	71 81       	ldd	r23, Z+1	; 0x01
    4568:	82 81       	ldd	r24, Z+2	; 0x02
    456a:	93 81       	ldd	r25, Z+3	; 0x03
    456c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4570:	dc 01       	movw	r26, r24
    4572:	cb 01       	movw	r24, r22
    4574:	9e af       	std	Y+62, r25	; 0x3e
    4576:	8d af       	std	Y+61, r24	; 0x3d
    4578:	8d ad       	ldd	r24, Y+61	; 0x3d
    457a:	9e ad       	ldd	r25, Y+62	; 0x3e
    457c:	9a af       	std	Y+58, r25	; 0x3a
    457e:	89 af       	std	Y+57, r24	; 0x39
    4580:	89 ad       	ldd	r24, Y+57	; 0x39
    4582:	9a ad       	ldd	r25, Y+58	; 0x3a
    4584:	01 97       	sbiw	r24, 0x01	; 1
    4586:	f1 f7       	brne	.-4      	; 0x4584 <SmartHome_voidCheckPassword+0x2dc>
    4588:	9a af       	std	Y+58, r25	; 0x3a
    458a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1000);
	LCD_voidClear();
    458c:	0e 94 89 18 	call	0x3112	; 0x3112 <LCD_voidClear>
    4590:	a9 c2       	rjmp	.+1362   	; 0x4ae4 <SmartHome_voidCheckPassword+0x83c>

	while(local_u8counter<3){
		while(1){
	KPD_voidGetValue(&local_u8val);
    4592:	ce 01       	movw	r24, r28
    4594:	82 5a       	subi	r24, 0xA2	; 162
    4596:	9f 4f       	sbci	r25, 0xFF	; 255
    4598:	0e 94 51 14 	call	0x28a2	; 0x28a2 <KPD_voidGetValue>
	if(local_u8val !=KPD_NOT_PRESSED){
    459c:	fe 01       	movw	r30, r28
    459e:	e2 5a       	subi	r30, 0xA2	; 162
    45a0:	ff 4f       	sbci	r31, 0xFF	; 255
    45a2:	80 81       	ld	r24, Z
    45a4:	8f 3f       	cpi	r24, 0xFF	; 255
    45a6:	a9 f3       	breq	.-22     	; 0x4592 <SmartHome_voidCheckPassword+0x2ea>

		if(local_u8val == '='){  //if user write the password
    45a8:	fe 01       	movw	r30, r28
    45aa:	e2 5a       	subi	r30, 0xA2	; 162
    45ac:	ff 4f       	sbci	r31, 0xFF	; 255
    45ae:	80 81       	ld	r24, Z
    45b0:	8d 33       	cpi	r24, 0x3D	; 61
    45b2:	09 f0       	breq	.+2      	; 0x45b6 <SmartHome_voidCheckPassword+0x30e>
    45b4:	6c c2       	rjmp	.+1240   	; 0x4a8e <SmartHome_voidCheckPassword+0x7e6>
			if(local_u32realpass ==local_u8pass)
    45b6:	fe 01       	movw	r30, r28
    45b8:	e6 5a       	subi	r30, 0xA6	; 166
    45ba:	ff 4f       	sbci	r31, 0xFF	; 255
    45bc:	de 01       	movw	r26, r28
    45be:	aa 5a       	subi	r26, 0xAA	; 170
    45c0:	bf 4f       	sbci	r27, 0xFF	; 255
    45c2:	20 81       	ld	r18, Z
    45c4:	31 81       	ldd	r19, Z+1	; 0x01
    45c6:	42 81       	ldd	r20, Z+2	; 0x02
    45c8:	53 81       	ldd	r21, Z+3	; 0x03
    45ca:	8d 91       	ld	r24, X+
    45cc:	9d 91       	ld	r25, X+
    45ce:	0d 90       	ld	r0, X+
    45d0:	bc 91       	ld	r27, X
    45d2:	a0 2d       	mov	r26, r0
    45d4:	28 17       	cp	r18, r24
    45d6:	39 07       	cpc	r19, r25
    45d8:	4a 07       	cpc	r20, r26
    45da:	5b 07       	cpc	r21, r27
    45dc:	09 f0       	breq	.+2      	; 0x45e0 <SmartHome_voidCheckPassword+0x338>
    45de:	9b c0       	rjmp	.+310    	; 0x4716 <SmartHome_voidCheckPassword+0x46e>
			{ //if the password is correct
				DIO_voidSetPinDirection(DIO_PORTD, DIO_PIN0, DIO_PIN_INPUT);  //Rx
    45e0:	83 e0       	ldi	r24, 0x03	; 3
    45e2:	60 e0       	ldi	r22, 0x00	; 0
    45e4:	40 e0       	ldi	r20, 0x00	; 0
    45e6:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>
				DIO_voidSetPinDirection(DIO_PORTD, DIO_PIN1, DIO_PIN_OUTPUT); //Tx
    45ea:	83 e0       	ldi	r24, 0x03	; 3
    45ec:	61 e0       	ldi	r22, 0x01	; 1
    45ee:	41 e0       	ldi	r20, 0x01	; 1
    45f0:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>
				UART_voidInit();
    45f4:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidInit>

				LCD_voidClear();
    45f8:	0e 94 89 18 	call	0x3112	; 0x3112 <LCD_voidClear>
				LCD_voidDisplayString((u8*)"Right pass");
    45fc:	81 ea       	ldi	r24, 0xA1	; 161
    45fe:	90 e0       	ldi	r25, 0x00	; 0
    4600:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <LCD_voidDisplayString>
				UART_voidTxString((u8*)"Welcome to your sweet home <3 ");
    4604:	8c ea       	ldi	r24, 0xAC	; 172
    4606:	90 e0       	ldi	r25, 0x00	; 0
    4608:	0e 94 71 20 	call	0x40e2	; 0x40e2 <UART_voidTxString>
				local_u8pass=0;
    460c:	fe 01       	movw	r30, r28
    460e:	ea 5a       	subi	r30, 0xAA	; 170
    4610:	ff 4f       	sbci	r31, 0xFF	; 255
    4612:	10 82       	st	Z, r1
    4614:	11 82       	std	Z+1, r1	; 0x01
    4616:	12 82       	std	Z+2, r1	; 0x02
    4618:	13 82       	std	Z+3, r1	; 0x03
    461a:	80 e0       	ldi	r24, 0x00	; 0
    461c:	90 e0       	ldi	r25, 0x00	; 0
    461e:	aa e7       	ldi	r26, 0x7A	; 122
    4620:	b4 e4       	ldi	r27, 0x44	; 68
    4622:	8d ab       	std	Y+53, r24	; 0x35
    4624:	9e ab       	std	Y+54, r25	; 0x36
    4626:	af ab       	std	Y+55, r26	; 0x37
    4628:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    462a:	6d a9       	ldd	r22, Y+53	; 0x35
    462c:	7e a9       	ldd	r23, Y+54	; 0x36
    462e:	8f a9       	ldd	r24, Y+55	; 0x37
    4630:	98 ad       	ldd	r25, Y+56	; 0x38
    4632:	20 e0       	ldi	r18, 0x00	; 0
    4634:	30 e0       	ldi	r19, 0x00	; 0
    4636:	4a e7       	ldi	r20, 0x7A	; 122
    4638:	55 e4       	ldi	r21, 0x45	; 69
    463a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    463e:	dc 01       	movw	r26, r24
    4640:	cb 01       	movw	r24, r22
    4642:	89 ab       	std	Y+49, r24	; 0x31
    4644:	9a ab       	std	Y+50, r25	; 0x32
    4646:	ab ab       	std	Y+51, r26	; 0x33
    4648:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    464a:	69 a9       	ldd	r22, Y+49	; 0x31
    464c:	7a a9       	ldd	r23, Y+50	; 0x32
    464e:	8b a9       	ldd	r24, Y+51	; 0x33
    4650:	9c a9       	ldd	r25, Y+52	; 0x34
    4652:	20 e0       	ldi	r18, 0x00	; 0
    4654:	30 e0       	ldi	r19, 0x00	; 0
    4656:	40 e8       	ldi	r20, 0x80	; 128
    4658:	5f e3       	ldi	r21, 0x3F	; 63
    465a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    465e:	88 23       	and	r24, r24
    4660:	2c f4       	brge	.+10     	; 0x466c <SmartHome_voidCheckPassword+0x3c4>
		__ticks = 1;
    4662:	81 e0       	ldi	r24, 0x01	; 1
    4664:	90 e0       	ldi	r25, 0x00	; 0
    4666:	98 ab       	std	Y+48, r25	; 0x30
    4668:	8f a7       	std	Y+47, r24	; 0x2f
    466a:	3f c0       	rjmp	.+126    	; 0x46ea <SmartHome_voidCheckPassword+0x442>
	else if (__tmp > 65535)
    466c:	69 a9       	ldd	r22, Y+49	; 0x31
    466e:	7a a9       	ldd	r23, Y+50	; 0x32
    4670:	8b a9       	ldd	r24, Y+51	; 0x33
    4672:	9c a9       	ldd	r25, Y+52	; 0x34
    4674:	20 e0       	ldi	r18, 0x00	; 0
    4676:	3f ef       	ldi	r19, 0xFF	; 255
    4678:	4f e7       	ldi	r20, 0x7F	; 127
    467a:	57 e4       	ldi	r21, 0x47	; 71
    467c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4680:	18 16       	cp	r1, r24
    4682:	4c f5       	brge	.+82     	; 0x46d6 <SmartHome_voidCheckPassword+0x42e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4684:	6d a9       	ldd	r22, Y+53	; 0x35
    4686:	7e a9       	ldd	r23, Y+54	; 0x36
    4688:	8f a9       	ldd	r24, Y+55	; 0x37
    468a:	98 ad       	ldd	r25, Y+56	; 0x38
    468c:	20 e0       	ldi	r18, 0x00	; 0
    468e:	30 e0       	ldi	r19, 0x00	; 0
    4690:	40 e2       	ldi	r20, 0x20	; 32
    4692:	51 e4       	ldi	r21, 0x41	; 65
    4694:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4698:	dc 01       	movw	r26, r24
    469a:	cb 01       	movw	r24, r22
    469c:	bc 01       	movw	r22, r24
    469e:	cd 01       	movw	r24, r26
    46a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46a4:	dc 01       	movw	r26, r24
    46a6:	cb 01       	movw	r24, r22
    46a8:	98 ab       	std	Y+48, r25	; 0x30
    46aa:	8f a7       	std	Y+47, r24	; 0x2f
    46ac:	0f c0       	rjmp	.+30     	; 0x46cc <SmartHome_voidCheckPassword+0x424>
    46ae:	80 e9       	ldi	r24, 0x90	; 144
    46b0:	91 e0       	ldi	r25, 0x01	; 1
    46b2:	9e a7       	std	Y+46, r25	; 0x2e
    46b4:	8d a7       	std	Y+45, r24	; 0x2d
    46b6:	8d a5       	ldd	r24, Y+45	; 0x2d
    46b8:	9e a5       	ldd	r25, Y+46	; 0x2e
    46ba:	01 97       	sbiw	r24, 0x01	; 1
    46bc:	f1 f7       	brne	.-4      	; 0x46ba <SmartHome_voidCheckPassword+0x412>
    46be:	9e a7       	std	Y+46, r25	; 0x2e
    46c0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    46c4:	98 a9       	ldd	r25, Y+48	; 0x30
    46c6:	01 97       	sbiw	r24, 0x01	; 1
    46c8:	98 ab       	std	Y+48, r25	; 0x30
    46ca:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    46ce:	98 a9       	ldd	r25, Y+48	; 0x30
    46d0:	00 97       	sbiw	r24, 0x00	; 0
    46d2:	69 f7       	brne	.-38     	; 0x46ae <SmartHome_voidCheckPassword+0x406>
    46d4:	14 c0       	rjmp	.+40     	; 0x46fe <SmartHome_voidCheckPassword+0x456>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46d6:	69 a9       	ldd	r22, Y+49	; 0x31
    46d8:	7a a9       	ldd	r23, Y+50	; 0x32
    46da:	8b a9       	ldd	r24, Y+51	; 0x33
    46dc:	9c a9       	ldd	r25, Y+52	; 0x34
    46de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46e2:	dc 01       	movw	r26, r24
    46e4:	cb 01       	movw	r24, r22
    46e6:	98 ab       	std	Y+48, r25	; 0x30
    46e8:	8f a7       	std	Y+47, r24	; 0x2f
    46ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    46ec:	98 a9       	ldd	r25, Y+48	; 0x30
    46ee:	9c a7       	std	Y+44, r25	; 0x2c
    46f0:	8b a7       	std	Y+43, r24	; 0x2b
    46f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    46f4:	9c a5       	ldd	r25, Y+44	; 0x2c
    46f6:	01 97       	sbiw	r24, 0x01	; 1
    46f8:	f1 f7       	brne	.-4      	; 0x46f6 <SmartHome_voidCheckPassword+0x44e>
    46fa:	9c a7       	std	Y+44, r25	; 0x2c
    46fc:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(1000);
				LCD_voidClear();
    46fe:	0e 94 89 18 	call	0x3112	; 0x3112 <LCD_voidClear>
				local_u8counter=3;
    4702:	fe 01       	movw	r30, r28
    4704:	eb 5a       	subi	r30, 0xAB	; 171
    4706:	ff 4f       	sbci	r31, 0xFF	; 255
    4708:	83 e0       	ldi	r24, 0x03	; 3
    470a:	80 83       	st	Z, r24
				//UART_voidTxString((u8*)"Welcome your sweet home ");
				return TRUE;
    470c:	f1 e0       	ldi	r31, 0x01	; 1
    470e:	a0 96       	adiw	r28, 0x20	; 32
    4710:	ff af       	std	Y+63, r31	; 0x3f
    4712:	a0 97       	sbiw	r28, 0x20	; 32
    4714:	ef c1       	rjmp	.+990    	; 0x4af4 <SmartHome_voidCheckPassword+0x84c>
			}

			else
			{
				local_u8counter++;
    4716:	de 01       	movw	r26, r28
    4718:	ab 5a       	subi	r26, 0xAB	; 171
    471a:	bf 4f       	sbci	r27, 0xFF	; 255
    471c:	fe 01       	movw	r30, r28
    471e:	eb 5a       	subi	r30, 0xAB	; 171
    4720:	ff 4f       	sbci	r31, 0xFF	; 255
    4722:	80 81       	ld	r24, Z
    4724:	8f 5f       	subi	r24, 0xFF	; 255
    4726:	8c 93       	st	X, r24

				if(local_u8counter !=3)
    4728:	fe 01       	movw	r30, r28
    472a:	eb 5a       	subi	r30, 0xAB	; 171
    472c:	ff 4f       	sbci	r31, 0xFF	; 255
    472e:	80 81       	ld	r24, Z
    4730:	83 30       	cpi	r24, 0x03	; 3
    4732:	09 f4       	brne	.+2      	; 0x4736 <SmartHome_voidCheckPassword+0x48e>
    4734:	9a c0       	rjmp	.+308    	; 0x486a <SmartHome_voidCheckPassword+0x5c2>
				{   //if the password is wrong and he has a trial
				DIO_voidSetPinDirection(DIO_PORTD, DIO_PIN0, DIO_PIN_INPUT);  //Rx
    4736:	83 e0       	ldi	r24, 0x03	; 3
    4738:	60 e0       	ldi	r22, 0x00	; 0
    473a:	40 e0       	ldi	r20, 0x00	; 0
    473c:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>
				DIO_voidSetPinDirection(DIO_PORTD, DIO_PIN1, DIO_PIN_OUTPUT); //Tx
    4740:	83 e0       	ldi	r24, 0x03	; 3
    4742:	61 e0       	ldi	r22, 0x01	; 1
    4744:	41 e0       	ldi	r20, 0x01	; 1
    4746:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>
				UART_voidInit();
    474a:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidInit>
				LCD_voidClear();
    474e:	0e 94 89 18 	call	0x3112	; 0x3112 <LCD_voidClear>
				LCD_voidDisplayString((u8*)"wrong pass");
    4752:	8b ec       	ldi	r24, 0xCB	; 203
    4754:	90 e0       	ldi	r25, 0x00	; 0
    4756:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <LCD_voidDisplayString>
				LCD_voidGoToSpecificPosition(1,0);
    475a:	81 e0       	ldi	r24, 0x01	; 1
    475c:	60 e0       	ldi	r22, 0x00	; 0
    475e:	0e 94 4c 19 	call	0x3298	; 0x3298 <LCD_voidGoToSpecificPosition>
				LCD_voidDisplayString((u8*)"try again");
    4762:	86 ed       	ldi	r24, 0xD6	; 214
    4764:	90 e0       	ldi	r25, 0x00	; 0
    4766:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <LCD_voidDisplayString>
    476a:	80 e0       	ldi	r24, 0x00	; 0
    476c:	90 e0       	ldi	r25, 0x00	; 0
    476e:	aa e7       	ldi	r26, 0x7A	; 122
    4770:	b4 e4       	ldi	r27, 0x44	; 68
    4772:	8f a3       	std	Y+39, r24	; 0x27
    4774:	98 a7       	std	Y+40, r25	; 0x28
    4776:	a9 a7       	std	Y+41, r26	; 0x29
    4778:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    477a:	6f a1       	ldd	r22, Y+39	; 0x27
    477c:	78 a5       	ldd	r23, Y+40	; 0x28
    477e:	89 a5       	ldd	r24, Y+41	; 0x29
    4780:	9a a5       	ldd	r25, Y+42	; 0x2a
    4782:	20 e0       	ldi	r18, 0x00	; 0
    4784:	30 e0       	ldi	r19, 0x00	; 0
    4786:	4a e7       	ldi	r20, 0x7A	; 122
    4788:	55 e4       	ldi	r21, 0x45	; 69
    478a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    478e:	dc 01       	movw	r26, r24
    4790:	cb 01       	movw	r24, r22
    4792:	8b a3       	std	Y+35, r24	; 0x23
    4794:	9c a3       	std	Y+36, r25	; 0x24
    4796:	ad a3       	std	Y+37, r26	; 0x25
    4798:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    479a:	6b a1       	ldd	r22, Y+35	; 0x23
    479c:	7c a1       	ldd	r23, Y+36	; 0x24
    479e:	8d a1       	ldd	r24, Y+37	; 0x25
    47a0:	9e a1       	ldd	r25, Y+38	; 0x26
    47a2:	20 e0       	ldi	r18, 0x00	; 0
    47a4:	30 e0       	ldi	r19, 0x00	; 0
    47a6:	40 e8       	ldi	r20, 0x80	; 128
    47a8:	5f e3       	ldi	r21, 0x3F	; 63
    47aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    47ae:	88 23       	and	r24, r24
    47b0:	2c f4       	brge	.+10     	; 0x47bc <SmartHome_voidCheckPassword+0x514>
		__ticks = 1;
    47b2:	81 e0       	ldi	r24, 0x01	; 1
    47b4:	90 e0       	ldi	r25, 0x00	; 0
    47b6:	9a a3       	std	Y+34, r25	; 0x22
    47b8:	89 a3       	std	Y+33, r24	; 0x21
    47ba:	3f c0       	rjmp	.+126    	; 0x483a <SmartHome_voidCheckPassword+0x592>
	else if (__tmp > 65535)
    47bc:	6b a1       	ldd	r22, Y+35	; 0x23
    47be:	7c a1       	ldd	r23, Y+36	; 0x24
    47c0:	8d a1       	ldd	r24, Y+37	; 0x25
    47c2:	9e a1       	ldd	r25, Y+38	; 0x26
    47c4:	20 e0       	ldi	r18, 0x00	; 0
    47c6:	3f ef       	ldi	r19, 0xFF	; 255
    47c8:	4f e7       	ldi	r20, 0x7F	; 127
    47ca:	57 e4       	ldi	r21, 0x47	; 71
    47cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    47d0:	18 16       	cp	r1, r24
    47d2:	4c f5       	brge	.+82     	; 0x4826 <SmartHome_voidCheckPassword+0x57e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47d4:	6f a1       	ldd	r22, Y+39	; 0x27
    47d6:	78 a5       	ldd	r23, Y+40	; 0x28
    47d8:	89 a5       	ldd	r24, Y+41	; 0x29
    47da:	9a a5       	ldd	r25, Y+42	; 0x2a
    47dc:	20 e0       	ldi	r18, 0x00	; 0
    47de:	30 e0       	ldi	r19, 0x00	; 0
    47e0:	40 e2       	ldi	r20, 0x20	; 32
    47e2:	51 e4       	ldi	r21, 0x41	; 65
    47e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47e8:	dc 01       	movw	r26, r24
    47ea:	cb 01       	movw	r24, r22
    47ec:	bc 01       	movw	r22, r24
    47ee:	cd 01       	movw	r24, r26
    47f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47f4:	dc 01       	movw	r26, r24
    47f6:	cb 01       	movw	r24, r22
    47f8:	9a a3       	std	Y+34, r25	; 0x22
    47fa:	89 a3       	std	Y+33, r24	; 0x21
    47fc:	0f c0       	rjmp	.+30     	; 0x481c <SmartHome_voidCheckPassword+0x574>
    47fe:	80 e9       	ldi	r24, 0x90	; 144
    4800:	91 e0       	ldi	r25, 0x01	; 1
    4802:	98 a3       	std	Y+32, r25	; 0x20
    4804:	8f 8f       	std	Y+31, r24	; 0x1f
    4806:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4808:	98 a1       	ldd	r25, Y+32	; 0x20
    480a:	01 97       	sbiw	r24, 0x01	; 1
    480c:	f1 f7       	brne	.-4      	; 0x480a <SmartHome_voidCheckPassword+0x562>
    480e:	98 a3       	std	Y+32, r25	; 0x20
    4810:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4812:	89 a1       	ldd	r24, Y+33	; 0x21
    4814:	9a a1       	ldd	r25, Y+34	; 0x22
    4816:	01 97       	sbiw	r24, 0x01	; 1
    4818:	9a a3       	std	Y+34, r25	; 0x22
    481a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    481c:	89 a1       	ldd	r24, Y+33	; 0x21
    481e:	9a a1       	ldd	r25, Y+34	; 0x22
    4820:	00 97       	sbiw	r24, 0x00	; 0
    4822:	69 f7       	brne	.-38     	; 0x47fe <SmartHome_voidCheckPassword+0x556>
    4824:	14 c0       	rjmp	.+40     	; 0x484e <SmartHome_voidCheckPassword+0x5a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4826:	6b a1       	ldd	r22, Y+35	; 0x23
    4828:	7c a1       	ldd	r23, Y+36	; 0x24
    482a:	8d a1       	ldd	r24, Y+37	; 0x25
    482c:	9e a1       	ldd	r25, Y+38	; 0x26
    482e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4832:	dc 01       	movw	r26, r24
    4834:	cb 01       	movw	r24, r22
    4836:	9a a3       	std	Y+34, r25	; 0x22
    4838:	89 a3       	std	Y+33, r24	; 0x21
    483a:	89 a1       	ldd	r24, Y+33	; 0x21
    483c:	9a a1       	ldd	r25, Y+34	; 0x22
    483e:	9e 8f       	std	Y+30, r25	; 0x1e
    4840:	8d 8f       	std	Y+29, r24	; 0x1d
    4842:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4844:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4846:	01 97       	sbiw	r24, 0x01	; 1
    4848:	f1 f7       	brne	.-4      	; 0x4846 <SmartHome_voidCheckPassword+0x59e>
    484a:	9e 8f       	std	Y+30, r25	; 0x1e
    484c:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(1000);
				LCD_voidClear();
    484e:	0e 94 89 18 	call	0x3112	; 0x3112 <LCD_voidClear>

				local_u8pass=0;  //clear the variable to write again the passwrod
    4852:	fe 01       	movw	r30, r28
    4854:	ea 5a       	subi	r30, 0xAA	; 170
    4856:	ff 4f       	sbci	r31, 0xFF	; 255
    4858:	10 82       	st	Z, r1
    485a:	11 82       	std	Z+1, r1	; 0x01
    485c:	12 82       	std	Z+2, r1	; 0x02
    485e:	13 82       	std	Z+3, r1	; 0x03

				UART_voidTxString((u8*)"Someone try to log in ");
    4860:	80 ee       	ldi	r24, 0xE0	; 224
    4862:	90 e0       	ldi	r25, 0x00	; 0
    4864:	0e 94 71 20 	call	0x40e2	; 0x40e2 <UART_voidTxString>
    4868:	7a c0       	rjmp	.+244    	; 0x495e <SmartHome_voidCheckPassword+0x6b6>
				}

				else{
					LCD_voidClear();
    486a:	0e 94 89 18 	call	0x3112	; 0x3112 <LCD_voidClear>
					LCD_voidDisplayString((u8*)"wrong pass");
    486e:	8b ec       	ldi	r24, 0xCB	; 203
    4870:	90 e0       	ldi	r25, 0x00	; 0
    4872:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <LCD_voidDisplayString>
    4876:	80 e0       	ldi	r24, 0x00	; 0
    4878:	90 e0       	ldi	r25, 0x00	; 0
    487a:	aa e7       	ldi	r26, 0x7A	; 122
    487c:	b4 e4       	ldi	r27, 0x44	; 68
    487e:	89 8f       	std	Y+25, r24	; 0x19
    4880:	9a 8f       	std	Y+26, r25	; 0x1a
    4882:	ab 8f       	std	Y+27, r26	; 0x1b
    4884:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4886:	69 8d       	ldd	r22, Y+25	; 0x19
    4888:	7a 8d       	ldd	r23, Y+26	; 0x1a
    488a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    488c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    488e:	20 e0       	ldi	r18, 0x00	; 0
    4890:	30 e0       	ldi	r19, 0x00	; 0
    4892:	4a e7       	ldi	r20, 0x7A	; 122
    4894:	55 e4       	ldi	r21, 0x45	; 69
    4896:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    489a:	dc 01       	movw	r26, r24
    489c:	cb 01       	movw	r24, r22
    489e:	8d 8b       	std	Y+21, r24	; 0x15
    48a0:	9e 8b       	std	Y+22, r25	; 0x16
    48a2:	af 8b       	std	Y+23, r26	; 0x17
    48a4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    48a6:	6d 89       	ldd	r22, Y+21	; 0x15
    48a8:	7e 89       	ldd	r23, Y+22	; 0x16
    48aa:	8f 89       	ldd	r24, Y+23	; 0x17
    48ac:	98 8d       	ldd	r25, Y+24	; 0x18
    48ae:	20 e0       	ldi	r18, 0x00	; 0
    48b0:	30 e0       	ldi	r19, 0x00	; 0
    48b2:	40 e8       	ldi	r20, 0x80	; 128
    48b4:	5f e3       	ldi	r21, 0x3F	; 63
    48b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    48ba:	88 23       	and	r24, r24
    48bc:	2c f4       	brge	.+10     	; 0x48c8 <SmartHome_voidCheckPassword+0x620>
		__ticks = 1;
    48be:	81 e0       	ldi	r24, 0x01	; 1
    48c0:	90 e0       	ldi	r25, 0x00	; 0
    48c2:	9c 8b       	std	Y+20, r25	; 0x14
    48c4:	8b 8b       	std	Y+19, r24	; 0x13
    48c6:	3f c0       	rjmp	.+126    	; 0x4946 <SmartHome_voidCheckPassword+0x69e>
	else if (__tmp > 65535)
    48c8:	6d 89       	ldd	r22, Y+21	; 0x15
    48ca:	7e 89       	ldd	r23, Y+22	; 0x16
    48cc:	8f 89       	ldd	r24, Y+23	; 0x17
    48ce:	98 8d       	ldd	r25, Y+24	; 0x18
    48d0:	20 e0       	ldi	r18, 0x00	; 0
    48d2:	3f ef       	ldi	r19, 0xFF	; 255
    48d4:	4f e7       	ldi	r20, 0x7F	; 127
    48d6:	57 e4       	ldi	r21, 0x47	; 71
    48d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    48dc:	18 16       	cp	r1, r24
    48de:	4c f5       	brge	.+82     	; 0x4932 <SmartHome_voidCheckPassword+0x68a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48e0:	69 8d       	ldd	r22, Y+25	; 0x19
    48e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    48e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    48e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    48e8:	20 e0       	ldi	r18, 0x00	; 0
    48ea:	30 e0       	ldi	r19, 0x00	; 0
    48ec:	40 e2       	ldi	r20, 0x20	; 32
    48ee:	51 e4       	ldi	r21, 0x41	; 65
    48f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48f4:	dc 01       	movw	r26, r24
    48f6:	cb 01       	movw	r24, r22
    48f8:	bc 01       	movw	r22, r24
    48fa:	cd 01       	movw	r24, r26
    48fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4900:	dc 01       	movw	r26, r24
    4902:	cb 01       	movw	r24, r22
    4904:	9c 8b       	std	Y+20, r25	; 0x14
    4906:	8b 8b       	std	Y+19, r24	; 0x13
    4908:	0f c0       	rjmp	.+30     	; 0x4928 <SmartHome_voidCheckPassword+0x680>
    490a:	80 e9       	ldi	r24, 0x90	; 144
    490c:	91 e0       	ldi	r25, 0x01	; 1
    490e:	9a 8b       	std	Y+18, r25	; 0x12
    4910:	89 8b       	std	Y+17, r24	; 0x11
    4912:	89 89       	ldd	r24, Y+17	; 0x11
    4914:	9a 89       	ldd	r25, Y+18	; 0x12
    4916:	01 97       	sbiw	r24, 0x01	; 1
    4918:	f1 f7       	brne	.-4      	; 0x4916 <SmartHome_voidCheckPassword+0x66e>
    491a:	9a 8b       	std	Y+18, r25	; 0x12
    491c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    491e:	8b 89       	ldd	r24, Y+19	; 0x13
    4920:	9c 89       	ldd	r25, Y+20	; 0x14
    4922:	01 97       	sbiw	r24, 0x01	; 1
    4924:	9c 8b       	std	Y+20, r25	; 0x14
    4926:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4928:	8b 89       	ldd	r24, Y+19	; 0x13
    492a:	9c 89       	ldd	r25, Y+20	; 0x14
    492c:	00 97       	sbiw	r24, 0x00	; 0
    492e:	69 f7       	brne	.-38     	; 0x490a <SmartHome_voidCheckPassword+0x662>
    4930:	14 c0       	rjmp	.+40     	; 0x495a <SmartHome_voidCheckPassword+0x6b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4932:	6d 89       	ldd	r22, Y+21	; 0x15
    4934:	7e 89       	ldd	r23, Y+22	; 0x16
    4936:	8f 89       	ldd	r24, Y+23	; 0x17
    4938:	98 8d       	ldd	r25, Y+24	; 0x18
    493a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    493e:	dc 01       	movw	r26, r24
    4940:	cb 01       	movw	r24, r22
    4942:	9c 8b       	std	Y+20, r25	; 0x14
    4944:	8b 8b       	std	Y+19, r24	; 0x13
    4946:	8b 89       	ldd	r24, Y+19	; 0x13
    4948:	9c 89       	ldd	r25, Y+20	; 0x14
    494a:	98 8b       	std	Y+16, r25	; 0x10
    494c:	8f 87       	std	Y+15, r24	; 0x0f
    494e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4950:	98 89       	ldd	r25, Y+16	; 0x10
    4952:	01 97       	sbiw	r24, 0x01	; 1
    4954:	f1 f7       	brne	.-4      	; 0x4952 <SmartHome_voidCheckPassword+0x6aa>
    4956:	98 8b       	std	Y+16, r25	; 0x10
    4958:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(1000);
					LCD_voidClear();
    495a:	0e 94 89 18 	call	0x3112	; 0x3112 <LCD_voidClear>
				   }

				if(local_u8counter ==3)
    495e:	fe 01       	movw	r30, r28
    4960:	eb 5a       	subi	r30, 0xAB	; 171
    4962:	ff 4f       	sbci	r31, 0xFF	; 255
    4964:	80 81       	ld	r24, Z
    4966:	83 30       	cpi	r24, 0x03	; 3
    4968:	09 f0       	breq	.+2      	; 0x496c <SmartHome_voidCheckPassword+0x6c4>
    496a:	bc c0       	rjmp	.+376    	; 0x4ae4 <SmartHome_voidCheckPassword+0x83c>
				{   //if the password is wrong and he has not any trial
					DIO_voidSetPinDirection(DIO_PORTD, DIO_PIN0, DIO_PIN_INPUT);  //Rx
    496c:	83 e0       	ldi	r24, 0x03	; 3
    496e:	60 e0       	ldi	r22, 0x00	; 0
    4970:	40 e0       	ldi	r20, 0x00	; 0
    4972:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>
					DIO_voidSetPinDirection(DIO_PORTD, DIO_PIN1, DIO_PIN_OUTPUT); //Tx
    4976:	83 e0       	ldi	r24, 0x03	; 3
    4978:	61 e0       	ldi	r22, 0x01	; 1
    497a:	41 e0       	ldi	r20, 0x01	; 1
    497c:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>
					UART_voidInit();
    4980:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidInit>

					DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_PIN_HIGH);//buzzer
    4984:	83 e0       	ldi	r24, 0x03	; 3
    4986:	66 e0       	ldi	r22, 0x06	; 6
    4988:	41 e0       	ldi	r20, 0x01	; 1
    498a:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
					LCD_voidDisplayString((u8*)"system blocked");
    498e:	87 ef       	ldi	r24, 0xF7	; 247
    4990:	90 e0       	ldi	r25, 0x00	; 0
    4992:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <LCD_voidDisplayString>
    4996:	80 e0       	ldi	r24, 0x00	; 0
    4998:	90 e0       	ldi	r25, 0x00	; 0
    499a:	aa e7       	ldi	r26, 0x7A	; 122
    499c:	b4 e4       	ldi	r27, 0x44	; 68
    499e:	8b 87       	std	Y+11, r24	; 0x0b
    49a0:	9c 87       	std	Y+12, r25	; 0x0c
    49a2:	ad 87       	std	Y+13, r26	; 0x0d
    49a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    49a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    49aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    49ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    49ae:	20 e0       	ldi	r18, 0x00	; 0
    49b0:	30 e0       	ldi	r19, 0x00	; 0
    49b2:	4a e7       	ldi	r20, 0x7A	; 122
    49b4:	55 e4       	ldi	r21, 0x45	; 69
    49b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49ba:	dc 01       	movw	r26, r24
    49bc:	cb 01       	movw	r24, r22
    49be:	8f 83       	std	Y+7, r24	; 0x07
    49c0:	98 87       	std	Y+8, r25	; 0x08
    49c2:	a9 87       	std	Y+9, r26	; 0x09
    49c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    49c6:	6f 81       	ldd	r22, Y+7	; 0x07
    49c8:	78 85       	ldd	r23, Y+8	; 0x08
    49ca:	89 85       	ldd	r24, Y+9	; 0x09
    49cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    49ce:	20 e0       	ldi	r18, 0x00	; 0
    49d0:	30 e0       	ldi	r19, 0x00	; 0
    49d2:	40 e8       	ldi	r20, 0x80	; 128
    49d4:	5f e3       	ldi	r21, 0x3F	; 63
    49d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    49da:	88 23       	and	r24, r24
    49dc:	2c f4       	brge	.+10     	; 0x49e8 <SmartHome_voidCheckPassword+0x740>
		__ticks = 1;
    49de:	81 e0       	ldi	r24, 0x01	; 1
    49e0:	90 e0       	ldi	r25, 0x00	; 0
    49e2:	9e 83       	std	Y+6, r25	; 0x06
    49e4:	8d 83       	std	Y+5, r24	; 0x05
    49e6:	3f c0       	rjmp	.+126    	; 0x4a66 <SmartHome_voidCheckPassword+0x7be>
	else if (__tmp > 65535)
    49e8:	6f 81       	ldd	r22, Y+7	; 0x07
    49ea:	78 85       	ldd	r23, Y+8	; 0x08
    49ec:	89 85       	ldd	r24, Y+9	; 0x09
    49ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    49f0:	20 e0       	ldi	r18, 0x00	; 0
    49f2:	3f ef       	ldi	r19, 0xFF	; 255
    49f4:	4f e7       	ldi	r20, 0x7F	; 127
    49f6:	57 e4       	ldi	r21, 0x47	; 71
    49f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    49fc:	18 16       	cp	r1, r24
    49fe:	4c f5       	brge	.+82     	; 0x4a52 <SmartHome_voidCheckPassword+0x7aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a00:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a02:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a04:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a06:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a08:	20 e0       	ldi	r18, 0x00	; 0
    4a0a:	30 e0       	ldi	r19, 0x00	; 0
    4a0c:	40 e2       	ldi	r20, 0x20	; 32
    4a0e:	51 e4       	ldi	r21, 0x41	; 65
    4a10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a14:	dc 01       	movw	r26, r24
    4a16:	cb 01       	movw	r24, r22
    4a18:	bc 01       	movw	r22, r24
    4a1a:	cd 01       	movw	r24, r26
    4a1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a20:	dc 01       	movw	r26, r24
    4a22:	cb 01       	movw	r24, r22
    4a24:	9e 83       	std	Y+6, r25	; 0x06
    4a26:	8d 83       	std	Y+5, r24	; 0x05
    4a28:	0f c0       	rjmp	.+30     	; 0x4a48 <SmartHome_voidCheckPassword+0x7a0>
    4a2a:	80 e9       	ldi	r24, 0x90	; 144
    4a2c:	91 e0       	ldi	r25, 0x01	; 1
    4a2e:	9c 83       	std	Y+4, r25	; 0x04
    4a30:	8b 83       	std	Y+3, r24	; 0x03
    4a32:	8b 81       	ldd	r24, Y+3	; 0x03
    4a34:	9c 81       	ldd	r25, Y+4	; 0x04
    4a36:	01 97       	sbiw	r24, 0x01	; 1
    4a38:	f1 f7       	brne	.-4      	; 0x4a36 <SmartHome_voidCheckPassword+0x78e>
    4a3a:	9c 83       	std	Y+4, r25	; 0x04
    4a3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a3e:	8d 81       	ldd	r24, Y+5	; 0x05
    4a40:	9e 81       	ldd	r25, Y+6	; 0x06
    4a42:	01 97       	sbiw	r24, 0x01	; 1
    4a44:	9e 83       	std	Y+6, r25	; 0x06
    4a46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a48:	8d 81       	ldd	r24, Y+5	; 0x05
    4a4a:	9e 81       	ldd	r25, Y+6	; 0x06
    4a4c:	00 97       	sbiw	r24, 0x00	; 0
    4a4e:	69 f7       	brne	.-38     	; 0x4a2a <SmartHome_voidCheckPassword+0x782>
    4a50:	14 c0       	rjmp	.+40     	; 0x4a7a <SmartHome_voidCheckPassword+0x7d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a52:	6f 81       	ldd	r22, Y+7	; 0x07
    4a54:	78 85       	ldd	r23, Y+8	; 0x08
    4a56:	89 85       	ldd	r24, Y+9	; 0x09
    4a58:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a5e:	dc 01       	movw	r26, r24
    4a60:	cb 01       	movw	r24, r22
    4a62:	9e 83       	std	Y+6, r25	; 0x06
    4a64:	8d 83       	std	Y+5, r24	; 0x05
    4a66:	8d 81       	ldd	r24, Y+5	; 0x05
    4a68:	9e 81       	ldd	r25, Y+6	; 0x06
    4a6a:	9a 83       	std	Y+2, r25	; 0x02
    4a6c:	89 83       	std	Y+1, r24	; 0x01
    4a6e:	89 81       	ldd	r24, Y+1	; 0x01
    4a70:	9a 81       	ldd	r25, Y+2	; 0x02
    4a72:	01 97       	sbiw	r24, 0x01	; 1
    4a74:	f1 f7       	brne	.-4      	; 0x4a72 <SmartHome_voidCheckPassword+0x7ca>
    4a76:	9a 83       	std	Y+2, r25	; 0x02
    4a78:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(1000);
					LCD_voidClear();
    4a7a:	0e 94 89 18 	call	0x3112	; 0x3112 <LCD_voidClear>
					UART_voidTxString((u8*)"ALARM IS ON ! ");
    4a7e:	86 e0       	ldi	r24, 0x06	; 6
    4a80:	91 e0       	ldi	r25, 0x01	; 1
    4a82:	0e 94 71 20 	call	0x40e2	; 0x40e2 <UART_voidTxString>
					return FALSE;
    4a86:	a0 96       	adiw	r28, 0x20	; 32
    4a88:	1f ae       	std	Y+63, r1	; 0x3f
    4a8a:	a0 97       	sbiw	r28, 0x20	; 32
    4a8c:	33 c0       	rjmp	.+102    	; 0x4af4 <SmartHome_voidCheckPassword+0x84c>
			}

		}
		else
		{   //to convert the string to number
		local_u8pass=(local_u8pass*10) + (local_u8val -'0');
    4a8e:	fe 01       	movw	r30, r28
    4a90:	ea 5a       	subi	r30, 0xAA	; 170
    4a92:	ff 4f       	sbci	r31, 0xFF	; 255
    4a94:	80 81       	ld	r24, Z
    4a96:	91 81       	ldd	r25, Z+1	; 0x01
    4a98:	a2 81       	ldd	r26, Z+2	; 0x02
    4a9a:	b3 81       	ldd	r27, Z+3	; 0x03
    4a9c:	2a e0       	ldi	r18, 0x0A	; 10
    4a9e:	30 e0       	ldi	r19, 0x00	; 0
    4aa0:	40 e0       	ldi	r20, 0x00	; 0
    4aa2:	50 e0       	ldi	r21, 0x00	; 0
    4aa4:	bc 01       	movw	r22, r24
    4aa6:	cd 01       	movw	r24, r26
    4aa8:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <__mulsi3>
    4aac:	9b 01       	movw	r18, r22
    4aae:	ac 01       	movw	r20, r24
    4ab0:	fe 01       	movw	r30, r28
    4ab2:	e2 5a       	subi	r30, 0xA2	; 162
    4ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ab6:	80 81       	ld	r24, Z
    4ab8:	88 2f       	mov	r24, r24
    4aba:	90 e0       	ldi	r25, 0x00	; 0
    4abc:	c0 97       	sbiw	r24, 0x30	; 48
    4abe:	aa 27       	eor	r26, r26
    4ac0:	97 fd       	sbrc	r25, 7
    4ac2:	a0 95       	com	r26
    4ac4:	ba 2f       	mov	r27, r26
    4ac6:	fe 01       	movw	r30, r28
    4ac8:	ea 5a       	subi	r30, 0xAA	; 170
    4aca:	ff 4f       	sbci	r31, 0xFF	; 255
    4acc:	82 0f       	add	r24, r18
    4ace:	93 1f       	adc	r25, r19
    4ad0:	a4 1f       	adc	r26, r20
    4ad2:	b5 1f       	adc	r27, r21
    4ad4:	80 83       	st	Z, r24
    4ad6:	91 83       	std	Z+1, r25	; 0x01
    4ad8:	a2 83       	std	Z+2, r26	; 0x02
    4ada:	b3 83       	std	Z+3, r27	; 0x03
		LCD_voidDisplayChar('*');
    4adc:	8a e2       	ldi	r24, 0x2A	; 42
    4ade:	0e 94 1c 18 	call	0x3038	; 0x3038 <LCD_voidDisplayChar>
    4ae2:	57 cd       	rjmp	.-1362   	; 0x4592 <SmartHome_voidCheckPassword+0x2ea>
	LCD_voidClear();
	LCD_voidDisplayString((u8*)"Enter The Pass");
	_delay_ms(1000);
	LCD_voidClear();

	while(local_u8counter<3){
    4ae4:	fe 01       	movw	r30, r28
    4ae6:	eb 5a       	subi	r30, 0xAB	; 171
    4ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    4aea:	80 81       	ld	r24, Z
    4aec:	83 30       	cpi	r24, 0x03	; 3
    4aee:	08 f4       	brcc	.+2      	; 0x4af2 <SmartHome_voidCheckPassword+0x84a>
    4af0:	50 cd       	rjmp	.-1376   	; 0x4592 <SmartHome_voidCheckPassword+0x2ea>
    4af2:	06 c0       	rjmp	.+12     	; 0x4b00 <SmartHome_voidCheckPassword+0x858>
		}

      }
	}
}
}
    4af4:	a0 96       	adiw	r28, 0x20	; 32
    4af6:	8f ad       	ldd	r24, Y+63	; 0x3f
    4af8:	a0 97       	sbiw	r28, 0x20	; 32
    4afa:	a1 96       	adiw	r28, 0x21	; 33
    4afc:	8f af       	std	Y+63, r24	; 0x3f
    4afe:	a1 97       	sbiw	r28, 0x21	; 33
    4b00:	a1 96       	adiw	r28, 0x21	; 33
    4b02:	8f ad       	ldd	r24, Y+63	; 0x3f
    4b04:	a1 97       	sbiw	r28, 0x21	; 33
    4b06:	c0 5a       	subi	r28, 0xA0	; 160
    4b08:	df 4f       	sbci	r29, 0xFF	; 255
    4b0a:	0f b6       	in	r0, 0x3f	; 63
    4b0c:	f8 94       	cli
    4b0e:	de bf       	out	0x3e, r29	; 62
    4b10:	0f be       	out	0x3f, r0	; 63
    4b12:	cd bf       	out	0x3d, r28	; 61
    4b14:	cf 91       	pop	r28
    4b16:	df 91       	pop	r29
    4b18:	1f 91       	pop	r17
    4b1a:	0f 91       	pop	r16
    4b1c:	08 95       	ret

00004b1e <SmartHome_voidTempratureDCmotor>:

void SmartHome_voidTempratureDCmotor(){
    4b1e:	df 93       	push	r29
    4b20:	cf 93       	push	r28
    4b22:	cd b7       	in	r28, 0x3d	; 61
    4b24:	de b7       	in	r29, 0x3e	; 62
    4b26:	2f 97       	sbiw	r28, 0x0f	; 15
    4b28:	0f b6       	in	r0, 0x3f	; 63
    4b2a:	f8 94       	cli
    4b2c:	de bf       	out	0x3e, r29	; 62
    4b2e:	0f be       	out	0x3f, r0	; 63
    4b30:	cd bf       	out	0x3d, r28	; 61

	u8 temprature;
	//ADC lm35(temp)
	LM35_voidInit(LM35_ADC_CHANNEL_3);
    4b32:	83 e0       	ldi	r24, 0x03	; 3
    4b34:	0e 94 86 1a 	call	0x350c	; 0x350c <LM35_voidInit>
	DCM_voidInitWithCtrlSpeed(DCM_MOTORA);
    4b38:	80 e0       	ldi	r24, 0x00	; 0
    4b3a:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <DCM_voidInitWithCtrlSpeed>
	while(1){
		LCD_voidDisplayString((u8*)"Temp is:");
    4b3e:	85 e1       	ldi	r24, 0x15	; 21
    4b40:	91 e0       	ldi	r25, 0x01	; 1
    4b42:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <LCD_voidDisplayString>
		LCD_voidDisplayNumber(temprature);
    4b46:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b48:	88 2f       	mov	r24, r24
    4b4a:	90 e0       	ldi	r25, 0x00	; 0
    4b4c:	a0 e0       	ldi	r26, 0x00	; 0
    4b4e:	b0 e0       	ldi	r27, 0x00	; 0
    4b50:	bc 01       	movw	r22, r24
    4b52:	cd 01       	movw	r24, r26
    4b54:	0e 94 70 19 	call	0x32e0	; 0x32e0 <LCD_voidDisplayNumber>
		LCD_voidDisplayChar('C');
    4b58:	83 e4       	ldi	r24, 0x43	; 67
    4b5a:	0e 94 1c 18 	call	0x3038	; 0x3038 <LCD_voidDisplayChar>

		LM35_voidGetTemprature(LM35_ADC_CHANNEL_3,&temprature);
    4b5e:	9e 01       	movw	r18, r28
    4b60:	21 5f       	subi	r18, 0xF1	; 241
    4b62:	3f 4f       	sbci	r19, 0xFF	; 255
    4b64:	83 e0       	ldi	r24, 0x03	; 3
    4b66:	b9 01       	movw	r22, r18
    4b68:	0e 94 98 1a 	call	0x3530	; 0x3530 <LM35_voidGetTemprature>

		if(temprature>=0 && temprature< 15){
    4b6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b6e:	8f 30       	cpi	r24, 0x0F	; 15
    4b70:	58 f4       	brcc	.+22     	; 0x4b88 <SmartHome_voidTempratureDCmotor+0x6a>
			DCM_voidOffwithCtrlSpeed();
    4b72:	0e 94 85 09 	call	0x130a	; 0x130a <DCM_voidOffwithCtrlSpeed>
			LCD_voidGoToSpecificPosition(1,0);
    4b76:	81 e0       	ldi	r24, 0x01	; 1
    4b78:	60 e0       	ldi	r22, 0x00	; 0
    4b7a:	0e 94 4c 19 	call	0x3298	; 0x3298 <LCD_voidGoToSpecificPosition>
			LCD_voidDisplayString((u8*)"AC SYSTEM OFF");
    4b7e:	8e e1       	ldi	r24, 0x1E	; 30
    4b80:	91 e0       	ldi	r25, 0x01	; 1
    4b82:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <LCD_voidDisplayString>
    4b86:	3b c0       	rjmp	.+118    	; 0x4bfe <SmartHome_voidTempratureDCmotor+0xe0>
			//UART_voidTxString((u8*)"AC SYSTEM OFF ");
		}
		else if(temprature>=15 && temprature< 25){
    4b88:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b8a:	8f 30       	cpi	r24, 0x0F	; 15
    4b8c:	88 f0       	brcs	.+34     	; 0x4bb0 <SmartHome_voidTempratureDCmotor+0x92>
    4b8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b90:	89 31       	cpi	r24, 0x19	; 25
    4b92:	70 f4       	brcc	.+28     	; 0x4bb0 <SmartHome_voidTempratureDCmotor+0x92>
			DCM_voidOnwithCtrlSpeed(DCM_MOTORA,DCM_ROTATE_CLOCKWISE,30);
    4b94:	80 e0       	ldi	r24, 0x00	; 0
    4b96:	60 e0       	ldi	r22, 0x00	; 0
    4b98:	4e e1       	ldi	r20, 0x1E	; 30
    4b9a:	0e 94 14 09 	call	0x1228	; 0x1228 <DCM_voidOnwithCtrlSpeed>
			LCD_voidGoToSpecificPosition(1,0);
    4b9e:	81 e0       	ldi	r24, 0x01	; 1
    4ba0:	60 e0       	ldi	r22, 0x00	; 0
    4ba2:	0e 94 4c 19 	call	0x3298	; 0x3298 <LCD_voidGoToSpecificPosition>
			LCD_voidDisplayString((u8*)"AC SYST ON 30%");
    4ba6:	8c e2       	ldi	r24, 0x2C	; 44
    4ba8:	91 e0       	ldi	r25, 0x01	; 1
    4baa:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <LCD_voidDisplayString>
    4bae:	27 c0       	rjmp	.+78     	; 0x4bfe <SmartHome_voidTempratureDCmotor+0xe0>
			//UART_voidTxString((u8*)"AC SYST ON 30% ");

		}
		else if(temprature>=25 && temprature< 35){
    4bb0:	8f 85       	ldd	r24, Y+15	; 0x0f
    4bb2:	89 31       	cpi	r24, 0x19	; 25
    4bb4:	88 f0       	brcs	.+34     	; 0x4bd8 <SmartHome_voidTempratureDCmotor+0xba>
    4bb6:	8f 85       	ldd	r24, Y+15	; 0x0f
    4bb8:	83 32       	cpi	r24, 0x23	; 35
    4bba:	70 f4       	brcc	.+28     	; 0x4bd8 <SmartHome_voidTempratureDCmotor+0xba>
			DCM_voidOnwithCtrlSpeed(DCM_MOTORA,DCM_ROTATE_CLOCKWISE,75);
    4bbc:	80 e0       	ldi	r24, 0x00	; 0
    4bbe:	60 e0       	ldi	r22, 0x00	; 0
    4bc0:	4b e4       	ldi	r20, 0x4B	; 75
    4bc2:	0e 94 14 09 	call	0x1228	; 0x1228 <DCM_voidOnwithCtrlSpeed>
			LCD_voidGoToSpecificPosition(1,0);
    4bc6:	81 e0       	ldi	r24, 0x01	; 1
    4bc8:	60 e0       	ldi	r22, 0x00	; 0
    4bca:	0e 94 4c 19 	call	0x3298	; 0x3298 <LCD_voidGoToSpecificPosition>
			LCD_voidDisplayString((u8*)"AC SYST ON 75%");
    4bce:	8b e3       	ldi	r24, 0x3B	; 59
    4bd0:	91 e0       	ldi	r25, 0x01	; 1
    4bd2:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <LCD_voidDisplayString>
    4bd6:	13 c0       	rjmp	.+38     	; 0x4bfe <SmartHome_voidTempratureDCmotor+0xe0>
			//UART_voidTxString((u8*)"AC SYST ON 75% ");

		}
		else if(temprature>=35 && temprature<= 50){
    4bd8:	8f 85       	ldd	r24, Y+15	; 0x0f
    4bda:	83 32       	cpi	r24, 0x23	; 35
    4bdc:	80 f0       	brcs	.+32     	; 0x4bfe <SmartHome_voidTempratureDCmotor+0xe0>
    4bde:	8f 85       	ldd	r24, Y+15	; 0x0f
    4be0:	83 33       	cpi	r24, 0x33	; 51
    4be2:	68 f4       	brcc	.+26     	; 0x4bfe <SmartHome_voidTempratureDCmotor+0xe0>
			DCM_voidOnwithCtrlSpeed(DCM_MOTORA,DCM_ROTATE_CLOCKWISE,100);
    4be4:	80 e0       	ldi	r24, 0x00	; 0
    4be6:	60 e0       	ldi	r22, 0x00	; 0
    4be8:	44 e6       	ldi	r20, 0x64	; 100
    4bea:	0e 94 14 09 	call	0x1228	; 0x1228 <DCM_voidOnwithCtrlSpeed>
			LCD_voidGoToSpecificPosition(1,0);
    4bee:	81 e0       	ldi	r24, 0x01	; 1
    4bf0:	60 e0       	ldi	r22, 0x00	; 0
    4bf2:	0e 94 4c 19 	call	0x3298	; 0x3298 <LCD_voidGoToSpecificPosition>
			LCD_voidDisplayString((u8*)"AC SYST ON 100%");
    4bf6:	8a e4       	ldi	r24, 0x4A	; 74
    4bf8:	91 e0       	ldi	r25, 0x01	; 1
    4bfa:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <LCD_voidDisplayString>
    4bfe:	80 e0       	ldi	r24, 0x00	; 0
    4c00:	90 e0       	ldi	r25, 0x00	; 0
    4c02:	aa ef       	ldi	r26, 0xFA	; 250
    4c04:	b3 e4       	ldi	r27, 0x43	; 67
    4c06:	8b 87       	std	Y+11, r24	; 0x0b
    4c08:	9c 87       	std	Y+12, r25	; 0x0c
    4c0a:	ad 87       	std	Y+13, r26	; 0x0d
    4c0c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c10:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c12:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c14:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c16:	20 e0       	ldi	r18, 0x00	; 0
    4c18:	30 e0       	ldi	r19, 0x00	; 0
    4c1a:	4a e7       	ldi	r20, 0x7A	; 122
    4c1c:	55 e4       	ldi	r21, 0x45	; 69
    4c1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c22:	dc 01       	movw	r26, r24
    4c24:	cb 01       	movw	r24, r22
    4c26:	8f 83       	std	Y+7, r24	; 0x07
    4c28:	98 87       	std	Y+8, r25	; 0x08
    4c2a:	a9 87       	std	Y+9, r26	; 0x09
    4c2c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4c2e:	6f 81       	ldd	r22, Y+7	; 0x07
    4c30:	78 85       	ldd	r23, Y+8	; 0x08
    4c32:	89 85       	ldd	r24, Y+9	; 0x09
    4c34:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c36:	20 e0       	ldi	r18, 0x00	; 0
    4c38:	30 e0       	ldi	r19, 0x00	; 0
    4c3a:	40 e8       	ldi	r20, 0x80	; 128
    4c3c:	5f e3       	ldi	r21, 0x3F	; 63
    4c3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c42:	88 23       	and	r24, r24
    4c44:	2c f4       	brge	.+10     	; 0x4c50 <SmartHome_voidTempratureDCmotor+0x132>
		__ticks = 1;
    4c46:	81 e0       	ldi	r24, 0x01	; 1
    4c48:	90 e0       	ldi	r25, 0x00	; 0
    4c4a:	9e 83       	std	Y+6, r25	; 0x06
    4c4c:	8d 83       	std	Y+5, r24	; 0x05
    4c4e:	3f c0       	rjmp	.+126    	; 0x4cce <SmartHome_voidTempratureDCmotor+0x1b0>
	else if (__tmp > 65535)
    4c50:	6f 81       	ldd	r22, Y+7	; 0x07
    4c52:	78 85       	ldd	r23, Y+8	; 0x08
    4c54:	89 85       	ldd	r24, Y+9	; 0x09
    4c56:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c58:	20 e0       	ldi	r18, 0x00	; 0
    4c5a:	3f ef       	ldi	r19, 0xFF	; 255
    4c5c:	4f e7       	ldi	r20, 0x7F	; 127
    4c5e:	57 e4       	ldi	r21, 0x47	; 71
    4c60:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c64:	18 16       	cp	r1, r24
    4c66:	4c f5       	brge	.+82     	; 0x4cba <SmartHome_voidTempratureDCmotor+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c68:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c70:	20 e0       	ldi	r18, 0x00	; 0
    4c72:	30 e0       	ldi	r19, 0x00	; 0
    4c74:	40 e2       	ldi	r20, 0x20	; 32
    4c76:	51 e4       	ldi	r21, 0x41	; 65
    4c78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c7c:	dc 01       	movw	r26, r24
    4c7e:	cb 01       	movw	r24, r22
    4c80:	bc 01       	movw	r22, r24
    4c82:	cd 01       	movw	r24, r26
    4c84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c88:	dc 01       	movw	r26, r24
    4c8a:	cb 01       	movw	r24, r22
    4c8c:	9e 83       	std	Y+6, r25	; 0x06
    4c8e:	8d 83       	std	Y+5, r24	; 0x05
    4c90:	0f c0       	rjmp	.+30     	; 0x4cb0 <SmartHome_voidTempratureDCmotor+0x192>
    4c92:	80 e9       	ldi	r24, 0x90	; 144
    4c94:	91 e0       	ldi	r25, 0x01	; 1
    4c96:	9c 83       	std	Y+4, r25	; 0x04
    4c98:	8b 83       	std	Y+3, r24	; 0x03
    4c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    4c9c:	9c 81       	ldd	r25, Y+4	; 0x04
    4c9e:	01 97       	sbiw	r24, 0x01	; 1
    4ca0:	f1 f7       	brne	.-4      	; 0x4c9e <SmartHome_voidTempratureDCmotor+0x180>
    4ca2:	9c 83       	std	Y+4, r25	; 0x04
    4ca4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ca6:	8d 81       	ldd	r24, Y+5	; 0x05
    4ca8:	9e 81       	ldd	r25, Y+6	; 0x06
    4caa:	01 97       	sbiw	r24, 0x01	; 1
    4cac:	9e 83       	std	Y+6, r25	; 0x06
    4cae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cb0:	8d 81       	ldd	r24, Y+5	; 0x05
    4cb2:	9e 81       	ldd	r25, Y+6	; 0x06
    4cb4:	00 97       	sbiw	r24, 0x00	; 0
    4cb6:	69 f7       	brne	.-38     	; 0x4c92 <SmartHome_voidTempratureDCmotor+0x174>
    4cb8:	14 c0       	rjmp	.+40     	; 0x4ce2 <SmartHome_voidTempratureDCmotor+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cba:	6f 81       	ldd	r22, Y+7	; 0x07
    4cbc:	78 85       	ldd	r23, Y+8	; 0x08
    4cbe:	89 85       	ldd	r24, Y+9	; 0x09
    4cc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cc6:	dc 01       	movw	r26, r24
    4cc8:	cb 01       	movw	r24, r22
    4cca:	9e 83       	std	Y+6, r25	; 0x06
    4ccc:	8d 83       	std	Y+5, r24	; 0x05
    4cce:	8d 81       	ldd	r24, Y+5	; 0x05
    4cd0:	9e 81       	ldd	r25, Y+6	; 0x06
    4cd2:	9a 83       	std	Y+2, r25	; 0x02
    4cd4:	89 83       	std	Y+1, r24	; 0x01
    4cd6:	89 81       	ldd	r24, Y+1	; 0x01
    4cd8:	9a 81       	ldd	r25, Y+2	; 0x02
    4cda:	01 97       	sbiw	r24, 0x01	; 1
    4cdc:	f1 f7       	brne	.-4      	; 0x4cda <SmartHome_voidTempratureDCmotor+0x1bc>
    4cde:	9a 83       	std	Y+2, r25	; 0x02
    4ce0:	89 83       	std	Y+1, r24	; 0x01
			//UART_voidTxString((u8*)"AC SYST ON 100% ");
		}
		_delay_ms(500);
		LCD_voidClear();
    4ce2:	0e 94 89 18 	call	0x3112	; 0x3112 <LCD_voidClear>
    4ce6:	2b cf       	rjmp	.-426    	; 0x4b3e <SmartHome_voidTempratureDCmotor+0x20>

00004ce8 <SmartHome_voidOpenDoorservoCmotor>:

	}

}

void SmartHome_voidOpenDoorservoCmotor(){
    4ce8:	df 93       	push	r29
    4cea:	cf 93       	push	r28
    4cec:	cd b7       	in	r28, 0x3d	; 61
    4cee:	de b7       	in	r29, 0x3e	; 62
    4cf0:	2e 97       	sbiw	r28, 0x0e	; 14
    4cf2:	0f b6       	in	r0, 0x3f	; 63
    4cf4:	f8 94       	cli
    4cf6:	de bf       	out	0x3e, r29	; 62
    4cf8:	0f be       	out	0x3f, r0	; 63
    4cfa:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinDirection(DIO_PORTD, DIO_PIN0, DIO_PIN_INPUT);  //Rx
    4cfc:	83 e0       	ldi	r24, 0x03	; 3
    4cfe:	60 e0       	ldi	r22, 0x00	; 0
    4d00:	40 e0       	ldi	r20, 0x00	; 0
    4d02:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD, DIO_PIN1, DIO_PIN_OUTPUT); //Tx
    4d06:	83 e0       	ldi	r24, 0x03	; 3
    4d08:	61 e0       	ldi	r22, 0x01	; 1
    4d0a:	41 e0       	ldi	r20, 0x01	; 1
    4d0c:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>
	UART_voidInit();
    4d10:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidInit>

	SERVO_voidInit();
    4d14:	0e 94 df 1a 	call	0x35be	; 0x35be <SERVO_voidInit>
	SERVO_voidOn(90);  //duty cycle 10%
    4d18:	60 e0       	ldi	r22, 0x00	; 0
    4d1a:	70 e0       	ldi	r23, 0x00	; 0
    4d1c:	84 eb       	ldi	r24, 0xB4	; 180
    4d1e:	92 e4       	ldi	r25, 0x42	; 66
    4d20:	0e 94 ed 1a 	call	0x35da	; 0x35da <SERVO_voidOn>
	LCD_voidDisplayString((u8*)"Door Is Opened ");
    4d24:	8a e5       	ldi	r24, 0x5A	; 90
    4d26:	91 e0       	ldi	r25, 0x01	; 1
    4d28:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <LCD_voidDisplayString>
	UART_voidTxString((u8*)"Door Is Opened ");
    4d2c:	8a e5       	ldi	r24, 0x5A	; 90
    4d2e:	91 e0       	ldi	r25, 0x01	; 1
    4d30:	0e 94 71 20 	call	0x40e2	; 0x40e2 <UART_voidTxString>
    4d34:	80 e0       	ldi	r24, 0x00	; 0
    4d36:	90 e0       	ldi	r25, 0x00	; 0
    4d38:	a8 e4       	ldi	r26, 0x48	; 72
    4d3a:	b4 e4       	ldi	r27, 0x44	; 68
    4d3c:	8b 87       	std	Y+11, r24	; 0x0b
    4d3e:	9c 87       	std	Y+12, r25	; 0x0c
    4d40:	ad 87       	std	Y+13, r26	; 0x0d
    4d42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d44:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d46:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d48:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d4c:	20 e0       	ldi	r18, 0x00	; 0
    4d4e:	30 e0       	ldi	r19, 0x00	; 0
    4d50:	4a e7       	ldi	r20, 0x7A	; 122
    4d52:	55 e4       	ldi	r21, 0x45	; 69
    4d54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d58:	dc 01       	movw	r26, r24
    4d5a:	cb 01       	movw	r24, r22
    4d5c:	8f 83       	std	Y+7, r24	; 0x07
    4d5e:	98 87       	std	Y+8, r25	; 0x08
    4d60:	a9 87       	std	Y+9, r26	; 0x09
    4d62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4d64:	6f 81       	ldd	r22, Y+7	; 0x07
    4d66:	78 85       	ldd	r23, Y+8	; 0x08
    4d68:	89 85       	ldd	r24, Y+9	; 0x09
    4d6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d6c:	20 e0       	ldi	r18, 0x00	; 0
    4d6e:	30 e0       	ldi	r19, 0x00	; 0
    4d70:	40 e8       	ldi	r20, 0x80	; 128
    4d72:	5f e3       	ldi	r21, 0x3F	; 63
    4d74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d78:	88 23       	and	r24, r24
    4d7a:	2c f4       	brge	.+10     	; 0x4d86 <SmartHome_voidOpenDoorservoCmotor+0x9e>
		__ticks = 1;
    4d7c:	81 e0       	ldi	r24, 0x01	; 1
    4d7e:	90 e0       	ldi	r25, 0x00	; 0
    4d80:	9e 83       	std	Y+6, r25	; 0x06
    4d82:	8d 83       	std	Y+5, r24	; 0x05
    4d84:	3f c0       	rjmp	.+126    	; 0x4e04 <SmartHome_voidOpenDoorservoCmotor+0x11c>
	else if (__tmp > 65535)
    4d86:	6f 81       	ldd	r22, Y+7	; 0x07
    4d88:	78 85       	ldd	r23, Y+8	; 0x08
    4d8a:	89 85       	ldd	r24, Y+9	; 0x09
    4d8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d8e:	20 e0       	ldi	r18, 0x00	; 0
    4d90:	3f ef       	ldi	r19, 0xFF	; 255
    4d92:	4f e7       	ldi	r20, 0x7F	; 127
    4d94:	57 e4       	ldi	r21, 0x47	; 71
    4d96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d9a:	18 16       	cp	r1, r24
    4d9c:	4c f5       	brge	.+82     	; 0x4df0 <SmartHome_voidOpenDoorservoCmotor+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4da0:	7c 85       	ldd	r23, Y+12	; 0x0c
    4da2:	8d 85       	ldd	r24, Y+13	; 0x0d
    4da4:	9e 85       	ldd	r25, Y+14	; 0x0e
    4da6:	20 e0       	ldi	r18, 0x00	; 0
    4da8:	30 e0       	ldi	r19, 0x00	; 0
    4daa:	40 e2       	ldi	r20, 0x20	; 32
    4dac:	51 e4       	ldi	r21, 0x41	; 65
    4dae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4db2:	dc 01       	movw	r26, r24
    4db4:	cb 01       	movw	r24, r22
    4db6:	bc 01       	movw	r22, r24
    4db8:	cd 01       	movw	r24, r26
    4dba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dbe:	dc 01       	movw	r26, r24
    4dc0:	cb 01       	movw	r24, r22
    4dc2:	9e 83       	std	Y+6, r25	; 0x06
    4dc4:	8d 83       	std	Y+5, r24	; 0x05
    4dc6:	0f c0       	rjmp	.+30     	; 0x4de6 <SmartHome_voidOpenDoorservoCmotor+0xfe>
    4dc8:	80 e9       	ldi	r24, 0x90	; 144
    4dca:	91 e0       	ldi	r25, 0x01	; 1
    4dcc:	9c 83       	std	Y+4, r25	; 0x04
    4dce:	8b 83       	std	Y+3, r24	; 0x03
    4dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    4dd2:	9c 81       	ldd	r25, Y+4	; 0x04
    4dd4:	01 97       	sbiw	r24, 0x01	; 1
    4dd6:	f1 f7       	brne	.-4      	; 0x4dd4 <SmartHome_voidOpenDoorservoCmotor+0xec>
    4dd8:	9c 83       	std	Y+4, r25	; 0x04
    4dda:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ddc:	8d 81       	ldd	r24, Y+5	; 0x05
    4dde:	9e 81       	ldd	r25, Y+6	; 0x06
    4de0:	01 97       	sbiw	r24, 0x01	; 1
    4de2:	9e 83       	std	Y+6, r25	; 0x06
    4de4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4de6:	8d 81       	ldd	r24, Y+5	; 0x05
    4de8:	9e 81       	ldd	r25, Y+6	; 0x06
    4dea:	00 97       	sbiw	r24, 0x00	; 0
    4dec:	69 f7       	brne	.-38     	; 0x4dc8 <SmartHome_voidOpenDoorservoCmotor+0xe0>
    4dee:	14 c0       	rjmp	.+40     	; 0x4e18 <SmartHome_voidOpenDoorservoCmotor+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4df0:	6f 81       	ldd	r22, Y+7	; 0x07
    4df2:	78 85       	ldd	r23, Y+8	; 0x08
    4df4:	89 85       	ldd	r24, Y+9	; 0x09
    4df6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4df8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dfc:	dc 01       	movw	r26, r24
    4dfe:	cb 01       	movw	r24, r22
    4e00:	9e 83       	std	Y+6, r25	; 0x06
    4e02:	8d 83       	std	Y+5, r24	; 0x05
    4e04:	8d 81       	ldd	r24, Y+5	; 0x05
    4e06:	9e 81       	ldd	r25, Y+6	; 0x06
    4e08:	9a 83       	std	Y+2, r25	; 0x02
    4e0a:	89 83       	std	Y+1, r24	; 0x01
    4e0c:	89 81       	ldd	r24, Y+1	; 0x01
    4e0e:	9a 81       	ldd	r25, Y+2	; 0x02
    4e10:	01 97       	sbiw	r24, 0x01	; 1
    4e12:	f1 f7       	brne	.-4      	; 0x4e10 <SmartHome_voidOpenDoorservoCmotor+0x128>
    4e14:	9a 83       	std	Y+2, r25	; 0x02
    4e16:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(800);
	LCD_voidClear();
    4e18:	0e 94 89 18 	call	0x3112	; 0x3112 <LCD_voidClear>

}
    4e1c:	2e 96       	adiw	r28, 0x0e	; 14
    4e1e:	0f b6       	in	r0, 0x3f	; 63
    4e20:	f8 94       	cli
    4e22:	de bf       	out	0x3e, r29	; 62
    4e24:	0f be       	out	0x3f, r0	; 63
    4e26:	cd bf       	out	0x3d, r28	; 61
    4e28:	cf 91       	pop	r28
    4e2a:	df 91       	pop	r29
    4e2c:	08 95       	ret

00004e2e <SmartHome_u32WR_Rpassword>:

u32  SmartHome_u32WR_Rpassword(){
    4e2e:	df 93       	push	r29
    4e30:	cf 93       	push	r28
    4e32:	cd b7       	in	r28, 0x3d	; 61
    4e34:	de b7       	in	r29, 0x3e	; 62
    4e36:	6a 97       	sbiw	r28, 0x1a	; 26
    4e38:	0f b6       	in	r0, 0x3f	; 63
    4e3a:	f8 94       	cli
    4e3c:	de bf       	out	0x3e, r29	; 62
    4e3e:	0f be       	out	0x3f, r0	; 63
    4e40:	cd bf       	out	0x3d, r28	; 61
	u8 i=0;
    4e42:	1d 82       	std	Y+5, r1	; 0x05
	u32 local_pass=0;
    4e44:	19 82       	std	Y+1, r1	; 0x01
    4e46:	1a 82       	std	Y+2, r1	; 0x02
    4e48:	1b 82       	std	Y+3, r1	; 0x03
    4e4a:	1c 82       	std	Y+4, r1	; 0x04
	u8 local_u8data1[]=SMART_HOME_PASS;
    4e4c:	ce 01       	movw	r24, r28
    4e4e:	06 96       	adiw	r24, 0x06	; 6
    4e50:	9f 8b       	std	Y+23, r25	; 0x17
    4e52:	8e 8b       	std	Y+22, r24	; 0x16
    4e54:	ea e6       	ldi	r30, 0x6A	; 106
    4e56:	f1 e0       	ldi	r31, 0x01	; 1
    4e58:	f9 8f       	std	Y+25, r31	; 0x19
    4e5a:	e8 8f       	std	Y+24, r30	; 0x18
    4e5c:	f6 e0       	ldi	r31, 0x06	; 6
    4e5e:	fa 8f       	std	Y+26, r31	; 0x1a
    4e60:	e8 8d       	ldd	r30, Y+24	; 0x18
    4e62:	f9 8d       	ldd	r31, Y+25	; 0x19
    4e64:	00 80       	ld	r0, Z
    4e66:	88 8d       	ldd	r24, Y+24	; 0x18
    4e68:	99 8d       	ldd	r25, Y+25	; 0x19
    4e6a:	01 96       	adiw	r24, 0x01	; 1
    4e6c:	99 8f       	std	Y+25, r25	; 0x19
    4e6e:	88 8f       	std	Y+24, r24	; 0x18
    4e70:	ee 89       	ldd	r30, Y+22	; 0x16
    4e72:	ff 89       	ldd	r31, Y+23	; 0x17
    4e74:	00 82       	st	Z, r0
    4e76:	8e 89       	ldd	r24, Y+22	; 0x16
    4e78:	9f 89       	ldd	r25, Y+23	; 0x17
    4e7a:	01 96       	adiw	r24, 0x01	; 1
    4e7c:	9f 8b       	std	Y+23, r25	; 0x17
    4e7e:	8e 8b       	std	Y+22, r24	; 0x16
    4e80:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4e82:	91 50       	subi	r25, 0x01	; 1
    4e84:	9a 8f       	std	Y+26, r25	; 0x1a
    4e86:	ea 8d       	ldd	r30, Y+26	; 0x1a
    4e88:	ee 23       	and	r30, r30
    4e8a:	51 f7       	brne	.-44     	; 0x4e60 <SmartHome_u32WR_Rpassword+0x32>
	u8 local_u8data2[10];
	EEPROM_voidInit();
    4e8c:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <EEPROM_voidInit>
	EEPROM_voidWritePage(8,7,local_u8data1);
    4e90:	9e 01       	movw	r18, r28
    4e92:	2a 5f       	subi	r18, 0xFA	; 250
    4e94:	3f 4f       	sbci	r19, 0xFF	; 255
    4e96:	88 e0       	ldi	r24, 0x08	; 8
    4e98:	90 e0       	ldi	r25, 0x00	; 0
    4e9a:	67 e0       	ldi	r22, 0x07	; 7
    4e9c:	a9 01       	movw	r20, r18
    4e9e:	0e 94 1a 10 	call	0x2034	; 0x2034 <EEPROM_voidWritePage>
	EEPROM_voidReadPage(8,7,local_u8data2);
    4ea2:	9e 01       	movw	r18, r28
    4ea4:	24 5f       	subi	r18, 0xF4	; 244
    4ea6:	3f 4f       	sbci	r19, 0xFF	; 255
    4ea8:	88 e0       	ldi	r24, 0x08	; 8
    4eaa:	90 e0       	ldi	r25, 0x00	; 0
    4eac:	67 e0       	ldi	r22, 0x07	; 7
    4eae:	a9 01       	movw	r20, r18
    4eb0:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <EEPROM_voidReadPage>
    4eb4:	29 c0       	rjmp	.+82     	; 0x4f08 <SmartHome_u32WR_Rpassword+0xda>

	while(local_u8data2[i] != '\0'){  //to convert the string to number
		local_pass=(local_pass*10) + (local_u8data2[i] -'0');
    4eb6:	89 81       	ldd	r24, Y+1	; 0x01
    4eb8:	9a 81       	ldd	r25, Y+2	; 0x02
    4eba:	ab 81       	ldd	r26, Y+3	; 0x03
    4ebc:	bc 81       	ldd	r27, Y+4	; 0x04
    4ebe:	2a e0       	ldi	r18, 0x0A	; 10
    4ec0:	30 e0       	ldi	r19, 0x00	; 0
    4ec2:	40 e0       	ldi	r20, 0x00	; 0
    4ec4:	50 e0       	ldi	r21, 0x00	; 0
    4ec6:	bc 01       	movw	r22, r24
    4ec8:	cd 01       	movw	r24, r26
    4eca:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <__mulsi3>
    4ece:	ab 01       	movw	r20, r22
    4ed0:	bc 01       	movw	r22, r24
    4ed2:	8d 81       	ldd	r24, Y+5	; 0x05
    4ed4:	28 2f       	mov	r18, r24
    4ed6:	30 e0       	ldi	r19, 0x00	; 0
    4ed8:	ce 01       	movw	r24, r28
    4eda:	0c 96       	adiw	r24, 0x0c	; 12
    4edc:	fc 01       	movw	r30, r24
    4ede:	e2 0f       	add	r30, r18
    4ee0:	f3 1f       	adc	r31, r19
    4ee2:	80 81       	ld	r24, Z
    4ee4:	88 2f       	mov	r24, r24
    4ee6:	90 e0       	ldi	r25, 0x00	; 0
    4ee8:	c0 97       	sbiw	r24, 0x30	; 48
    4eea:	aa 27       	eor	r26, r26
    4eec:	97 fd       	sbrc	r25, 7
    4eee:	a0 95       	com	r26
    4ef0:	ba 2f       	mov	r27, r26
    4ef2:	84 0f       	add	r24, r20
    4ef4:	95 1f       	adc	r25, r21
    4ef6:	a6 1f       	adc	r26, r22
    4ef8:	b7 1f       	adc	r27, r23
    4efa:	89 83       	std	Y+1, r24	; 0x01
    4efc:	9a 83       	std	Y+2, r25	; 0x02
    4efe:	ab 83       	std	Y+3, r26	; 0x03
    4f00:	bc 83       	std	Y+4, r27	; 0x04
		i++;
    4f02:	8d 81       	ldd	r24, Y+5	; 0x05
    4f04:	8f 5f       	subi	r24, 0xFF	; 255
    4f06:	8d 83       	std	Y+5, r24	; 0x05
	u8 local_u8data2[10];
	EEPROM_voidInit();
	EEPROM_voidWritePage(8,7,local_u8data1);
	EEPROM_voidReadPage(8,7,local_u8data2);

	while(local_u8data2[i] != '\0'){  //to convert the string to number
    4f08:	8d 81       	ldd	r24, Y+5	; 0x05
    4f0a:	28 2f       	mov	r18, r24
    4f0c:	30 e0       	ldi	r19, 0x00	; 0
    4f0e:	ce 01       	movw	r24, r28
    4f10:	0c 96       	adiw	r24, 0x0c	; 12
    4f12:	fc 01       	movw	r30, r24
    4f14:	e2 0f       	add	r30, r18
    4f16:	f3 1f       	adc	r31, r19
    4f18:	80 81       	ld	r24, Z
    4f1a:	88 23       	and	r24, r24
    4f1c:	61 f6       	brne	.-104    	; 0x4eb6 <SmartHome_u32WR_Rpassword+0x88>
		local_pass=(local_pass*10) + (local_u8data2[i] -'0');
		i++;
	}
	return 	local_pass;
    4f1e:	89 81       	ldd	r24, Y+1	; 0x01
    4f20:	9a 81       	ldd	r25, Y+2	; 0x02
    4f22:	ab 81       	ldd	r26, Y+3	; 0x03
    4f24:	bc 81       	ldd	r27, Y+4	; 0x04
}
    4f26:	bc 01       	movw	r22, r24
    4f28:	cd 01       	movw	r24, r26
    4f2a:	6a 96       	adiw	r28, 0x1a	; 26
    4f2c:	0f b6       	in	r0, 0x3f	; 63
    4f2e:	f8 94       	cli
    4f30:	de bf       	out	0x3e, r29	; 62
    4f32:	0f be       	out	0x3f, r0	; 63
    4f34:	cd bf       	out	0x3d, r28	; 61
    4f36:	cf 91       	pop	r28
    4f38:	df 91       	pop	r29
    4f3a:	08 95       	ret

00004f3c <SmartHome_voidLedEnable>:

void SmartHome_voidLedEnable()
{
    4f3c:	df 93       	push	r29
    4f3e:	cf 93       	push	r28
    4f40:	cd b7       	in	r28, 0x3d	; 61
    4f42:	de b7       	in	r29, 0x3e	; 62
DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN0,DIO_PIN_OUTPUT);  //5 lamps
    4f44:	81 e0       	ldi	r24, 0x01	; 1
    4f46:	60 e0       	ldi	r22, 0x00	; 0
    4f48:	41 e0       	ldi	r20, 0x01	; 1
    4f4a:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>
DIO_voidSetPinValue(DIO_PORTB,DIO_PIN0,DIO_PIN_HIGH);        //5 lamps
    4f4e:	81 e0       	ldi	r24, 0x01	; 1
    4f50:	60 e0       	ldi	r22, 0x00	; 0
    4f52:	41 e0       	ldi	r20, 0x01	; 1
    4f54:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>

DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN2,DIO_PIN_OUTPUT);  //dimmer lamp
    4f58:	83 e0       	ldi	r24, 0x03	; 3
    4f5a:	62 e0       	ldi	r22, 0x02	; 2
    4f5c:	41 e0       	ldi	r20, 0x01	; 1
    4f5e:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_voidSetPinDirection>
DIO_voidSetPinValue(DIO_PORTD,DIO_PIN2,DIO_PIN_HIGH);      //dimmer lamp
    4f62:	83 e0       	ldi	r24, 0x03	; 3
    4f64:	62 e0       	ldi	r22, 0x02	; 2
    4f66:	41 e0       	ldi	r20, 0x01	; 1
    4f68:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
}
    4f6c:	cf 91       	pop	r28
    4f6e:	df 91       	pop	r29
    4f70:	08 95       	ret

00004f72 <SmartHome_voidLedDisable>:

void SmartHome_voidLedDisable(){
    4f72:	df 93       	push	r29
    4f74:	cf 93       	push	r28
    4f76:	cd b7       	in	r28, 0x3d	; 61
    4f78:	de b7       	in	r29, 0x3e	; 62

	DIO_voidSetPinValue(DIO_PORTB,DIO_PIN0,DIO_PIN_LOW); //5 lamps
    4f7a:	81 e0       	ldi	r24, 0x01	; 1
    4f7c:	60 e0       	ldi	r22, 0x00	; 0
    4f7e:	40 e0       	ldi	r20, 0x00	; 0
    4f80:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTD,DIO_PIN2,DIO_PIN_LOW); //dimmer lamp
    4f84:	83 e0       	ldi	r24, 0x03	; 3
    4f86:	62 e0       	ldi	r22, 0x02	; 2
    4f88:	40 e0       	ldi	r20, 0x00	; 0
    4f8a:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_voidSetPinValue>
}
    4f8e:	cf 91       	pop	r28
    4f90:	df 91       	pop	r29
    4f92:	08 95       	ret

00004f94 <__mulsi3>:
    4f94:	62 9f       	mul	r22, r18
    4f96:	d0 01       	movw	r26, r0
    4f98:	73 9f       	mul	r23, r19
    4f9a:	f0 01       	movw	r30, r0
    4f9c:	82 9f       	mul	r24, r18
    4f9e:	e0 0d       	add	r30, r0
    4fa0:	f1 1d       	adc	r31, r1
    4fa2:	64 9f       	mul	r22, r20
    4fa4:	e0 0d       	add	r30, r0
    4fa6:	f1 1d       	adc	r31, r1
    4fa8:	92 9f       	mul	r25, r18
    4faa:	f0 0d       	add	r31, r0
    4fac:	83 9f       	mul	r24, r19
    4fae:	f0 0d       	add	r31, r0
    4fb0:	74 9f       	mul	r23, r20
    4fb2:	f0 0d       	add	r31, r0
    4fb4:	65 9f       	mul	r22, r21
    4fb6:	f0 0d       	add	r31, r0
    4fb8:	99 27       	eor	r25, r25
    4fba:	72 9f       	mul	r23, r18
    4fbc:	b0 0d       	add	r27, r0
    4fbe:	e1 1d       	adc	r30, r1
    4fc0:	f9 1f       	adc	r31, r25
    4fc2:	63 9f       	mul	r22, r19
    4fc4:	b0 0d       	add	r27, r0
    4fc6:	e1 1d       	adc	r30, r1
    4fc8:	f9 1f       	adc	r31, r25
    4fca:	bd 01       	movw	r22, r26
    4fcc:	cf 01       	movw	r24, r30
    4fce:	11 24       	eor	r1, r1
    4fd0:	08 95       	ret

00004fd2 <__udivmodhi4>:
    4fd2:	aa 1b       	sub	r26, r26
    4fd4:	bb 1b       	sub	r27, r27
    4fd6:	51 e1       	ldi	r21, 0x11	; 17
    4fd8:	07 c0       	rjmp	.+14     	; 0x4fe8 <__udivmodhi4_ep>

00004fda <__udivmodhi4_loop>:
    4fda:	aa 1f       	adc	r26, r26
    4fdc:	bb 1f       	adc	r27, r27
    4fde:	a6 17       	cp	r26, r22
    4fe0:	b7 07       	cpc	r27, r23
    4fe2:	10 f0       	brcs	.+4      	; 0x4fe8 <__udivmodhi4_ep>
    4fe4:	a6 1b       	sub	r26, r22
    4fe6:	b7 0b       	sbc	r27, r23

00004fe8 <__udivmodhi4_ep>:
    4fe8:	88 1f       	adc	r24, r24
    4fea:	99 1f       	adc	r25, r25
    4fec:	5a 95       	dec	r21
    4fee:	a9 f7       	brne	.-22     	; 0x4fda <__udivmodhi4_loop>
    4ff0:	80 95       	com	r24
    4ff2:	90 95       	com	r25
    4ff4:	bc 01       	movw	r22, r24
    4ff6:	cd 01       	movw	r24, r26
    4ff8:	08 95       	ret

00004ffa <__divmodhi4>:
    4ffa:	97 fb       	bst	r25, 7
    4ffc:	09 2e       	mov	r0, r25
    4ffe:	07 26       	eor	r0, r23
    5000:	0a d0       	rcall	.+20     	; 0x5016 <__divmodhi4_neg1>
    5002:	77 fd       	sbrc	r23, 7
    5004:	04 d0       	rcall	.+8      	; 0x500e <__divmodhi4_neg2>
    5006:	e5 df       	rcall	.-54     	; 0x4fd2 <__udivmodhi4>
    5008:	06 d0       	rcall	.+12     	; 0x5016 <__divmodhi4_neg1>
    500a:	00 20       	and	r0, r0
    500c:	1a f4       	brpl	.+6      	; 0x5014 <__divmodhi4_exit>

0000500e <__divmodhi4_neg2>:
    500e:	70 95       	com	r23
    5010:	61 95       	neg	r22
    5012:	7f 4f       	sbci	r23, 0xFF	; 255

00005014 <__divmodhi4_exit>:
    5014:	08 95       	ret

00005016 <__divmodhi4_neg1>:
    5016:	f6 f7       	brtc	.-4      	; 0x5014 <__divmodhi4_exit>
    5018:	90 95       	com	r25
    501a:	81 95       	neg	r24
    501c:	9f 4f       	sbci	r25, 0xFF	; 255
    501e:	08 95       	ret

00005020 <__udivmodsi4>:
    5020:	a1 e2       	ldi	r26, 0x21	; 33
    5022:	1a 2e       	mov	r1, r26
    5024:	aa 1b       	sub	r26, r26
    5026:	bb 1b       	sub	r27, r27
    5028:	fd 01       	movw	r30, r26
    502a:	0d c0       	rjmp	.+26     	; 0x5046 <__udivmodsi4_ep>

0000502c <__udivmodsi4_loop>:
    502c:	aa 1f       	adc	r26, r26
    502e:	bb 1f       	adc	r27, r27
    5030:	ee 1f       	adc	r30, r30
    5032:	ff 1f       	adc	r31, r31
    5034:	a2 17       	cp	r26, r18
    5036:	b3 07       	cpc	r27, r19
    5038:	e4 07       	cpc	r30, r20
    503a:	f5 07       	cpc	r31, r21
    503c:	20 f0       	brcs	.+8      	; 0x5046 <__udivmodsi4_ep>
    503e:	a2 1b       	sub	r26, r18
    5040:	b3 0b       	sbc	r27, r19
    5042:	e4 0b       	sbc	r30, r20
    5044:	f5 0b       	sbc	r31, r21

00005046 <__udivmodsi4_ep>:
    5046:	66 1f       	adc	r22, r22
    5048:	77 1f       	adc	r23, r23
    504a:	88 1f       	adc	r24, r24
    504c:	99 1f       	adc	r25, r25
    504e:	1a 94       	dec	r1
    5050:	69 f7       	brne	.-38     	; 0x502c <__udivmodsi4_loop>
    5052:	60 95       	com	r22
    5054:	70 95       	com	r23
    5056:	80 95       	com	r24
    5058:	90 95       	com	r25
    505a:	9b 01       	movw	r18, r22
    505c:	ac 01       	movw	r20, r24
    505e:	bd 01       	movw	r22, r26
    5060:	cf 01       	movw	r24, r30
    5062:	08 95       	ret

00005064 <__prologue_saves__>:
    5064:	2f 92       	push	r2
    5066:	3f 92       	push	r3
    5068:	4f 92       	push	r4
    506a:	5f 92       	push	r5
    506c:	6f 92       	push	r6
    506e:	7f 92       	push	r7
    5070:	8f 92       	push	r8
    5072:	9f 92       	push	r9
    5074:	af 92       	push	r10
    5076:	bf 92       	push	r11
    5078:	cf 92       	push	r12
    507a:	df 92       	push	r13
    507c:	ef 92       	push	r14
    507e:	ff 92       	push	r15
    5080:	0f 93       	push	r16
    5082:	1f 93       	push	r17
    5084:	cf 93       	push	r28
    5086:	df 93       	push	r29
    5088:	cd b7       	in	r28, 0x3d	; 61
    508a:	de b7       	in	r29, 0x3e	; 62
    508c:	ca 1b       	sub	r28, r26
    508e:	db 0b       	sbc	r29, r27
    5090:	0f b6       	in	r0, 0x3f	; 63
    5092:	f8 94       	cli
    5094:	de bf       	out	0x3e, r29	; 62
    5096:	0f be       	out	0x3f, r0	; 63
    5098:	cd bf       	out	0x3d, r28	; 61
    509a:	09 94       	ijmp

0000509c <__epilogue_restores__>:
    509c:	2a 88       	ldd	r2, Y+18	; 0x12
    509e:	39 88       	ldd	r3, Y+17	; 0x11
    50a0:	48 88       	ldd	r4, Y+16	; 0x10
    50a2:	5f 84       	ldd	r5, Y+15	; 0x0f
    50a4:	6e 84       	ldd	r6, Y+14	; 0x0e
    50a6:	7d 84       	ldd	r7, Y+13	; 0x0d
    50a8:	8c 84       	ldd	r8, Y+12	; 0x0c
    50aa:	9b 84       	ldd	r9, Y+11	; 0x0b
    50ac:	aa 84       	ldd	r10, Y+10	; 0x0a
    50ae:	b9 84       	ldd	r11, Y+9	; 0x09
    50b0:	c8 84       	ldd	r12, Y+8	; 0x08
    50b2:	df 80       	ldd	r13, Y+7	; 0x07
    50b4:	ee 80       	ldd	r14, Y+6	; 0x06
    50b6:	fd 80       	ldd	r15, Y+5	; 0x05
    50b8:	0c 81       	ldd	r16, Y+4	; 0x04
    50ba:	1b 81       	ldd	r17, Y+3	; 0x03
    50bc:	aa 81       	ldd	r26, Y+2	; 0x02
    50be:	b9 81       	ldd	r27, Y+1	; 0x01
    50c0:	ce 0f       	add	r28, r30
    50c2:	d1 1d       	adc	r29, r1
    50c4:	0f b6       	in	r0, 0x3f	; 63
    50c6:	f8 94       	cli
    50c8:	de bf       	out	0x3e, r29	; 62
    50ca:	0f be       	out	0x3f, r0	; 63
    50cc:	cd bf       	out	0x3d, r28	; 61
    50ce:	ed 01       	movw	r28, r26
    50d0:	08 95       	ret

000050d2 <_exit>:
    50d2:	f8 94       	cli

000050d4 <__stop_program>:
    50d4:	ff cf       	rjmp	.-2      	; 0x50d4 <__stop_program>
